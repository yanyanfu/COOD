[
  {
    "id": "train-python-cosqa-train-183",
    "code": "def numpy_aware_eq ( a , b ) : if isinstance ( a , np . ndarray ) or isinstance ( b , np . ndarray ) : return np . array_equal ( a , b ) if ( ( isinstance ( a , Iterable ) and isinstance ( b , Iterable ) ) and not isinstance ( a , str ) and not isinstance ( b , str ) ) : if len ( a ) != len ( b ) : return False return all ( numpy_aware_eq ( x , y ) for x , y in zip ( a , b ) ) return a == b",
    "text": "check equality between arrays python",
    "label": 1,
    "raw": "def numpy_aware_eq(a, b):\n    \"\"\"Return whether two objects are equal via recursion, using\n    :func:`numpy.array_equal` for comparing numpy arays.\n    \"\"\"\n    if isinstance(a, np.ndarray) or isinstance(b, np.ndarray):\n        return np.array_equal(a, b)\n    if ((isinstance(a, Iterable) and isinstance(b, Iterable)) and\n            not isinstance(a, str) and not isinstance(b, str)):\n        if len(a) != len(b):\n            return False\n        return all(numpy_aware_eq(x, y) for x, y in zip(a, b))\n    return a == b"
  },
  {
    "id": "train-python-cosqa-train-2222",
    "code": "def type_converter ( text ) : if text . isdigit ( ) : return int ( text ) , int try : return float ( text ) , float except ValueError : return text , STRING_TYPE",
    "text": "python distinguish between float and int",
    "label": 1,
    "raw": "def type_converter(text):\n    \"\"\" I convert strings into integers, floats, and strings! \"\"\"\n    if text.isdigit():\n        return int(text), int\n\n    try:\n        return float(text), float\n    except ValueError:\n        return text, STRING_TYPE"
  },
  {
    "id": "train-python-cosqa-train-7794",
    "code": "def finish ( ) : out . warn ( \"Interrupted!\" ) for t in threads : t . stop ( ) jobs . clear ( ) out . warn ( \"Waiting for download threads to finish.\" )",
    "text": "python tell all threads to end",
    "label": 1,
    "raw": "def finish():\n    \"\"\"Print warning about interrupt and empty the job queue.\"\"\"\n    out.warn(\"Interrupted!\")\n    for t in threads:\n        t.stop()\n    jobs.clear()\n    out.warn(\"Waiting for download threads to finish.\")"
  },
  {
    "id": "train-python-cosqa-train-18814",
    "code": "def decode_value ( stream ) : length = decode_length ( stream ) ( value , ) = unpack_value ( \">{:d}s\" . format ( length ) , stream ) return value",
    "text": "python parsing bits of stream",
    "label": 1,
    "raw": "def decode_value(stream):\n    \"\"\"Decode the contents of a value from a serialized stream.\n\n    :param stream: Source data stream\n    :type stream: io.BytesIO\n    :returns: Decoded value\n    :rtype: bytes\n    \"\"\"\n    length = decode_length(stream)\n    (value,) = unpack_value(\">{:d}s\".format(length), stream)\n    return value"
  },
  {
    "id": "train-python-cosqa-train-9049",
    "code": "def get_base_dir ( ) : return os . path . split ( os . path . abspath ( os . path . dirname ( __file__ ) ) ) [ 0 ]",
    "text": "get base address of a process python",
    "label": 1,
    "raw": "def get_base_dir():\n    \"\"\"\n    Return the base directory\n    \"\"\"\n    return os.path.split(os.path.abspath(os.path.dirname(__file__)))[0]"
  },
  {
    "id": "train-python-cosqa-train-18003",
    "code": "def iprotate ( l , steps = 1 ) : if len ( l ) : steps %= len ( l ) if steps : firstPart = l [ : steps ] del l [ : steps ] l . extend ( firstPart ) return l",
    "text": "python how to rotate a list",
    "label": 1,
    "raw": "def iprotate(l, steps=1):\n    r\"\"\"Like rotate, but modifies `l` in-place.\n\n    >>> l = [1,2,3]\n    >>> iprotate(l) is l\n    True\n    >>> l\n    [2, 3, 1]\n    >>> iprotate(iprotate(l, 2), -3)\n    [1, 2, 3]\n\n    \"\"\"\n    if len(l):\n        steps %= len(l)\n        if steps:\n            firstPart = l[:steps]\n            del l[:steps]\n            l.extend(firstPart)\n    return l"
  },
  {
    "id": "train-python-cosqa-train-8870",
    "code": "def forget_canvas ( canvas ) : cc = [ c ( ) for c in canvasses if c ( ) is not None ] while canvas in cc : cc . remove ( canvas ) canvasses [ : ] = [ weakref . ref ( c ) for c in cc ]",
    "text": "delete elements from canvas python",
    "label": 1,
    "raw": "def forget_canvas(canvas):\n    \"\"\" Forget about the given canvas. Used by the canvas when closed.\n    \"\"\"\n    cc = [c() for c in canvasses if c() is not None]\n    while canvas in cc:\n        cc.remove(canvas)\n    canvasses[:] = [weakref.ref(c) for c in cc]"
  },
  {
    "id": "train-python-cosqa-train-2521",
    "code": "def size ( dtype ) : dtype = tf . as_dtype ( dtype ) if hasattr ( dtype , 'size' ) : return dtype . size return np . dtype ( dtype ) . itemsize",
    "text": "python get tf holder size",
    "label": 1,
    "raw": "def size(dtype):\n  \"\"\"Returns the number of bytes to represent this `dtype`.\"\"\"\n  dtype = tf.as_dtype(dtype)\n  if hasattr(dtype, 'size'):\n    return dtype.size\n  return np.dtype(dtype).itemsize"
  },
  {
    "id": "train-python-cosqa-train-6488",
    "code": "def first_unique_char ( s ) : if ( len ( s ) == 1 ) : return 0 ban = [ ] for i in range ( len ( s ) ) : if all ( s [ i ] != s [ k ] for k in range ( i + 1 , len ( s ) ) ) == True and s [ i ] not in ban : return i else : ban . append ( s [ i ] ) return - 1",
    "text": "python determine if a string contains unique characters",
    "label": 1,
    "raw": "def first_unique_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if (len(s) == 1):\n        return 0\n    ban = []\n    for i in range(len(s)):\n        if all(s[i] != s[k] for k in range(i + 1, len(s))) == True and s[i] not in ban:\n            return i\n        else:\n            ban.append(s[i])\n    return -1"
  },
  {
    "id": "train-python-cosqa-train-6523",
    "code": "def convert_str_to_datetime ( df , * , column : str , format : str ) : df [ column ] = pd . to_datetime ( df [ column ] , format = format ) return df",
    "text": "change string column to date python",
    "label": 1,
    "raw": "def convert_str_to_datetime(df, *, column: str, format: str):\n    \"\"\"\n    Convert string column into datetime column\n\n    ---\n\n    ### Parameters\n\n    *mandatory :*\n    - `column` (*str*): name of the column to format\n    - `format` (*str*): current format of the values (see [available formats](\n    https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior))\n    \"\"\"\n    df[column] = pd.to_datetime(df[column], format=format)\n    return df"
  },
  {
    "id": "train-python-cosqa-train-9106",
    "code": "def sanitize_word ( s ) : s = re . sub ( '[^\\w-]+' , '_' , s ) s = re . sub ( '__+' , '_' , s ) return s . strip ( '_' )",
    "text": "python hyphen in thrift namespace",
    "label": 1,
    "raw": "def sanitize_word(s):\n    \"\"\"Remove non-alphanumerical characters from metric word.\n    And trim excessive underscores.\n    \"\"\"\n    s = re.sub('[^\\w-]+', '_', s)\n    s = re.sub('__+', '_', s)\n    return s.strip('_')"
  },
  {
    "id": "train-python-cosqa-train-10564",
    "code": "def _write_separator ( self ) : tmp = self . _page_width - ( ( 4 * self . __indent_level ) + 2 ) self . _write_line ( '# ' + ( '-' * tmp ) )",
    "text": "writerow python extra line",
    "label": 1,
    "raw": "def _write_separator(self):\n        \"\"\"\n        Inserts a horizontal (commented) line tot the generated code.\n        \"\"\"\n        tmp = self._page_width - ((4 * self.__indent_level) + 2)\n        self._write_line('# ' + ('-' * tmp))"
  },
  {
    "id": "train-python-cosqa-train-9859",
    "code": "def delimited ( items , character = '|' ) : return '|' . join ( items ) if type ( items ) in ( list , tuple , set ) else items",
    "text": "how to strip quotes from a list of strings in python",
    "label": 1,
    "raw": "def delimited(items, character='|'):\n    \"\"\"Returns a character delimited version of the provided list as a Python string\"\"\"\n    return '|'.join(items) if type(items) in (list, tuple, set) else items"
  },
  {
    "id": "train-python-cosqa-dev-302",
    "code": "def main ( idle ) : while True : LOG . debug ( \"Sleeping for {0} seconds.\" . format ( idle ) ) time . sleep ( idle )",
    "text": "python sleep in a while loop",
    "label": 1,
    "raw": "def main(idle):\n    \"\"\"Any normal python logic which runs a loop. Can take arguments.\"\"\"\n    while True:\n\n        LOG.debug(\"Sleeping for {0} seconds.\".format(idle))\n        time.sleep(idle)"
  },
  {
    "id": "train-python-cosqa-train-18777",
    "code": "def astensor ( array : TensorLike ) -> BKTensor : tensor = tf . convert_to_tensor ( value = array , dtype = CTYPE ) return tensor",
    "text": "python tensorflow shape to array",
    "label": 1,
    "raw": "def astensor(array: TensorLike) -> BKTensor:\n    \"\"\"Covert numpy array to tensorflow tensor\"\"\"\n    tensor = tf.convert_to_tensor(value=array, dtype=CTYPE)\n    return tensor"
  },
  {
    "id": "train-python-cosqa-train-7197",
    "code": "def contained_in ( filename , directory ) : filename = os . path . normcase ( os . path . abspath ( filename ) ) directory = os . path . normcase ( os . path . abspath ( directory ) ) return os . path . commonprefix ( [ filename , directory ] ) == directory",
    "text": "how to check if file is in folder python",
    "label": 1,
    "raw": "def contained_in(filename, directory):\n    \"\"\"Test if a file is located within the given directory.\"\"\"\n    filename = os.path.normcase(os.path.abspath(filename))\n    directory = os.path.normcase(os.path.abspath(directory))\n    return os.path.commonprefix([filename, directory]) == directory"
  },
  {
    "id": "train-python-cosqa-train-7149",
    "code": "def R_rot_3d ( th ) : sx , sy , sz = np . sin ( th ) . T cx , cy , cz = np . cos ( th ) . T R = np . empty ( ( len ( th ) , 3 , 3 ) , dtype = np . float ) R [ : , 0 , 0 ] = cy * cz R [ : , 0 , 1 ] = - cy * sz R [ : , 0 , 2 ] = sy R [ : , 1 , 0 ] = sx * sy * cz + cx * sz R [ : , 1 , 1 ] = - sx * sy * sz + cx * cz R [ : , 1 , 2 ] = - sx * cy R [ : , 2 , 0 ] = - cx * sy * cz + sx * sz R [ : , 2 , 1 ] = cx * sy * sz + sx * cz R [ : , 2 , 2 ] = cx * cy return R",
    "text": "python matrix 3d rotation",
    "label": 1,
    "raw": "def R_rot_3d(th):\n    \"\"\"Return a 3-dimensional rotation matrix.\n\n    Parameters\n    ----------\n    th: array, shape (n, 3)\n        Angles about which to rotate along each axis.\n\n    Returns\n    -------\n    R: array, shape (n, 3, 3)\n    \"\"\"\n    sx, sy, sz = np.sin(th).T\n    cx, cy, cz = np.cos(th).T\n    R = np.empty((len(th), 3, 3), dtype=np.float)\n\n    R[:, 0, 0] = cy * cz\n    R[:, 0, 1] = -cy * sz\n    R[:, 0, 2] = sy\n\n    R[:, 1, 0] = sx * sy * cz + cx * sz\n    R[:, 1, 1] = -sx * sy * sz + cx * cz\n    R[:, 1, 2] = -sx * cy\n\n    R[:, 2, 0] = -cx * sy * cz + sx * sz\n    R[:, 2, 1] = cx * sy * sz + sx * cz\n    R[:, 2, 2] = cx * cy\n    return R"
  },
  {
    "id": "train-python-cosqa-train-11755",
    "code": "def parse_scale ( x ) : match = re . match ( r'^(.+?):(\\d+)$' , x ) if not match : raise ValueError ( 'Invalid scale \"%s\".' % x ) return match . group ( 1 ) , int ( match . group ( 2 ) )",
    "text": "how to read a scale as a number python",
    "label": 1,
    "raw": "def parse_scale(x):\n    \"\"\"Splits a \"%s:%d\" string and returns the string and number.\n\n    :return: A ``(string, int)`` pair extracted from ``x``.\n\n    :raise ValueError: the string ``x`` does not respect the input format.\n    \"\"\"\n    match = re.match(r'^(.+?):(\\d+)$', x)\n    if not match:\n        raise ValueError('Invalid scale \"%s\".' % x)\n    return match.group(1), int(match.group(2))"
  },
  {
    "id": "train-python-cosqa-train-17366",
    "code": "def sample_normal ( mean , var , rng ) : ret = numpy . sqrt ( var ) * rng . randn ( * mean . shape ) + mean return ret",
    "text": "normal distribution with n samples python",
    "label": 1,
    "raw": "def sample_normal(mean, var, rng):\n    \"\"\"Sample from independent normal distributions\n\n    Each element is an independent normal distribution.\n\n    Parameters\n    ----------\n    mean : numpy.ndarray\n      Means of the normal distribution. Shape --> (batch_num, sample_dim)\n    var : numpy.ndarray\n      Variance of the normal distribution. Shape --> (batch_num, sample_dim)\n    rng : numpy.random.RandomState\n\n    Returns\n    -------\n    ret : numpy.ndarray\n       The sampling result. Shape --> (batch_num, sample_dim)\n    \"\"\"\n    ret = numpy.sqrt(var) * rng.randn(*mean.shape) + mean\n    return ret"
  },
  {
    "id": "train-python-cosqa-train-18150",
    "code": "def simple_eq ( one : Instance , two : Instance , attrs : List [ str ] ) -> bool : return all ( getattr ( one , a ) == getattr ( two , a ) for a in attrs )",
    "text": "how to test if atributes are equal in python",
    "label": 1,
    "raw": "def simple_eq(one: Instance, two: Instance, attrs: List[str]) -> bool:\n    \"\"\"\n    Test if two objects are equal, based on a comparison of the specified\n    attributes ``attrs``.\n    \"\"\"\n    return all(getattr(one, a) == getattr(two, a) for a in attrs)"
  },
  {
    "id": "train-python-cosqa-train-11953",
    "code": "def gaussian_variogram_model ( m , d ) : psill = float ( m [ 0 ] ) range_ = float ( m [ 1 ] ) nugget = float ( m [ 2 ] ) return psill * ( 1. - np . exp ( - d ** 2. / ( range_ * 4. / 7. ) ** 2. ) ) + nugget",
    "text": "how to use python to plot gaussian distribution",
    "label": 1,
    "raw": "def gaussian_variogram_model(m, d):\n    \"\"\"Gaussian model, m is [psill, range, nugget]\"\"\"\n    psill = float(m[0])\n    range_ = float(m[1])\n    nugget = float(m[2])\n    return psill * (1. - np.exp(-d**2./(range_*4./7.)**2.)) + nugget"
  },
  {
    "id": "train-python-cosqa-train-9542",
    "code": "def bytesize ( arr ) : byte_size = np . prod ( arr . shape ) * np . dtype ( arr . dtype ) . itemsize return byte_size",
    "text": "how to know how large a python array is",
    "label": 1,
    "raw": "def bytesize(arr):\n    \"\"\"\n    Returns the memory byte size of a Numpy array as an integer.\n    \"\"\"\n    byte_size = np.prod(arr.shape) * np.dtype(arr.dtype).itemsize\n    return byte_size"
  },
  {
    "id": "train-python-cosqa-train-13652",
    "code": "def test ( nose_argsuments ) : from nose import run params = [ '__main__' , '-c' , 'nose.ini' ] params . extend ( nose_argsuments ) run ( argv = params )",
    "text": "python nose start context",
    "label": 1,
    "raw": "def test(nose_argsuments):\n    \"\"\" Run application tests \"\"\"\n    from nose import run\n\n    params = ['__main__', '-c', 'nose.ini']\n    params.extend(nose_argsuments)\n    run(argv=params)"
  },
  {
    "id": "train-python-cosqa-train-12975",
    "code": "def autoscan ( ) : for port in serial . tools . list_ports . comports ( ) : if is_micropython_usb_device ( port ) : connect_serial ( port [ 0 ] )",
    "text": "communicating with serial devices in python",
    "label": 1,
    "raw": "def autoscan():\n    \"\"\"autoscan will check all of the serial ports to see if they have\n       a matching VID:PID for a MicroPython board.\n    \"\"\"\n    for port in serial.tools.list_ports.comports():\n        if is_micropython_usb_device(port):\n            connect_serial(port[0])"
  },
  {
    "id": "train-python-cosqa-train-12434",
    "code": "def decode_arr ( data ) : data = data . encode ( 'utf-8' ) return frombuffer ( base64 . b64decode ( data ) , float64 )",
    "text": "python base64 decode byte array",
    "label": 1,
    "raw": "def decode_arr(data):\n    \"\"\"Extract a numpy array from a base64 buffer\"\"\"\n    data = data.encode('utf-8')\n    return frombuffer(base64.b64decode(data), float64)"
  },
  {
    "id": "train-python-cosqa-train-19243",
    "code": "def _kbhit_unix ( ) -> bool : dr , dw , de = select . select ( [ sys . stdin ] , [ ] , [ ] , 0 ) return dr != [ ]",
    "text": "python linux detect keypress",
    "label": 1,
    "raw": "def _kbhit_unix() -> bool:\n    \"\"\"\n    Under UNIX: is a keystroke available?\n    \"\"\"\n    dr, dw, de = select.select([sys.stdin], [], [], 0)\n    return dr != []"
  },
  {
    "id": "train-python-cosqa-train-2253",
    "code": "def onchange ( self , value ) : log . debug ( 'combo box. selected %s' % value ) self . select_by_value ( value ) return ( value , )",
    "text": "python dropdown cant select after change",
    "label": 1,
    "raw": "def onchange(self, value):\n        \"\"\"Called when a new DropDownItem gets selected.\n        \"\"\"\n        log.debug('combo box. selected %s' % value)\n        self.select_by_value(value)\n        return (value, )"
  },
  {
    "id": "train-python-cosqa-train-9326",
    "code": "def beautify ( string , * args , * * kwargs ) : parser = Parser ( args , kwargs ) return parser . beautify ( string )",
    "text": "python most beautiful string in the world",
    "label": 1,
    "raw": "def beautify(string, *args, **kwargs):\n\t\"\"\"\n\t\tConvenient interface to the ecstasy package.\n\n\t\tArguments:\n\t\t\tstring (str): The string to beautify with ecstasy.\n\t\t\targs (list): The positional arguments.\n\t\t\tkwargs (dict): The keyword ('always') arguments.\n\t\"\"\"\n\n\tparser = Parser(args, kwargs)\n\treturn parser.beautify(string)"
  },
  {
    "id": "train-python-cosqa-train-14015",
    "code": "def _get_var_from_string ( item ) : modname , varname = _split_mod_var_names ( item ) if modname : mod = __import__ ( modname , globals ( ) , locals ( ) , [ varname ] , - 1 ) return getattr ( mod , varname ) else : return globals ( ) [ varname ]",
    "text": "how to resolve a variable inside a string in python",
    "label": 1,
    "raw": "def _get_var_from_string(item):\n    \"\"\" Get resource variable. \"\"\"\n    modname, varname = _split_mod_var_names(item)\n    if modname:\n        mod = __import__(modname, globals(), locals(), [varname], -1)\n        return getattr(mod, varname)\n    else:\n        return globals()[varname]"
  },
  {
    "id": "train-python-cosqa-train-3533",
    "code": "def standard_deviation ( numbers ) : numbers = list ( numbers ) if not numbers : return 0 mean = sum ( numbers ) / len ( numbers ) return ( sum ( ( n - mean ) ** 2 for n in numbers ) / len ( numbers ) ) ** .5",
    "text": "python std deviation of list",
    "label": 1,
    "raw": "def standard_deviation(numbers):\n    \"\"\"Return standard deviation.\"\"\"\n    numbers = list(numbers)\n    if not numbers:\n        return 0\n    mean = sum(numbers) / len(numbers)\n    return (sum((n - mean) ** 2 for n in numbers) /\n            len(numbers)) ** .5"
  },
  {
    "id": "train-python-cosqa-train-6447",
    "code": "def string_to_date ( value ) : if isinstance ( value , datetime . date ) : return value return dateutil . parser . parse ( value ) . date ( )",
    "text": "python datetime make date from string",
    "label": 1,
    "raw": "def string_to_date(value):\n    \"\"\"\n    Return a Python date that corresponds to the specified string\n    representation.\n\n    @param value: string representation of a date.\n\n    @return: an instance ``datetime.datetime`` represented by the string.\n    \"\"\"\n    if isinstance(value, datetime.date):\n        return value\n\n    return dateutil.parser.parse(value).date()"
  },
  {
    "id": "train-python-cosqa-train-11250",
    "code": "def main ( pargs ) : input_file = sys . argv [ 1 ] fp = ParseFileLineByLine ( input_file ) for i in fp : print ( i )",
    "text": "how do i parse data from command line in python",
    "label": 1,
    "raw": "def main(pargs):\n    \"\"\"This should only be used for testing. The primary mode of operation is\n    as an imported library.\n    \"\"\"\n    input_file = sys.argv[1]\n    fp = ParseFileLineByLine(input_file)\n    for i in fp:\n        print(i)"
  },
  {
    "id": "train-python-cosqa-train-11478",
    "code": "def header_length ( bytearray ) : groups_of_3 , leftover = divmod ( len ( bytearray ) , 3 ) # 4 bytes out for each 3 bytes (or nonzero fraction thereof) in. n = groups_of_3 * 4 if leftover : n += 4 return n",
    "text": "how to determine length of python email message in bytes",
    "label": 1,
    "raw": "def header_length(bytearray):\n    \"\"\"Return the length of s when it is encoded with base64.\"\"\"\n    groups_of_3, leftover = divmod(len(bytearray), 3)\n    # 4 bytes out for each 3 bytes (or nonzero fraction thereof) in.\n    n = groups_of_3 * 4\n    if leftover:\n        n += 4\n    return n"
  },
  {
    "id": "train-python-cosqa-train-3726",
    "code": "def convert_value ( bind , value ) : type_name = get_type ( bind ) try : return typecast . cast ( type_name , value ) except typecast . ConverterError : return value",
    "text": "python wrapper function cast",
    "label": 1,
    "raw": "def convert_value(bind, value):\n    \"\"\" Type casting. \"\"\"\n    type_name = get_type(bind)\n    try:\n        return typecast.cast(type_name, value)\n    except typecast.ConverterError:\n        return value"
  },
  {
    "id": "train-python-cosqa-train-12323",
    "code": "def is_sparse_vector ( x ) : return sp . issparse ( x ) and len ( x . shape ) == 2 and x . shape [ 0 ] == 1",
    "text": "python 2d array remove sparse",
    "label": 1,
    "raw": "def is_sparse_vector(x):\n    \"\"\" x is a 2D sparse matrix with it's first shape equal to 1.\n    \"\"\"\n    return sp.issparse(x) and len(x.shape) == 2 and x.shape[0] == 1"
  },
  {
    "id": "train-python-cosqa-train-16927",
    "code": "def is_empty ( self ) : return all ( isinstance ( c , ParseNode ) and c . is_empty for c in self . children )",
    "text": "python check if node is empty",
    "label": 1,
    "raw": "def is_empty(self):\n    \"\"\"Returns True if this node has no children, or if all of its children are ParseNode instances\n    and are empty.\n    \"\"\"\n    return all(isinstance(c, ParseNode) and c.is_empty for c in self.children)"
  },
  {
    "id": "train-python-cosqa-train-15958",
    "code": "def get_last_modified_timestamp ( self ) : cmd = \"find . -print0 | xargs -0 stat -f '%T@ %p' | sort -n | tail -1 | cut -f2- -d' '\" ps = subprocess . Popen ( cmd , shell = True , stdout = subprocess . PIPE , stderr = subprocess . STDOUT ) output = ps . communicate ( ) [ 0 ] print output",
    "text": "how to get most recently added file in directory python",
    "label": 1,
    "raw": "def get_last_modified_timestamp(self):\n        \"\"\"\n        Looks at the files in a git root directory and grabs the last modified timestamp\n        \"\"\"\n        cmd = \"find . -print0 | xargs -0 stat -f '%T@ %p' | sort -n | tail -1 | cut -f2- -d' '\"\n        ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)\n        output = ps.communicate()[0]\n        print output"
  },
  {
    "id": "train-python-cosqa-train-17139",
    "code": "def url_host ( url : str ) -> str : from urllib . parse import urlparse res = urlparse ( url ) return res . netloc . split ( ':' ) [ 0 ] if res . netloc else ''",
    "text": "how to get hostname with python",
    "label": 1,
    "raw": "def url_host(url: str) -> str:\n    \"\"\"\n    Parses hostname from URL.\n    :param url: URL\n    :return: hostname\n    \"\"\"\n    from urllib.parse import urlparse\n    res = urlparse(url)\n    return res.netloc.split(':')[0] if res.netloc else ''"
  },
  {
    "id": "train-python-cosqa-train-13701",
    "code": "def truncate ( self , table ) : if isinstance ( table , ( list , set , tuple ) ) : for t in table : self . _truncate ( t ) else : self . _truncate ( table )",
    "text": "python oracle truncate a table",
    "label": 1,
    "raw": "def truncate(self, table):\n        \"\"\"Empty a table by deleting all of its rows.\"\"\"\n        if isinstance(table, (list, set, tuple)):\n            for t in table:\n                self._truncate(t)\n        else:\n            self._truncate(table)"
  },
  {
    "id": "train-python-cosqa-train-10818",
    "code": "def local_minima ( img , min_distance = 4 ) : # @TODO: Write a unittest for this. fits = numpy . asarray ( img ) minfits = minimum_filter ( fits , size = min_distance ) # default mode is reflect minima_mask = fits == minfits good_indices = numpy . transpose ( minima_mask . nonzero ( ) ) good_fits = fits [ minima_mask ] order = good_fits . argsort ( ) return good_indices [ order ] , good_fits [ order ]",
    "text": "python finding local maxima in image",
    "label": 1,
    "raw": "def local_minima(img, min_distance = 4):\n    r\"\"\"\n    Returns all local minima from an image.\n    \n    Parameters\n    ----------\n    img : array_like\n        The image.\n    min_distance : integer\n        The minimal distance between the minimas in voxels. If it is less, only the lower minima is returned.\n    \n    Returns\n    -------\n    indices : sequence\n        List of all minima indices.\n    values : sequence\n        List of all minima values.\n    \"\"\"\n    # @TODO: Write a unittest for this.\n    fits = numpy.asarray(img)\n    minfits = minimum_filter(fits, size=min_distance) # default mode is reflect\n    minima_mask = fits == minfits\n    good_indices = numpy.transpose(minima_mask.nonzero())\n    good_fits = fits[minima_mask]\n    order = good_fits.argsort()\n    return good_indices[order], good_fits[order]"
  },
  {
    "id": "train-python-cosqa-train-14486",
    "code": "def readCommaList ( fileList ) : names = fileList . split ( ',' ) fileList = [ ] for item in names : fileList . append ( item ) return fileList",
    "text": "remvoing the brackets in a list python",
    "label": 1,
    "raw": "def readCommaList(fileList):\n    \"\"\" Return a list of the files with the commas removed. \"\"\"\n    names=fileList.split(',')\n    fileList=[]\n    for item in names:\n        fileList.append(item)\n    return fileList"
  },
  {
    "id": "train-python-cosqa-train-10737",
    "code": "def replace ( s , replace ) : for r in replace : s = s . replace ( * r ) return s",
    "text": "can you replace multiple things in a string in python",
    "label": 1,
    "raw": "def replace(s, replace):\n    \"\"\"Replace multiple values in a string\"\"\"\n    for r in replace:\n        s = s.replace(*r)\n    return s"
  },
  {
    "id": "train-python-cosqa-train-11542",
    "code": "def get_previous ( self ) : return BillingCycle . objects . filter ( date_range__lt = self . date_range ) . order_by ( 'date_range' ) . last ( )",
    "text": "how to get a previous business date in python",
    "label": 1,
    "raw": "def get_previous(self):\n        \"\"\"Get the billing cycle prior to this one. May return None\"\"\"\n        return BillingCycle.objects.filter(date_range__lt=self.date_range).order_by('date_range').last()"
  },
  {
    "id": "train-python-cosqa-train-19663",
    "code": "def timeit ( func , log , limit ) : def newfunc ( * args , * * kwargs ) : \"\"\"Execute function and print execution time.\"\"\" t = time . time ( ) res = func ( * args , * * kwargs ) duration = time . time ( ) - t if duration > limit : print ( func . __name__ , \"took %0.2f seconds\" % duration , file = log ) print ( args , file = log ) print ( kwargs , file = log ) return res return update_func_meta ( newfunc , func )",
    "text": "python limit duration function execution metadata",
    "label": 1,
    "raw": "def timeit (func, log, limit):\n    \"\"\"Print execution time of the function. For quick'n'dirty profiling.\"\"\"\n\n    def newfunc (*args, **kwargs):\n        \"\"\"Execute function and print execution time.\"\"\"\n        t = time.time()\n        res = func(*args, **kwargs)\n        duration = time.time() - t\n        if duration > limit:\n            print(func.__name__, \"took %0.2f seconds\" % duration, file=log)\n            print(args, file=log)\n            print(kwargs, file=log)\n        return res\n    return update_func_meta(newfunc, func)"
  },
  {
    "id": "train-python-cosqa-train-10837",
    "code": "def onchange ( self , value ) : log . debug ( 'combo box. selected %s' % value ) self . select_by_value ( value ) return ( value , )",
    "text": "combobox dropdown event python click",
    "label": 1,
    "raw": "def onchange(self, value):\n        \"\"\"Called when a new DropDownItem gets selected.\n        \"\"\"\n        log.debug('combo box. selected %s' % value)\n        self.select_by_value(value)\n        return (value, )"
  },
  {
    "id": "train-python-cosqa-train-5874",
    "code": "def scale_image ( image , new_width ) : ( original_width , original_height ) = image . size aspect_ratio = original_height / float ( original_width ) new_height = int ( aspect_ratio * new_width ) # This scales it wider than tall, since characters are biased new_image = image . resize ( ( new_width * 2 , new_height ) ) return new_image",
    "text": "python3 make image height equal width",
    "label": 1,
    "raw": "def scale_image(image, new_width):\n    \"\"\"Resizes an image preserving the aspect ratio.\n    \"\"\"\n    (original_width, original_height) = image.size\n    aspect_ratio = original_height/float(original_width)\n    new_height = int(aspect_ratio * new_width)\n\n    # This scales it wider than tall, since characters are biased\n    new_image = image.resize((new_width*2, new_height))\n    return new_image"
  },
  {
    "id": "train-python-cosqa-train-17911",
    "code": "def prin ( * args , * * kwargs ) : print >> kwargs . get ( 'out' , None ) , \" \" . join ( [ str ( arg ) for arg in args ] )",
    "text": "python print *args keys",
    "label": 1,
    "raw": "def prin(*args, **kwargs):\n    r\"\"\"Like ``print``, but a function. I.e. prints out all arguments as\n    ``print`` would do. Specify output stream like this::\n\n      print('ERROR', `out=\"sys.stderr\"``).\n\n    \"\"\"\n    print >> kwargs.get('out',None), \" \".join([str(arg) for arg in args])"
  },
  {
    "id": "train-python-cosqa-train-8315",
    "code": "def _valid_other_type ( x , types ) : return all ( any ( isinstance ( el , t ) for t in types ) for el in np . ravel ( x ) )",
    "text": "python check element type in array",
    "label": 1,
    "raw": "def _valid_other_type(x, types):\n    \"\"\"\n    Do all elements of x have a type from types?\n    \"\"\"\n    return all(any(isinstance(el, t) for t in types) for el in np.ravel(x))"
  },
  {
    "id": "train-python-cosqa-train-19803",
    "code": "def argmax ( self , rows : List [ Row ] , column : ComparableColumn ) -> List [ Row ] : if not rows : return [ ] value_row_pairs = [ ( row . values [ column . name ] , row ) for row in rows ] if not value_row_pairs : return [ ] # Returns a list containing the row with the max cell value. return [ sorted ( value_row_pairs , key = lambda x : x [ 0 ] , reverse = True ) [ 0 ] [ 1 ] ]",
    "text": "python how to get max from rows in column",
    "label": 1,
    "raw": "def argmax(self, rows: List[Row], column: ComparableColumn) -> List[Row]:\n        \"\"\"\n        Takes a list of rows and a column name and returns a list containing a single row (dict from\n        columns to cells) that has the maximum numerical value in the given column. We return a list\n        instead of a single dict to be consistent with the return type of ``select`` and\n        ``all_rows``.\n        \"\"\"\n        if not rows:\n            return []\n        value_row_pairs = [(row.values[column.name], row) for row in rows]\n        if not value_row_pairs:\n            return []\n        # Returns a list containing the row with the max cell value.\n        return [sorted(value_row_pairs, key=lambda x: x[0], reverse=True)[0][1]]"
  },
  {
    "id": "train-python-cosqa-train-8297",
    "code": "def is_iterable_of_int ( l ) : if not is_iterable ( l ) : return False return all ( is_int ( value ) for value in l )",
    "text": "python change int to iteratable",
    "label": 1,
    "raw": "def is_iterable_of_int(l):\n    r\"\"\" Checks if l is iterable and contains only integral types \"\"\"\n    if not is_iterable(l):\n        return False\n\n    return all(is_int(value) for value in l)"
  },
  {
    "id": "train-python-cosqa-dev-115",
    "code": "def first_sunday ( self , year , month ) : date = datetime ( year , month , 1 , 0 ) days_until_sunday = 6 - date . weekday ( ) return date + timedelta ( days = days_until_sunday )",
    "text": "python 3 get the first sunday of the month",
    "label": 1,
    "raw": "def first_sunday(self, year, month):\n        \"\"\"Get the first sunday of a month.\"\"\"\n        date = datetime(year, month, 1, 0)\n        days_until_sunday = 6 - date.weekday()\n\n        return date + timedelta(days=days_until_sunday)"
  },
  {
    "id": "train-python-cosqa-train-13179",
    "code": "def load_files ( files ) : for py_file in files : LOG . debug ( \"exec %s\" , py_file ) execfile ( py_file , globals ( ) , locals ( ) )",
    "text": "execute python files simultaneously from a single python file",
    "label": 1,
    "raw": "def load_files(files):\n    \"\"\"Load and execute a python file.\"\"\"\n\n    for py_file in files:\n        LOG.debug(\"exec %s\", py_file)\n        execfile(py_file, globals(), locals())"
  },
  {
    "id": "train-python-cosqa-train-6997",
    "code": "def explained_variance ( returns , values ) : exp_var = 1 - torch . var ( returns - values ) / torch . var ( returns ) return exp_var . item ( )",
    "text": "get variance of vector python",
    "label": 1,
    "raw": "def explained_variance(returns, values):\n    \"\"\" Calculate how much variance in returns do the values explain \"\"\"\n    exp_var = 1 - torch.var(returns - values) / torch.var(returns)\n    return exp_var.item()"
  },
  {
    "id": "train-python-cosqa-train-11663",
    "code": "def fopen ( name , mode = 'r' , buffering = - 1 ) : f = _fopen ( name , mode , buffering ) return _FileObjectThreadWithContext ( f , mode , buffering )",
    "text": "how to make a file open at a specific time with python",
    "label": 1,
    "raw": "def fopen(name, mode='r', buffering=-1):\n    \"\"\"Similar to Python's built-in `open()` function.\"\"\"\n    f = _fopen(name, mode, buffering)\n    return _FileObjectThreadWithContext(f, mode, buffering)"
  },
  {
    "id": "train-python-cosqa-train-18077",
    "code": "def list_depth ( list_ , func = max , _depth = 0 ) : depth_list = [ list_depth ( item , func = func , _depth = _depth + 1 ) for item in list_ if util_type . is_listlike ( item ) ] if len ( depth_list ) > 0 : return func ( depth_list ) else : return _depth",
    "text": "how to determine depth nested list python",
    "label": 1,
    "raw": "def list_depth(list_, func=max, _depth=0):\n    \"\"\"\n    Returns the deepest level of nesting within a list of lists\n\n    Args:\n       list_  : a nested listlike object\n       func   : depth aggregation strategy (defaults to max)\n       _depth : internal var\n\n    Example:\n        >>> # ENABLE_DOCTEST\n        >>> from utool.util_list import *  # NOQA\n        >>> list_ = [[[[[1]]], [3]], [[1], [3]], [[1], [3]]]\n        >>> result = (list_depth(list_, _depth=0))\n        >>> print(result)\n\n    \"\"\"\n    depth_list = [list_depth(item, func=func, _depth=_depth + 1)\n                  for item in  list_ if util_type.is_listlike(item)]\n    if len(depth_list) > 0:\n        return func(depth_list)\n    else:\n        return _depth"
  },
  {
    "id": "train-python-cosqa-train-12754",
    "code": "def getdefaultencoding ( ) : enc = get_stream_enc ( sys . stdin ) if not enc or enc == 'ascii' : try : # There are reports of getpreferredencoding raising errors # in some cases, which may well be fixed, but let's be conservative here. enc = locale . getpreferredencoding ( ) except Exception : pass return enc or sys . getdefaultencoding ( )",
    "text": "python default encoding on windows",
    "label": 1,
    "raw": "def getdefaultencoding():\n    \"\"\"Return IPython's guess for the default encoding for bytes as text.\n\n    Asks for stdin.encoding first, to match the calling Terminal, but that\n    is often None for subprocesses.  Fall back on locale.getpreferredencoding()\n    which should be a sensible platform default (that respects LANG environment),\n    and finally to sys.getdefaultencoding() which is the most conservative option,\n    and usually ASCII.\n    \"\"\"\n    enc = get_stream_enc(sys.stdin)\n    if not enc or enc=='ascii':\n        try:\n            # There are reports of getpreferredencoding raising errors\n            # in some cases, which may well be fixed, but let's be conservative here.\n            enc = locale.getpreferredencoding()\n        except Exception:\n            pass\n    return enc or sys.getdefaultencoding()"
  },
  {
    "id": "train-python-cosqa-train-15485",
    "code": "def object_as_dict ( obj ) : return { c . key : getattr ( obj , c . key ) for c in inspect ( obj ) . mapper . column_attrs }",
    "text": "get object fields in a dict in python",
    "label": 1,
    "raw": "def object_as_dict(obj):\n    \"\"\"Turn an SQLAlchemy model into a dict of field names and values.\n\n    Based on https://stackoverflow.com/a/37350445/1579058\n    \"\"\"\n    return {c.key: getattr(obj, c.key)\n            for c in inspect(obj).mapper.column_attrs}"
  },
  {
    "id": "train-python-cosqa-train-5963",
    "code": "def lint_file ( in_file , out_file = None ) : for line in in_file : print ( line . strip ( ) , file = out_file )",
    "text": "remove spaces in a file python code",
    "label": 1,
    "raw": "def lint_file(in_file, out_file=None):\n    \"\"\"Helps remove extraneous whitespace from the lines of a file\n\n    :param file in_file: A readable file or file-like\n    :param file out_file: A writable file or file-like\n    \"\"\"\n    for line in in_file:\n        print(line.strip(), file=out_file)"
  },
  {
    "id": "train-python-cosqa-train-9573",
    "code": "def redirect_output ( fileobj ) : old = sys . stdout sys . stdout = fileobj try : yield fileobj finally : sys . stdout = old",
    "text": "python redirect output to both file and stdout",
    "label": 1,
    "raw": "def redirect_output(fileobj):\n    \"\"\"Redirect standard out to file.\"\"\"\n    old = sys.stdout\n    sys.stdout = fileobj\n    try:\n        yield fileobj\n    finally:\n        sys.stdout = old"
  },
  {
    "id": "train-python-cosqa-train-850",
    "code": "def bitsToString ( arr ) : s = array ( 'c' , '.' * len ( arr ) ) for i in xrange ( len ( arr ) ) : if arr [ i ] == 1 : s [ i ] = '*' return s",
    "text": "python make array to string",
    "label": 1,
    "raw": "def bitsToString(arr):\n  \"\"\"Returns a string representing a numpy array of 0's and 1's\"\"\"\n  s = array('c','.'*len(arr))\n  for i in xrange(len(arr)):\n    if arr[i] == 1:\n      s[i]='*'\n  return s"
  },
  {
    "id": "train-python-cosqa-train-11610",
    "code": "def _guess_type ( val ) : if isinstance ( val , bool ) : return \"choice\" elif isinstance ( val , int ) : return \"number\" elif isinstance ( val , float ) : return \"number\" elif isinstance ( val , str ) : return \"text\" elif hasattr ( val , 'read' ) : return \"file\" else : return \"text\"",
    "text": "how to identify type of input with python",
    "label": 1,
    "raw": "def _guess_type(val):\n        \"\"\"Guess the input type of the parameter based off the default value, if unknown use text\"\"\"\n        if isinstance(val, bool):\n            return \"choice\"\n        elif isinstance(val, int):\n            return \"number\"\n        elif isinstance(val, float):\n            return \"number\"\n        elif isinstance(val, str):\n            return \"text\"\n        elif hasattr(val, 'read'):\n            return \"file\"\n        else:\n            return \"text\""
  },
  {
    "id": "train-python-cosqa-train-8878",
    "code": "def get_own_ip ( ) : sock = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) try : sock . connect ( ( \"8.8.8.8\" , 80 ) ) except socket . gaierror : ip_ = \"127.0.0.1\" else : ip_ = sock . getsockname ( ) [ 0 ] finally : sock . close ( ) return ip_",
    "text": "python get ipaddress of server",
    "label": 1,
    "raw": "def get_own_ip():\n    \"\"\"Get the host's ip number.\n    \"\"\"\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    try:\n        sock.connect((\"8.8.8.8\", 80))\n    except socket.gaierror:\n        ip_ = \"127.0.0.1\"\n    else:\n        ip_ = sock.getsockname()[0]\n    finally:\n        sock.close()\n    return ip_"
  },
  {
    "id": "train-python-cosqa-train-170",
    "code": "def timed_rotating_file_handler ( name , logname , filename , when = 'h' , interval = 1 , backupCount = 0 , encoding = None , delay = False , utc = False ) : return wrap_log_handler ( logging . handlers . TimedRotatingFileHandler ( filename , when = when , interval = interval , backupCount = backupCount , encoding = encoding , delay = delay , utc = utc ) )",
    "text": "change path of log files using python rotatingfilehandler",
    "label": 1,
    "raw": "def timed_rotating_file_handler(name, logname, filename, when='h',\n                                interval=1, backupCount=0,\n                                encoding=None, delay=False, utc=False):\n    \"\"\"\n    A Bark logging handler logging output to a named file.  At\n    intervals specified by the 'when', the file will be rotated, under\n    control of 'backupCount'.\n\n    Similar to logging.handlers.TimedRotatingFileHandler.\n    \"\"\"\n\n    return wrap_log_handler(logging.handlers.TimedRotatingFileHandler(\n        filename, when=when, interval=interval, backupCount=backupCount,\n        encoding=encoding, delay=delay, utc=utc))"
  },
  {
    "id": "train-python-cosqa-train-10226",
    "code": "def uncomment_line ( line , prefix ) : if not prefix : return line if line . startswith ( prefix + ' ' ) : return line [ len ( prefix ) + 1 : ] if line . startswith ( prefix ) : return line [ len ( prefix ) : ] return line",
    "text": "remove first instance of a space in string python",
    "label": 1,
    "raw": "def uncomment_line(line, prefix):\n    \"\"\"Remove prefix (and space) from line\"\"\"\n    if not prefix:\n        return line\n    if line.startswith(prefix + ' '):\n        return line[len(prefix) + 1:]\n    if line.startswith(prefix):\n        return line[len(prefix):]\n    return line"
  },
  {
    "id": "train-python-cosqa-train-8978",
    "code": "def uniquify_list ( L ) : return [ e for i , e in enumerate ( L ) if L . index ( e ) == i ]",
    "text": "finding unique lists in python",
    "label": 1,
    "raw": "def uniquify_list(L):\n    \"\"\"Same order unique list using only a list compression.\"\"\"\n    return [e for i, e in enumerate(L) if L.index(e) == i]"
  },
  {
    "id": "train-python-cosqa-train-10421",
    "code": "def xml_str_to_dict ( s ) : xml = minidom . parseString ( s ) return pythonzimbra . tools . xmlserializer . dom_to_dict ( xml . firstChild )",
    "text": "python bs4 xml to dict",
    "label": 1,
    "raw": "def xml_str_to_dict(s):\n    \"\"\" Transforms an XML string it to python-zimbra dict format\n\n    For format, see:\n      https://github.com/Zimbra-Community/python-zimbra/blob/master/README.md\n\n    :param: a string, containing XML\n    :returns: a dict, with python-zimbra format\n    \"\"\"\n    xml = minidom.parseString(s)\n    return pythonzimbra.tools.xmlserializer.dom_to_dict(xml.firstChild)"
  },
  {
    "id": "train-python-cosqa-train-12234",
    "code": "def load ( raw_bytes ) : try : if not isinstance ( raw_bytes , string_type ) : raw_bytes = raw_bytes . decode ( ) return json . loads ( raw_bytes ) except ValueError as e : raise SerializationException ( str ( e ) )",
    "text": "object of type is not json serializable python",
    "label": 1,
    "raw": "def load(raw_bytes):\n        \"\"\"\n        given a bytes object, should return a base python data\n        structure that represents the object.\n        \"\"\"\n        try:\n            if not isinstance(raw_bytes, string_type):\n                raw_bytes = raw_bytes.decode()\n            return json.loads(raw_bytes)\n        except ValueError as e:\n            raise SerializationException(str(e))"
  },
  {
    "id": "train-python-cosqa-train-13094",
    "code": "def __getitem__ ( self , index ) : row , col = index return self . rows [ row ] [ col ]",
    "text": "python get item at an index",
    "label": 1,
    "raw": "def __getitem__(self, index):\n    \"\"\"Get the item at the given index.\n\n    Index is a tuple of (row, col)\n    \"\"\"\n    row, col = index\n    return self.rows[row][col]"
  },
  {
    "id": "train-python-cosqa-train-8964",
    "code": "def title ( msg ) : if sys . platform . startswith ( \"win\" ) : ctypes . windll . kernel32 . SetConsoleTitleW ( tounicode ( msg ) )",
    "text": "python gui change title window",
    "label": 1,
    "raw": "def title(msg):\n    \"\"\"Sets the title of the console window.\"\"\"\n    if sys.platform.startswith(\"win\"):\n        ctypes.windll.kernel32.SetConsoleTitleW(tounicode(msg))"
  },
  {
    "id": "train-python-cosqa-train-8610",
    "code": "def load_files ( files ) : for py_file in files : LOG . debug ( \"exec %s\" , py_file ) execfile ( py_file , globals ( ) , locals ( ) )",
    "text": "call multiple python files in a script",
    "label": 1,
    "raw": "def load_files(files):\n    \"\"\"Load and execute a python file.\"\"\"\n\n    for py_file in files:\n        LOG.debug(\"exec %s\", py_file)\n        execfile(py_file, globals(), locals())"
  },
  {
    "id": "train-python-cosqa-train-997",
    "code": "def create_symlink ( source , link_name ) : os_symlink = getattr ( os , \"symlink\" , None ) if isinstance ( os_symlink , collections . Callable ) : os_symlink ( source , link_name ) else : import ctypes csl = ctypes . windll . kernel32 . CreateSymbolicLinkW csl . argtypes = ( ctypes . c_wchar_p , ctypes . c_wchar_p , ctypes . c_uint32 ) csl . restype = ctypes . c_ubyte flags = 1 if os . path . isdir ( source ) else 0 if csl ( link_name , source , flags ) == 0 : raise ctypes . WinError ( )",
    "text": "python open symbolic link on windows",
    "label": 1,
    "raw": "def create_symlink(source, link_name):\n    \"\"\"\n    Creates symbolic link for either operating system.\n\n    http://stackoverflow.com/questions/6260149/os-symlink-support-in-windows\n    \"\"\"\n    os_symlink = getattr(os, \"symlink\", None)\n    if isinstance(os_symlink, collections.Callable):\n        os_symlink(source, link_name)\n    else:\n        import ctypes\n        csl = ctypes.windll.kernel32.CreateSymbolicLinkW\n        csl.argtypes = (ctypes.c_wchar_p, ctypes.c_wchar_p, ctypes.c_uint32)\n        csl.restype = ctypes.c_ubyte\n        flags = 1 if os.path.isdir(source) else 0\n        if csl(link_name, source, flags) == 0:\n            raise ctypes.WinError()"
  },
  {
    "id": "train-python-cosqa-train-13438",
    "code": "def json_response ( data , status = 200 ) : from django . http import JsonResponse return JsonResponse ( data = data , status = status , safe = isinstance ( data , dict ) )",
    "text": "python jsonresponse int not callable",
    "label": 1,
    "raw": "def json_response(data, status=200):\n    \"\"\"Return a JsonResponse. Make sure you have django installed first.\"\"\"\n    from django.http import JsonResponse\n    return JsonResponse(data=data, status=status, safe=isinstance(data, dict))"
  },
  {
    "id": "train-python-cosqa-train-18827",
    "code": "def count ( args ) : counts = defaultdict ( int ) for arg in args : for item in arg : counts [ item ] = counts [ item ] + 1 return counts",
    "text": "count the frequency of an integer in a list python",
    "label": 1,
    "raw": "def count(args):\n    \"\"\" count occurences in a list of lists\n    >>> count([['a','b'],['a']])\n    defaultdict(int, {'a' : 2, 'b' : 1})\n    \"\"\"\n    counts = defaultdict(int)\n    for arg in args:\n        for item in arg:\n            counts[item] = counts[item] + 1\n    return counts"
  },
  {
    "id": "train-python-cosqa-train-19079",
    "code": "def expired ( self ) : if self . timeout is None : return False return monotonic ( ) - self . start_time > self . timeout",
    "text": "python 3 if action is within a set time do nothing",
    "label": 1,
    "raw": "def expired(self):\n        \"\"\"Boolean property if this action has expired\n        \"\"\"\n        if self.timeout is None:\n            return False\n\n        return monotonic() - self.start_time > self.timeout"
  },
  {
    "id": "train-python-cosqa-train-1133",
    "code": "def url_read_text ( url , verbose = True ) : data = url_read ( url , verbose ) text = data . decode ( 'utf8' ) return text",
    "text": "python read raw txt from url",
    "label": 1,
    "raw": "def url_read_text(url, verbose=True):\n    r\"\"\"\n    Directly reads text data from url\n    \"\"\"\n    data = url_read(url, verbose)\n    text = data.decode('utf8')\n    return text"
  },
  {
    "id": "train-python-cosqa-train-13180",
    "code": "def table_width ( self ) : outer_widths = max_dimensions ( self . table_data , self . padding_left , self . padding_right ) [ 2 ] outer_border = 2 if self . outer_border else 0 inner_border = 1 if self . inner_column_border else 0 return table_width ( outer_widths , outer_border , inner_border )",
    "text": "python gridtablebase column width",
    "label": 1,
    "raw": "def table_width(self):\n        \"\"\"Return the width of the table including padding and borders.\"\"\"\n        outer_widths = max_dimensions(self.table_data, self.padding_left, self.padding_right)[2]\n        outer_border = 2 if self.outer_border else 0\n        inner_border = 1 if self.inner_column_border else 0\n        return table_width(outer_widths, outer_border, inner_border)"
  },
  {
    "id": "train-python-cosqa-train-15379",
    "code": "def hide ( self ) : self . tk . withdraw ( ) self . _visible = False if self . _modal : self . tk . grab_release ( )",
    "text": "python hide tkinter window",
    "label": 1,
    "raw": "def hide(self):\n        \"\"\"Hide the window.\"\"\"\n        self.tk.withdraw()\n        self._visible = False\n        if self._modal:\n            self.tk.grab_release()"
  },
  {
    "id": "train-python-cosqa-train-14265",
    "code": "def straight_line_show ( title , length = 100 , linestyle = \"=\" , pad = 0 ) : print ( StrTemplate . straight_line ( title = title , length = length , linestyle = linestyle , pad = pad ) )",
    "text": "latex auto line wrap python display",
    "label": 1,
    "raw": "def straight_line_show(title, length=100, linestyle=\"=\", pad=0):\n        \"\"\"Print a formatted straight line.\n        \"\"\"\n        print(StrTemplate.straight_line(\n            title=title, length=length, linestyle=linestyle, pad=pad))"
  },
  {
    "id": "train-python-cosqa-train-14679",
    "code": "def is_valid_regex ( string ) : try : re . compile ( string ) is_valid = True except re . error : is_valid = False return is_valid",
    "text": "test if a regexp match fails in python",
    "label": 1,
    "raw": "def is_valid_regex(string):\n    \"\"\"\n    Checks whether the re module can compile the given regular expression.\n\n    Parameters\n    ----------\n    string: str\n\n    Returns\n    -------\n    boolean\n    \"\"\"\n    try:\n        re.compile(string)\n        is_valid = True\n    except re.error:\n        is_valid = False\n    return is_valid"
  },
  {
    "id": "train-python-cosqa-train-18018",
    "code": "def get_datatype ( self , table : str , column : str ) -> str : return self . flavour . get_datatype ( self , table , column ) . upper ( )",
    "text": "python get datatype of sql column",
    "label": 1,
    "raw": "def get_datatype(self, table: str, column: str) -> str:\n        \"\"\"Returns database SQL datatype for a column: e.g. VARCHAR.\"\"\"\n        return self.flavour.get_datatype(self, table, column).upper()"
  },
  {
    "id": "train-python-cosqa-train-12796",
    "code": "def update ( dct , dct_merge ) : for key , value in dct_merge . items ( ) : if key in dct and isinstance ( dct [ key ] , dict ) : dct [ key ] = update ( dct [ key ] , value ) else : dct [ key ] = value return dct",
    "text": "python dict merge deep",
    "label": 1,
    "raw": "def update(dct, dct_merge):\n    \"\"\"Recursively merge dicts.\"\"\"\n    for key, value in dct_merge.items():\n        if key in dct and isinstance(dct[key], dict):\n            dct[key] = update(dct[key], value)\n        else:\n            dct[key] = value\n    return dct"
  },
  {
    "id": "train-python-cosqa-train-13862",
    "code": "def generate_header ( headerfields , oldheader , group_by_field ) : fieldtypes = [ 'peptidefdr' , 'peptidepep' , 'nopsms' , 'proteindata' , 'precursorquant' , 'isoquant' ] return generate_general_header ( headerfields , fieldtypes , peptabledata . HEADER_PEPTIDE , oldheader , group_by_field )",
    "text": "how to make a python header",
    "label": 1,
    "raw": "def generate_header(headerfields, oldheader, group_by_field):\n    \"\"\"Returns a header as a list, ready to write to TSV file\"\"\"\n    fieldtypes = ['peptidefdr', 'peptidepep', 'nopsms', 'proteindata',\n                  'precursorquant', 'isoquant']\n    return generate_general_header(headerfields, fieldtypes,\n                                   peptabledata.HEADER_PEPTIDE, oldheader,\n                                   group_by_field)"
  },
  {
    "id": "train-python-cosqa-train-9175",
    "code": "def find_all ( self , string , callback ) : for index , output in self . iter ( string ) : callback ( index , output )",
    "text": "python iterate function call",
    "label": 1,
    "raw": "def find_all(self, string, callback):\n\t\t\"\"\"\n\t\tWrapper on iter method, callback gets an iterator result\n\t\t\"\"\"\n\t\tfor index, output in self.iter(string):\n\t\t\tcallback(index, output)"
  },
  {
    "id": "train-python-cosqa-train-13995",
    "code": "def _top ( self ) : # Goto top of the list self . top . body . focus_position = 2 if self . compact is False else 0 self . top . keypress ( self . size , \"\" )",
    "text": "python set top most window",
    "label": 1,
    "raw": "def _top(self):\n        \"\"\" g \"\"\"\n        # Goto top of the list\n        self.top.body.focus_position = 2 if self.compact is False else 0\n        self.top.keypress(self.size, \"\")"
  },
  {
    "id": "train-python-cosqa-train-12065",
    "code": "def dict_hash ( dct ) : dct_s = json . dumps ( dct , sort_keys = True ) try : m = md5 ( dct_s ) except TypeError : m = md5 ( dct_s . encode ( ) ) return m . hexdigest ( )",
    "text": "js hash array like python dict",
    "label": 1,
    "raw": "def dict_hash(dct):\n    \"\"\"Return a hash of the contents of a dictionary\"\"\"\n    dct_s = json.dumps(dct, sort_keys=True)\n\n    try:\n        m = md5(dct_s)\n    except TypeError:\n        m = md5(dct_s.encode())\n\n    return m.hexdigest()"
  },
  {
    "id": "train-python-cosqa-train-13618",
    "code": "def compute ( args ) : x , y , params = args return x , y , mandelbrot ( x , y , params )",
    "text": "python multiprocessing pool apply arg",
    "label": 1,
    "raw": "def compute(args):\n    x, y, params = args\n    \"\"\"Callable function for the multiprocessing pool.\"\"\"\n    return x, y, mandelbrot(x, y, params)"
  },
  {
    "id": "train-python-cosqa-train-13953",
    "code": "def cpp_prog_builder ( build_context , target ) : yprint ( build_context . conf , 'Build CppProg' , target ) workspace_dir = build_context . get_workspace ( 'CppProg' , target . name ) build_cpp ( build_context , target , target . compiler_config , workspace_dir )",
    "text": "python script to compile c++ program",
    "label": 1,
    "raw": "def cpp_prog_builder(build_context, target):\n    \"\"\"Build a C++ binary executable\"\"\"\n    yprint(build_context.conf, 'Build CppProg', target)\n    workspace_dir = build_context.get_workspace('CppProg', target.name)\n    build_cpp(build_context, target, target.compiler_config, workspace_dir)"
  },
  {
    "id": "train-python-cosqa-train-18450",
    "code": "def arcball_map_to_sphere ( point , center , radius ) : v0 = ( point [ 0 ] - center [ 0 ] ) / radius v1 = ( center [ 1 ] - point [ 1 ] ) / radius n = v0 * v0 + v1 * v1 if n > 1.0 : # position outside of sphere n = math . sqrt ( n ) return numpy . array ( [ v0 / n , v1 / n , 0.0 ] ) else : return numpy . array ( [ v0 , v1 , math . sqrt ( 1.0 - n ) ] )",
    "text": "python calculate bounding sphere from points",
    "label": 1,
    "raw": "def arcball_map_to_sphere(point, center, radius):\n    \"\"\"Return unit sphere coordinates from window coordinates.\"\"\"\n    v0 = (point[0] - center[0]) / radius\n    v1 = (center[1] - point[1]) / radius\n    n = v0*v0 + v1*v1\n    if n > 1.0:\n        # position outside of sphere\n        n = math.sqrt(n)\n        return numpy.array([v0/n, v1/n, 0.0])\n    else:\n        return numpy.array([v0, v1, math.sqrt(1.0 - n)])"
  },
  {
    "id": "train-python-cosqa-train-6106",
    "code": "def _to_bstr ( l ) : if isinstance ( l , str ) : l = l . encode ( 'ascii' , 'backslashreplace' ) elif not isinstance ( l , bytes ) : l = str ( l ) . encode ( 'ascii' , 'backslashreplace' ) return l",
    "text": "python byte to string b",
    "label": 1,
    "raw": "def _to_bstr(l):\n    \"\"\"Convert to byte string.\"\"\"\n\n    if isinstance(l, str):\n        l = l.encode('ascii', 'backslashreplace')\n    elif not isinstance(l, bytes):\n        l = str(l).encode('ascii', 'backslashreplace')\n    return l"
  },
  {
    "id": "train-python-cosqa-train-6391",
    "code": "def add_blank_row ( self , label ) : col_labels = self . df . columns blank_item = pd . Series ( { } , index = col_labels , name = label ) # use .loc to add in place (append won't do that) self . df . loc [ blank_item . name ] = blank_item return self . df",
    "text": "python create blank column in df",
    "label": 1,
    "raw": "def add_blank_row(self, label):\n        \"\"\"\n        Add a blank row with only an index value to self.df.\n        This is done inplace.\n        \"\"\"\n        col_labels = self.df.columns\n        blank_item = pd.Series({}, index=col_labels, name=label)\n        # use .loc to add in place (append won't do that)\n        self.df.loc[blank_item.name] = blank_item\n        return self.df"
  },
  {
    "id": "train-python-cosqa-train-12931",
    "code": "def axes_off ( ax ) : ax . set_frame_on ( False ) ax . axes . get_yaxis ( ) . set_visible ( False ) ax . axes . get_xaxis ( ) . set_visible ( False )",
    "text": "python figure no axes",
    "label": 1,
    "raw": "def axes_off(ax):\n    \"\"\"Get rid of all axis ticks, lines, etc.\n    \"\"\"\n    ax.set_frame_on(False)\n    ax.axes.get_yaxis().set_visible(False)\n    ax.axes.get_xaxis().set_visible(False)"
  },
  {
    "id": "train-python-cosqa-train-16064",
    "code": "def _digits ( minval , maxval ) : if minval == maxval : return 3 else : return min ( 10 , max ( 2 , int ( 1 + abs ( np . log10 ( maxval - minval ) ) ) ) )",
    "text": "how to make python display maximum and minimum number",
    "label": 1,
    "raw": "def _digits(minval, maxval):\n    \"\"\"Digits needed to comforatbly display values in [minval, maxval]\"\"\"\n    if minval == maxval:\n        return 3\n    else:\n        return min(10, max(2, int(1 + abs(np.log10(maxval - minval)))))"
  },
  {
    "id": "train-python-cosqa-train-13324",
    "code": "def model_field_attr ( model , model_field , attr ) : fields = dict ( [ ( field . name , field ) for field in model . _meta . fields ] ) return getattr ( fields [ model_field ] , attr )",
    "text": "get multiple fields from model python",
    "label": 1,
    "raw": "def model_field_attr(model, model_field, attr):\n    \"\"\"\n    Returns the specified attribute for the specified field on the model class.\n    \"\"\"\n    fields = dict([(field.name, field) for field in model._meta.fields])\n    return getattr(fields[model_field], attr)"
  },
  {
    "id": "train-python-cosqa-train-19343",
    "code": "def shape ( self ) -> Tuple [ int , ... ] : return tuple ( bins . bin_count for bins in self . _binnings )",
    "text": "number of bins in python histogram",
    "label": 1,
    "raw": "def shape(self) -> Tuple[int, ...]:\n        \"\"\"Shape of histogram's data.\n\n        Returns\n        -------\n        One-element tuple with the number of bins along each axis.\n        \"\"\"\n        return tuple(bins.bin_count for bins in self._binnings)"
  },
  {
    "id": "train-python-cosqa-train-18102",
    "code": "def dtypes ( self ) : return [ ( str ( f . name ) , f . dataType . simpleString ( ) ) for f in self . schema . fields ]",
    "text": "get datatypesof columns python",
    "label": 1,
    "raw": "def dtypes(self):\n        \"\"\"Returns all column names and their data types as a list.\n\n        >>> df.dtypes\n        [('age', 'int'), ('name', 'string')]\n        \"\"\"\n        return [(str(f.name), f.dataType.simpleString()) for f in self.schema.fields]"
  },
  {
    "id": "train-python-cosqa-train-3521",
    "code": "def weighted_std ( values , weights ) : average = np . average ( values , weights = weights ) variance = np . average ( ( values - average ) ** 2 , weights = weights ) return np . sqrt ( variance )",
    "text": "python standard deviation not accept float number",
    "label": 1,
    "raw": "def weighted_std(values, weights):\n    \"\"\" Calculate standard deviation weighted by errors \"\"\"\n    average = np.average(values, weights=weights)\n    variance = np.average((values-average)**2, weights=weights)\n    return np.sqrt(variance)"
  },
  {
    "id": "train-python-cosqa-train-18704",
    "code": "def _parse_date ( string : str ) -> datetime . date : return datetime . datetime . strptime ( string , '%Y-%m-%d' ) . date ( )",
    "text": "python recognize date string as date",
    "label": 1,
    "raw": "def _parse_date(string: str) -> datetime.date:\n    \"\"\"Parse an ISO format date (YYYY-mm-dd).\n\n    >>> _parse_date('1990-01-02')\n    datetime.date(1990, 1, 2)\n    \"\"\"\n    return datetime.datetime.strptime(string, '%Y-%m-%d').date()"
  },
  {
    "id": "train-python-cosqa-train-9089",
    "code": "def size_on_disk ( self ) : return int ( self . connection . query ( \"\"\"\n            SELECT SUM(data_length + index_length)\n            FROM information_schema.tables WHERE table_schema='{db}'\n            \"\"\" . format ( db = self . database ) ) . fetchone ( ) [ 0 ] )",
    "text": "get length of table sqlite python",
    "label": 1,
    "raw": "def size_on_disk(self):\n        \"\"\"\n        :return: size of the entire schema in bytes\n        \"\"\"\n        return int(self.connection.query(\n            \"\"\"\n            SELECT SUM(data_length + index_length)\n            FROM information_schema.tables WHERE table_schema='{db}'\n            \"\"\".format(db=self.database)).fetchone()[0])"
  },
  {
    "id": "train-python-cosqa-train-11986",
    "code": "def get_least_distinct_words ( vocab , topic_word_distrib , doc_topic_distrib , doc_lengths , n = None ) : return _words_by_distinctiveness_score ( vocab , topic_word_distrib , doc_topic_distrib , doc_lengths , n , least_to_most = True )",
    "text": "identifying most frequent word in sentance using python",
    "label": 1,
    "raw": "def get_least_distinct_words(vocab, topic_word_distrib, doc_topic_distrib, doc_lengths, n=None):\n    \"\"\"\n    Order the words from `vocab` by \"distinctiveness score\" (Chuang et al. 2012) from least to most distinctive.\n    Optionally only return the `n` least distinctive words.\n\n    J. Chuang, C. Manning, J. Heer 2012: \"Termite: Visualization Techniques for Assessing Textual Topic Models\"\n    \"\"\"\n    return _words_by_distinctiveness_score(vocab, topic_word_distrib, doc_topic_distrib, doc_lengths, n,\n                                           least_to_most=True)"
  },
  {
    "id": "train-python-cosqa-train-11361",
    "code": "def _is_proper_sequence ( seq ) : return ( isinstance ( seq , collections . abc . Sequence ) and not isinstance ( seq , str ) )",
    "text": "how to check an input is a sequence or not in python",
    "label": 1,
    "raw": "def _is_proper_sequence(seq):\n    \"\"\"Returns is seq is sequence and not string.\"\"\"\n    return (isinstance(seq, collections.abc.Sequence) and\n            not isinstance(seq, str))"
  },
  {
    "id": "train-python-cosqa-train-9813",
    "code": "def print_error ( msg ) : if IS_POSIX : print ( u\"%s[ERRO] %s%s\" % ( ANSI_ERROR , msg , ANSI_END ) ) else : print ( u\"[ERRO] %s\" % ( msg ) )",
    "text": "how to show error msg in else python",
    "label": 1,
    "raw": "def print_error(msg):\n    \"\"\" Print an error message \"\"\"\n    if IS_POSIX:\n        print(u\"%s[ERRO] %s%s\" % (ANSI_ERROR, msg, ANSI_END))\n    else:\n        print(u\"[ERRO] %s\" % (msg))"
  },
  {
    "id": "train-python-cosqa-train-3939",
    "code": "def round_figures ( x , n ) : return round ( x , int ( n - math . ceil ( math . log10 ( abs ( x ) ) ) ) )",
    "text": "round to significant figures in python",
    "label": 1,
    "raw": "def round_figures(x, n):\n    \"\"\"Returns x rounded to n significant figures.\"\"\"\n    return round(x, int(n - math.ceil(math.log10(abs(x)))))"
  },
  {
    "id": "train-python-cosqa-train-7759",
    "code": "def to_snake_case ( name ) : s1 = FIRST_CAP_REGEX . sub ( r'\\1_\\2' , name ) return ALL_CAP_REGEX . sub ( r'\\1_\\2' , s1 ) . lower ( )",
    "text": "python string replace case insensitive",
    "label": 1,
    "raw": "def to_snake_case(name):\n    \"\"\" Given a name in camelCase return in snake_case \"\"\"\n    s1 = FIRST_CAP_REGEX.sub(r'\\1_\\2', name)\n    return ALL_CAP_REGEX.sub(r'\\1_\\2', s1).lower()"
  },
  {
    "id": "train-python-cosqa-train-13327",
    "code": "def Unlock ( fd , path ) : try : fcntl . flock ( fd , fcntl . LOCK_UN | fcntl . LOCK_NB ) except IOError as e : if e . errno == errno . EWOULDBLOCK : raise IOError ( 'Exception unlocking %s. Locked by another process.' % path ) else : raise IOError ( 'Exception unlocking %s. %s.' % ( path , str ( e ) ) )",
    "text": "python how to unlock a locked file",
    "label": 1,
    "raw": "def Unlock(fd, path):\n  \"\"\"Release the lock on the file.\n\n  Args:\n    fd: int, the file descriptor of the file to unlock.\n    path: string, the name of the file to lock.\n\n  Raises:\n    IOError, raised from flock while attempting to release a file lock.\n  \"\"\"\n  try:\n    fcntl.flock(fd, fcntl.LOCK_UN | fcntl.LOCK_NB)\n  except IOError as e:\n    if e.errno == errno.EWOULDBLOCK:\n      raise IOError('Exception unlocking %s. Locked by another process.' % path)\n    else:\n      raise IOError('Exception unlocking %s. %s.' % (path, str(e)))"
  },
  {
    "id": "train-python-cosqa-train-9160",
    "code": "def get_file_size ( filename ) : if os . path . isfile ( filename ) : return convert_size ( os . path . getsize ( filename ) ) return None",
    "text": "hot to get a file's size in python",
    "label": 1,
    "raw": "def get_file_size(filename):\n    \"\"\"\n    Get the file size of a given file\n\n    :param filename: string: pathname of a file\n    :return: human readable filesize\n    \"\"\"\n    if os.path.isfile(filename):\n        return convert_size(os.path.getsize(filename))\n    return None"
  },
  {
    "id": "train-python-cosqa-train-4940",
    "code": "def ratio_and_percentage ( current , total , time_remaining ) : return \"{} / {} ({}% completed)\" . format ( current , total , int ( current / total * 100 ) )",
    "text": "how do you create percentage in python",
    "label": 1,
    "raw": "def ratio_and_percentage(current, total, time_remaining):\n    \"\"\"Returns the progress ratio and percentage.\"\"\"\n    return \"{} / {} ({}% completed)\".format(current, total, int(current / total * 100))"
  },
  {
    "id": "train-python-cosqa-train-11632",
    "code": "def get_unique_indices ( df , axis = 1 ) : return dict ( zip ( df . columns . names , dif . columns . levels ) )",
    "text": "how to keep pivotable index in python df",
    "label": 1,
    "raw": "def get_unique_indices(df, axis=1):\n    \"\"\"\n\n    :param df:\n    :param axis:\n    :return:\n    \"\"\"\n    return dict(zip(df.columns.names, dif.columns.levels))"
  },
  {
    "id": "train-python-cosqa-train-11704",
    "code": "def _int64_feature ( value ) : if not isinstance ( value , list ) : value = [ value ] return tf . train . Feature ( int64_list = tf . train . Int64List ( value = value ) )",
    "text": "how to modify tensorflow lite c++ to python",
    "label": 1,
    "raw": "def _int64_feature(value):\n  \"\"\"Wrapper for inserting int64 features into Example proto.\"\"\"\n  if not isinstance(value, list):\n    value = [value]\n  return tf.train.Feature(int64_list=tf.train.Int64List(value=value))"
  },
  {
    "id": "train-python-cosqa-train-2609",
    "code": "def quote ( s , unsafe = '/' ) : res = s . replace ( '%' , '%25' ) for c in unsafe : res = res . replace ( c , '%' + ( hex ( ord ( c ) ) . upper ( ) ) [ 2 : ] ) return res",
    "text": "escape string for percent sign python",
    "label": 1,
    "raw": "def quote(s, unsafe='/'):\n    \"\"\"Pass in a dictionary that has unsafe characters as the keys, and the percent\n    encoded value as the value.\"\"\"\n    res = s.replace('%', '%25')\n    for c in unsafe:\n        res = res.replace(c, '%' + (hex(ord(c)).upper())[2:])\n    return res"
  },
  {
    "id": "train-python-cosqa-train-10301",
    "code": "def test_python_java_rt ( ) : sub_env = { 'PYTHONPATH' : _build_dir ( ) } log . info ( 'Executing Python unit tests (against Java runtime classes)...' ) return jpyutil . _execute_python_scripts ( python_java_rt_tests , env = sub_env )",
    "text": "run python file in java using runtime",
    "label": 1,
    "raw": "def test_python_java_rt():\n    \"\"\" Run Python test cases against Java runtime classes. \"\"\"\n    sub_env = {'PYTHONPATH': _build_dir()}\n\n    log.info('Executing Python unit tests (against Java runtime classes)...')\n    return jpyutil._execute_python_scripts(python_java_rt_tests,\n                                           env=sub_env)"
  },
  {
    "id": "train-python-cosqa-train-11899",
    "code": "def is_serializable ( obj ) : if inspect . isclass ( obj ) : return Serializable . is_serializable_type ( obj ) return isinstance ( obj , Serializable ) or hasattr ( obj , '_asdict' )",
    "text": "python serializers reference before define",
    "label": 1,
    "raw": "def is_serializable(obj):\n    \"\"\"Return `True` if the given object conforms to the Serializable protocol.\n\n    :rtype: bool\n    \"\"\"\n    if inspect.isclass(obj):\n      return Serializable.is_serializable_type(obj)\n    return isinstance(obj, Serializable) or hasattr(obj, '_asdict')"
  },
  {
    "id": "train-python-cosqa-train-13723",
    "code": "def _get_str_columns ( sf ) : return [ name for name in sf . column_names ( ) if sf [ name ] . dtype == str ]",
    "text": "how to get column names with data types in python",
    "label": 1,
    "raw": "def _get_str_columns(sf):\n    \"\"\"\n    Returns a list of names of columns that are string type.\n    \"\"\"\n    return [name for name in sf.column_names() if sf[name].dtype == str]"
  },
  {
    "id": "train-python-cosqa-train-6505",
    "code": "def lower_ext ( abspath ) : fname , ext = os . path . splitext ( abspath ) return fname + ext . lower ( )",
    "text": "change filenames to lowercase python",
    "label": 1,
    "raw": "def lower_ext(abspath):\n    \"\"\"Convert file extension to lowercase.\n    \"\"\"\n    fname, ext = os.path.splitext(abspath)\n    return fname + ext.lower()"
  },
  {
    "id": "train-python-cosqa-train-17731",
    "code": "def most_frequent ( lst ) : lst = lst [ : ] highest_freq = 0 most_freq = None for val in unique ( lst ) : if lst . count ( val ) > highest_freq : most_freq = val highest_freq = lst . count ( val ) return most_freq",
    "text": "return most frequent element in list python",
    "label": 1,
    "raw": "def most_frequent(lst):\n    \"\"\"\n    Returns the item that appears most frequently in the given list.\n    \"\"\"\n    lst = lst[:]\n    highest_freq = 0\n    most_freq = None\n\n    for val in unique(lst):\n        if lst.count(val) > highest_freq:\n            most_freq = val\n            highest_freq = lst.count(val)\n            \n    return most_freq"
  },
  {
    "id": "train-python-cosqa-train-12670",
    "code": "def is_password_valid ( password ) : pattern = re . compile ( r\"^.{4,75}$\" ) return bool ( pattern . match ( password ) )",
    "text": "python code to check if password is valid regex",
    "label": 1,
    "raw": "def is_password_valid(password):\n    \"\"\"\n    Check if a password is valid\n    \"\"\"\n    pattern = re.compile(r\"^.{4,75}$\")\n    return bool(pattern.match(password))"
  },
  {
    "id": "train-python-cosqa-train-10976",
    "code": "def get_closest_index ( myList , myNumber ) : closest_values_index = _np . where ( self . time == take_closest ( myList , myNumber ) ) [ 0 ] [ 0 ] return closest_values_index",
    "text": "python get nearest position in list",
    "label": 1,
    "raw": "def get_closest_index(myList, myNumber):\n    \"\"\"\n    Assumes myList is sorted. Returns closest value to myNumber.\n    If two numbers are equally close, return the smallest number.\n\n    Parameters\n    ----------\n    myList : array\n        The list in which to find the closest value to myNumber\n    myNumber : float\n        The number to find the closest to in MyList\n\n    Returns\n    -------\n    closest_values_index : int\n        The index in the array of the number closest to myNumber in myList\n    \"\"\"\n    closest_values_index = _np.where(self.time == take_closest(myList, myNumber))[0][0]\n    return closest_values_index"
  },
  {
    "id": "train-python-cosqa-train-6331",
    "code": "def coords_on_grid ( self , x , y ) : if isinstance ( x , float ) : x = int ( self . _round ( x ) ) if isinstance ( y , float ) : y = int ( self . _round ( y ) ) if not self . _y_coord_down : y = self . _extents - y return x , y",
    "text": "x , y coordinates with python grid",
    "label": 1,
    "raw": "def coords_on_grid(self, x, y):\n        \"\"\" Snap coordinates on the grid with integer coordinates \"\"\"\n\n        if isinstance(x, float):\n            x = int(self._round(x))\n        if isinstance(y, float):\n            y = int(self._round(y))\n        if not self._y_coord_down:\n            y = self._extents - y\n        return x, y"
  },
  {
    "id": "train-python-cosqa-train-17976",
    "code": "def indexes_equal ( a : Index , b : Index ) -> bool : return str ( a ) == str ( b )",
    "text": "testing if two strings are equal in python",
    "label": 1,
    "raw": "def indexes_equal(a: Index, b: Index) -> bool:\n    \"\"\"\n    Are two indexes equal? Checks by comparing ``str()`` versions of them.\n    (AM UNSURE IF THIS IS ENOUGH.)\n    \"\"\"\n    return str(a) == str(b)"
  },
  {
    "id": "train-python-cosqa-train-10348",
    "code": "def enable_proxy ( self , host , port ) : self . proxy = [ host , _number ( port ) ] self . proxy_enabled = True",
    "text": "set python default proxy",
    "label": 1,
    "raw": "def enable_proxy(self, host, port):\n        \"\"\"Enable a default web proxy\"\"\"\n\n        self.proxy = [host, _number(port)]\n        self.proxy_enabled = True"
  },
  {
    "id": "train-python-cosqa-train-1709",
    "code": "def get_code ( module ) : fp = open ( module . path ) try : return compile ( fp . read ( ) , str ( module . name ) , 'exec' ) finally : fp . close ( )",
    "text": "reading compiled code in python",
    "label": 1,
    "raw": "def get_code(module):\n    \"\"\"\n    Compile and return a Module's code object.\n    \"\"\"\n    fp = open(module.path)\n    try:\n        return compile(fp.read(), str(module.name), 'exec')\n    finally:\n        fp.close()"
  },
  {
    "id": "train-python-cosqa-dev-41",
    "code": "def flatten_list ( l : List [ list ] ) -> list : return [ v for inner_l in l for v in inner_l ]",
    "text": "how to flatten a list using python",
    "label": 1,
    "raw": "def flatten_list(l: List[list]) -> list:\n    \"\"\" takes a list of lists, l and returns a flat list\n    \"\"\"\n    return [v for inner_l in l for v in inner_l]"
  },
  {
    "id": "train-python-cosqa-train-13193",
    "code": "def ffmpeg_version ( ) : cmd = [ 'ffmpeg' , '-version' ] output = sp . check_output ( cmd ) aac_codecs = [ x for x in output . splitlines ( ) if \"ffmpeg version \" in str ( x ) ] [ 0 ] hay = aac_codecs . decode ( 'ascii' ) match = re . findall ( r'ffmpeg version (\\d+\\.)?(\\d+\\.)?(\\*|\\d+)' , hay ) if match : return \"\" . join ( match [ 0 ] ) else : return None",
    "text": "ffmpeg not working with python",
    "label": 1,
    "raw": "def ffmpeg_version():\n    \"\"\"Returns the available ffmpeg version\n\n    Returns\n    ----------\n    version : str\n        version number as string\n    \"\"\"\n\n    cmd = [\n        'ffmpeg',\n        '-version'\n    ]\n\n    output = sp.check_output(cmd)\n    aac_codecs = [\n        x for x in\n        output.splitlines() if \"ffmpeg version \" in str(x)\n    ][0]\n    hay = aac_codecs.decode('ascii')\n    match = re.findall(r'ffmpeg version (\\d+\\.)?(\\d+\\.)?(\\*|\\d+)', hay)\n    if match:\n        return \"\".join(match[0])\n    else:\n        return None"
  },
  {
    "id": "train-python-cosqa-train-13914",
    "code": "def parse ( filename ) : with open ( filename ) as f : parser = ASDLParser ( ) return parser . parse ( f . read ( ) )",
    "text": "how to parse a python file",
    "label": 1,
    "raw": "def parse(filename):\n    \"\"\"Parse ASDL from the given file and return a Module node describing it.\"\"\"\n    with open(filename) as f:\n        parser = ASDLParser()\n        return parser.parse(f.read())"
  },
  {
    "id": "train-python-cosqa-train-13882",
    "code": "def file_matches ( filename , patterns ) : return any ( fnmatch . fnmatch ( filename , pat ) for pat in patterns )",
    "text": "how to match patterns in filenames using re in python",
    "label": 1,
    "raw": "def file_matches(filename, patterns):\n    \"\"\"Does this filename match any of the patterns?\"\"\"\n    return any(fnmatch.fnmatch(filename, pat) for pat in patterns)"
  },
  {
    "id": "train-python-cosqa-train-5935",
    "code": "def print_matrix ( X , decimals = 1 ) : for row in np . round ( X , decimals = decimals ) : print ( row )",
    "text": "pretty print matrix python",
    "label": 1,
    "raw": "def print_matrix(X, decimals=1):\n    \"\"\"Pretty printing for numpy matrix X\"\"\"\n    for row in np.round(X, decimals=decimals):\n        print(row)"
  },
  {
    "id": "train-python-cosqa-train-8636",
    "code": "def str2bytes ( x ) : if type ( x ) is bytes : return x elif type ( x ) is str : return bytes ( [ ord ( i ) for i in x ] ) else : return str2bytes ( str ( x ) )",
    "text": "cast to bytes python",
    "label": 1,
    "raw": "def str2bytes(x):\n  \"\"\"Convert input argument to bytes\"\"\"\n  if type(x) is bytes:\n    return x\n  elif type(x) is str:\n    return bytes([ ord(i) for i in x ])\n  else:\n    return str2bytes(str(x))"
  },
  {
    "id": "train-python-cosqa-train-14722",
    "code": "def close_database_session ( session ) : try : session . close ( ) except OperationalError as e : raise DatabaseError ( error = e . orig . args [ 1 ] , code = e . orig . args [ 0 ] )",
    "text": "python close database connection",
    "label": 1,
    "raw": "def close_database_session(session):\n    \"\"\"Close connection with the database\"\"\"\n\n    try:\n        session.close()\n    except OperationalError as e:\n        raise DatabaseError(error=e.orig.args[1], code=e.orig.args[0])"
  },
  {
    "id": "train-python-cosqa-train-8710",
    "code": "def __is__ ( cls , s ) : return s . startswith ( cls . delims ( ) [ 0 ] ) and s . endswith ( cls . delims ( ) [ 1 ] )",
    "text": "check if stringstarts with python",
    "label": 1,
    "raw": "def __is__(cls, s):\n        \"\"\"Test if string matches this argument's format.\"\"\"\n        return s.startswith(cls.delims()[0]) and s.endswith(cls.delims()[1])"
  },
  {
    "id": "train-python-cosqa-train-2078",
    "code": "def is_builtin_type ( tp ) : return hasattr ( __builtins__ , tp . __name__ ) and tp is getattr ( __builtins__ , tp . __name__ )",
    "text": "vs code python type hinting",
    "label": 1,
    "raw": "def is_builtin_type(tp):\n    \"\"\"Checks if the given type is a builtin one.\n    \"\"\"\n    return hasattr(__builtins__, tp.__name__) and tp is getattr(__builtins__, tp.__name__)"
  },
  {
    "id": "train-python-cosqa-train-19967",
    "code": "def get_margin ( length ) : if length > 23 : margin_left = \"\\t\" chars = 1 elif length > 15 : margin_left = \"\\t\\t\" chars = 2 elif length > 7 : margin_left = \"\\t\\t\\t\" chars = 3 else : margin_left = \"\\t\\t\\t\\t\" chars = 4 return margin_left",
    "text": "how to make column right margin in python",
    "label": 1,
    "raw": "def get_margin(length):\n    \"\"\"Add enough tabs to align in two columns\"\"\"\n    if length > 23:\n        margin_left = \"\\t\"\n        chars = 1\n    elif length > 15:\n        margin_left = \"\\t\\t\"\n        chars = 2\n    elif length > 7:\n        margin_left = \"\\t\\t\\t\"\n        chars = 3\n    else:\n        margin_left = \"\\t\\t\\t\\t\"\n        chars = 4\n    return margin_left"
  },
  {
    "id": "train-python-cosqa-train-12690",
    "code": "def is_instance_or_subclass ( val , class_ ) : try : return issubclass ( val , class_ ) except TypeError : return isinstance ( val , class_ )",
    "text": "python compare is instance",
    "label": 1,
    "raw": "def is_instance_or_subclass(val, class_):\n    \"\"\"Return True if ``val`` is either a subclass or instance of ``class_``.\"\"\"\n    try:\n        return issubclass(val, class_)\n    except TypeError:\n        return isinstance(val, class_)"
  },
  {
    "id": "train-python-cosqa-train-12202",
    "code": "def parallel ( processes , threads ) : pool = multithread ( threads ) pool . map ( run_process , processes ) pool . close ( ) pool . join ( )",
    "text": "multiprocessing python multiple cores",
    "label": 1,
    "raw": "def parallel(processes, threads):\n    \"\"\"\n    execute jobs in processes using N threads\n    \"\"\"\n    pool = multithread(threads)\n    pool.map(run_process, processes)\n    pool.close()\n    pool.join()"
  },
  {
    "id": "train-python-cosqa-train-12128",
    "code": "def map ( cls , iterable , func , * a , * * kw ) : return cls ( func ( x , * a , * * kw ) for x in iterable )",
    "text": "make map function for looping through python",
    "label": 1,
    "raw": "def map(cls, iterable, func, *a, **kw):\n    \"\"\"\n    Iterable-first replacement of Python's built-in `map()` function.\n    \"\"\"\n\n    return cls(func(x, *a, **kw) for x in iterable)"
  },
  {
    "id": "train-python-cosqa-train-12650",
    "code": "def _clear ( self ) : self . _finished = False self . _measurement = None self . _message = None self . _message_body = None",
    "text": "python clearing all variables",
    "label": 1,
    "raw": "def _clear(self):\n        \"\"\"Resets all assigned data for the current message.\"\"\"\n        self._finished = False\n        self._measurement = None\n        self._message = None\n        self._message_body = None"
  },
  {
    "id": "train-python-cosqa-train-8639",
    "code": "def update ( self , other_dict ) : for key , value in iter_multi_items ( other_dict ) : MultiDict . add ( self , key , value )",
    "text": "python dict update multiple items",
    "label": 1,
    "raw": "def update(self, other_dict):\n        \"\"\"update() extends rather than replaces existing key lists.\"\"\"\n        for key, value in iter_multi_items(other_dict):\n            MultiDict.add(self, key, value)"
  },
  {
    "id": "train-python-cosqa-train-12623",
    "code": "def date_to_timestamp ( date ) : date_tuple = date . timetuple ( ) timestamp = calendar . timegm ( date_tuple ) * 1000 return timestamp",
    "text": "unix timestamp milliseconds into date python",
    "label": 1,
    "raw": "def date_to_timestamp(date):\n    \"\"\"\n        date to unix timestamp in milliseconds\n    \"\"\"\n    date_tuple = date.timetuple()\n    timestamp = calendar.timegm(date_tuple) * 1000\n    return timestamp"
  },
  {
    "id": "train-python-cosqa-train-6804",
    "code": "def get_nt_system_uid ( ) : try : import _winreg as winreg except ImportError : import winreg lm = winreg . ConnectRegistry ( None , winreg . HKEY_LOCAL_MACHINE ) try : key = winreg . OpenKey ( lm , r\"Software\\Microsoft\\Cryptography\" ) try : return winreg . QueryValueEx ( key , \"MachineGuid\" ) [ 0 ] finally : key . Close ( ) finally : lm . Close ( )",
    "text": "python get windows user id",
    "label": 1,
    "raw": "def get_nt_system_uid():\n    \"\"\"Get the MachineGuid from\n    HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Cryptography\\MachineGuid\n    \"\"\"\n    try:\n        import _winreg as winreg\n    except ImportError:\n        import winreg\n    lm = winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE)\n    try:\n        key = winreg.OpenKey(lm, r\"Software\\Microsoft\\Cryptography\")\n        try:\n            return winreg.QueryValueEx(key, \"MachineGuid\")[0]\n        finally:\n            key.Close()\n    finally:\n        lm.Close()"
  },
  {
    "id": "train-python-cosqa-train-10776",
    "code": "def _expand ( self , str , local_vars = { } ) : return ninja_syntax . expand ( str , self . vars , local_vars )",
    "text": "python expand variable in string",
    "label": 1,
    "raw": "def _expand(self, str, local_vars={}):\n        \"\"\"Expand $vars in a string.\"\"\"\n        return ninja_syntax.expand(str, self.vars, local_vars)"
  },
  {
    "id": "train-python-cosqa-train-12871",
    "code": "def C_dict2array ( C ) : return np . hstack ( [ np . asarray ( C [ k ] ) . ravel ( ) for k in C_keys ] )",
    "text": "casat a list of dictionaries to a numpy array python",
    "label": 1,
    "raw": "def C_dict2array(C):\n    \"\"\"Convert an OrderedDict containing C values to a 1D array.\"\"\"\n    return np.hstack([np.asarray(C[k]).ravel() for k in C_keys])"
  },
  {
    "id": "train-python-cosqa-train-13814",
    "code": "def replace ( self , text ) : for ( pattern , repl ) in self . patterns : text = re . subn ( pattern , repl , text ) [ 0 ] return text",
    "text": "python re sub multiple replacements",
    "label": 1,
    "raw": "def replace(self, text):\n        \"\"\"Do j/v replacement\"\"\"\n        for (pattern, repl) in self.patterns:\n            text = re.subn(pattern, repl, text)[0]\n        return text"
  },
  {
    "id": "train-python-cosqa-train-10692",
    "code": "def inFocus ( self ) : previous_flags = self . window . flags ( ) self . window . setFlags ( previous_flags | QtCore . Qt . WindowStaysOnTopHint )",
    "text": "bring window to focus python",
    "label": 1,
    "raw": "def inFocus(self):\n        \"\"\"Set GUI on-top flag\"\"\"\n        previous_flags = self.window.flags()\n        self.window.setFlags(previous_flags |\n                             QtCore.Qt.WindowStaysOnTopHint)"
  },
  {
    "id": "train-python-cosqa-train-15015",
    "code": "def _iterable_to_varargs_method ( func ) : def wrapped ( self , * args , * * kwargs ) : return func ( self , args , * * kwargs ) return wrapped",
    "text": "python def wrapper(*args, **kwargs)",
    "label": 1,
    "raw": "def _iterable_to_varargs_method(func):\n    \"\"\"decorator to convert a method taking a iterable to a *args one\"\"\"\n    def wrapped(self, *args, **kwargs):\n        return func(self, args, **kwargs)\n    return wrapped"
  },
  {
    "id": "train-python-cosqa-train-7330",
    "code": "def axes_off ( ax ) : ax . set_frame_on ( False ) ax . axes . get_yaxis ( ) . set_visible ( False ) ax . axes . get_xaxis ( ) . set_visible ( False )",
    "text": "python plot axis remove",
    "label": 1,
    "raw": "def axes_off(ax):\n    \"\"\"Get rid of all axis ticks, lines, etc.\n    \"\"\"\n    ax.set_frame_on(False)\n    ax.axes.get_yaxis().set_visible(False)\n    ax.axes.get_xaxis().set_visible(False)"
  },
  {
    "id": "train-python-cosqa-train-3102",
    "code": "def tree ( string , token = [ WORD , POS , CHUNK , PNP , REL , ANCHOR , LEMMA ] ) : return Text ( string , token )",
    "text": "python parse string by token",
    "label": 1,
    "raw": "def tree(string, token=[WORD, POS, CHUNK, PNP, REL, ANCHOR, LEMMA]):\n    \"\"\" Transforms the output of parse() into a Text object.\n        The token parameter lists the order of tags in each token in the input string.\n    \"\"\"\n    return Text(string, token)"
  },
  {
    "id": "train-python-cosqa-train-14630",
    "code": "def static_method ( cls , f ) : setattr ( cls , f . __name__ , staticmethod ( f ) ) return f",
    "text": "static method in python exmaple",
    "label": 1,
    "raw": "def static_method(cls, f):\n        \"\"\"Decorator which dynamically binds static methods to the model for later use.\"\"\"\n        setattr(cls, f.__name__, staticmethod(f))\n        return f"
  },
  {
    "id": "train-python-cosqa-train-13218",
    "code": "def _bind_parameter ( self , parameter , value ) : for ( instr , param_index ) in self . _parameter_table [ parameter ] : instr . params [ param_index ] = value",
    "text": "python how to bind paramters to function",
    "label": 1,
    "raw": "def _bind_parameter(self, parameter, value):\n        \"\"\"Assigns a parameter value to matching instructions in-place.\"\"\"\n        for (instr, param_index) in self._parameter_table[parameter]:\n            instr.params[param_index] = value"
  },
  {
    "id": "train-python-cosqa-train-13017",
    "code": "def _is_leap_year ( year ) : isleap = ( ( np . mod ( year , 4 ) == 0 ) & ( ( np . mod ( year , 100 ) != 0 ) | ( np . mod ( year , 400 ) == 0 ) ) ) return isleap",
    "text": "python function to determine whether a leap year or not",
    "label": 1,
    "raw": "def _is_leap_year(year):\n    \"\"\"Determine if a year is leap year.\n\n    Parameters\n    ----------\n    year : numeric\n\n    Returns\n    -------\n    isleap : array of bools\n    \"\"\"\n    isleap = ((np.mod(year, 4) == 0) &\n              ((np.mod(year, 100) != 0) | (np.mod(year, 400) == 0)))\n    return isleap"
  },
  {
    "id": "train-python-cosqa-train-7861",
    "code": "def is_numeric ( value ) : return type ( value ) in [ int , float , np . int8 , np . int16 , np . int32 , np . int64 , np . float16 , np . float32 , np . float64 , np . float128 ]",
    "text": "judge if the python value type is numeric",
    "label": 1,
    "raw": "def is_numeric(value):\n        \"\"\"Test if a value is numeric.\n        \"\"\"\n        return type(value) in [\n            int,\n            float,\n            \n            np.int8,\n            np.int16,\n            np.int32,\n            np.int64,\n\n            np.float16,\n            np.float32,\n            np.float64,\n            np.float128\n        ]"
  },
  {
    "id": "train-python-cosqa-train-13377",
    "code": "def _get_ipv4_from_binary ( self , bin_addr ) : return socket . inet_ntop ( socket . AF_INET , struct . pack ( \"!L\" , bin_addr ) )",
    "text": "python int to ip",
    "label": 1,
    "raw": "def _get_ipv4_from_binary(self, bin_addr):\n        \"\"\"Converts binary address to Ipv4 format.\"\"\"\n\n        return socket.inet_ntop(socket.AF_INET, struct.pack(\"!L\", bin_addr))"
  },
  {
    "id": "train-python-cosqa-train-18362",
    "code": "def last ( self ) : if self . _last is UNDETERMINED : # not necessarily the last one... self . _last = self . sdat . tseries . index [ - 1 ] return self [ self . _last ]",
    "text": "last item of series in python",
    "label": 1,
    "raw": "def last(self):\n        \"\"\"Last time step available.\n\n        Example:\n            >>> sdat = StagyyData('path/to/run')\n            >>> assert(sdat.steps.last is sdat.steps[-1])\n        \"\"\"\n        if self._last is UNDETERMINED:\n            # not necessarily the last one...\n            self._last = self.sdat.tseries.index[-1]\n        return self[self._last]"
  },
  {
    "id": "train-python-cosqa-train-11622",
    "code": "def peekiter ( iterable ) : it = iter ( iterable ) one = next ( it ) def gen ( ) : \"\"\"Generator that returns first and proxy other items from source\"\"\" yield one while True : yield next ( it ) return ( one , gen ( ) )",
    "text": "how to iterate on multiple iterator in python",
    "label": 1,
    "raw": "def peekiter(iterable):\n    \"\"\"Return first row and also iterable with same items as original\"\"\"\n    it = iter(iterable)\n    one = next(it)\n\n    def gen():\n        \"\"\"Generator that returns first and proxy other items from source\"\"\"\n        yield one\n        while True:\n            yield next(it)\n    return (one, gen())"
  },
  {
    "id": "train-python-cosqa-train-12787",
    "code": "async def acquire_async ( self ) : r = self . acquire ( blocking = False ) while not r : await asyncio . sleep ( .01 ) r = self . acquire ( blocking = False )",
    "text": "asyncio python lock queue",
    "label": 1,
    "raw": "async def acquire_async(self):\n        \"\"\"Acquire the :attr:`lock` asynchronously\n\n        \"\"\"\n        r = self.acquire(blocking=False)\n        while not r:\n            await asyncio.sleep(.01)\n            r = self.acquire(blocking=False)"
  },
  {
    "id": "train-python-cosqa-train-15994",
    "code": "def now_time ( str = False ) : if str : return datetime . datetime . now ( ) . strftime ( \"%Y-%m-%d %H:%M:%S\" ) return datetime . datetime . now ( )",
    "text": "how to grab current time in python 3",
    "label": 1,
    "raw": "def now_time(str=False):\n    \"\"\"Get the current time.\"\"\"\n    if str:\n        return datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    return datetime.datetime.now()"
  },
  {
    "id": "train-python-cosqa-train-8289",
    "code": "def pad_image ( arr , max_size = 400 ) : dim = np . max ( arr . shape ) img = np . zeros ( ( dim , dim , 3 ) , dtype = arr . dtype ) xl = ( dim - arr . shape [ 0 ] ) // 2 yl = ( dim - arr . shape [ 1 ] ) // 2 img [ xl : arr . shape [ 0 ] + xl , yl : arr . shape [ 1 ] + yl , : ] = arr return resample_image ( img , max_size = max_size )",
    "text": "python chang size of image resampling resolution",
    "label": 1,
    "raw": "def pad_image(arr, max_size=400):\n    \"\"\"Pads an image to a square then resamples to max_size\"\"\"\n    dim = np.max(arr.shape)\n    img = np.zeros((dim, dim, 3), dtype=arr.dtype)\n    xl = (dim - arr.shape[0]) // 2\n    yl = (dim - arr.shape[1]) // 2\n    img[xl:arr.shape[0]+xl, yl:arr.shape[1]+yl, :] = arr\n    return resample_image(img, max_size=max_size)"
  },
  {
    "id": "train-python-cosqa-train-11205",
    "code": "def file_length ( file_obj ) : file_obj . seek ( 0 , 2 ) length = file_obj . tell ( ) file_obj . seek ( 0 ) return length",
    "text": "get the length of a file in python",
    "label": 1,
    "raw": "def file_length(file_obj):\n    \"\"\"\n    Returns the length in bytes of a given file object.\n    Necessary because os.fstat only works on real files and not file-like\n    objects. This works on more types of streams, primarily StringIO.\n    \"\"\"\n    file_obj.seek(0, 2)\n    length = file_obj.tell()\n    file_obj.seek(0)\n    return length"
  },
  {
    "id": "train-python-cosqa-train-6622",
    "code": "def column_stack_2d ( data ) : return list ( list ( itt . chain . from_iterable ( _ ) ) for _ in zip ( * data ) )",
    "text": "column stack every item in a list of lists python",
    "label": 1,
    "raw": "def column_stack_2d(data):\n    \"\"\"Perform column-stacking on a list of 2d data blocks.\"\"\"\n    return list(list(itt.chain.from_iterable(_)) for _ in zip(*data))"
  },
  {
    "id": "train-python-cosqa-train-17931",
    "code": "def templategetter ( tmpl ) : tmpl = tmpl . replace ( '{' , '%(' ) tmpl = tmpl . replace ( '}' , ')s' ) return lambda data : tmpl % data",
    "text": "use template string in python to replcae later",
    "label": 1,
    "raw": "def templategetter(tmpl):\n    \"\"\"\n    This is a dirty little template function generator that turns single-brace\n    Mustache-style template strings into functions that interpolate dict keys:\n\n    >>> get_name = templategetter(\"{first} {last}\")\n    >>> get_name({'first': 'Shawn', 'last': 'Allen'})\n    'Shawn Allen'\n    \"\"\"\n    tmpl = tmpl.replace('{', '%(')\n    tmpl = tmpl.replace('}', ')s')\n    return lambda data: tmpl % data"
  },
  {
    "id": "train-python-cosqa-train-10417",
    "code": "def attr_cache_clear ( self ) : node = extract_node ( \"\"\"def cache_clear(self): pass\"\"\" ) return BoundMethod ( proxy = node , bound = self . _instance . parent . scope ( ) )",
    "text": "python bound method reference circular",
    "label": 1,
    "raw": "def attr_cache_clear(self):\n        node = extract_node(\"\"\"def cache_clear(self): pass\"\"\")\n        return BoundMethod(proxy=node, bound=self._instance.parent.scope())"
  },
  {
    "id": "train-python-cosqa-train-10312",
    "code": "def add_matplotlib_cmap ( cm , name = None ) : global cmaps cmap = matplotlib_to_ginga_cmap ( cm , name = name ) cmaps [ cmap . name ] = cmap",
    "text": "python add a colormap width",
    "label": 1,
    "raw": "def add_matplotlib_cmap(cm, name=None):\n    \"\"\"Add a matplotlib colormap.\"\"\"\n    global cmaps\n    cmap = matplotlib_to_ginga_cmap(cm, name=name)\n    cmaps[cmap.name] = cmap"
  },
  {
    "id": "train-python-cosqa-train-5031",
    "code": "def unpickle_stats ( stats ) : stats = cPickle . loads ( stats ) stats . stream = True return stats",
    "text": "python make an object picklable",
    "label": 1,
    "raw": "def unpickle_stats(stats):\n    \"\"\"Unpickle a pstats.Stats object\"\"\"\n    stats = cPickle.loads(stats)\n    stats.stream = True\n    return stats"
  },
  {
    "id": "train-python-cosqa-train-9425",
    "code": "def _get_pattern ( self , pys_style ) : # Return None if there is no bgcolor if \"bgcolor\" not in pys_style : return pattern = xlwt . Pattern ( ) pattern . pattern = xlwt . Pattern . SOLID_PATTERN bgcolor = wx . Colour ( ) bgcolor . SetRGB ( pys_style [ \"bgcolor\" ] ) pattern . pattern_fore_colour = self . color2idx ( * bgcolor . Get ( ) ) return pattern",
    "text": "python openpyxl patternfill bgcolor",
    "label": 1,
    "raw": "def _get_pattern(self, pys_style):\n        \"\"\"Returns xlwt.pattern for pyspread style\"\"\"\n\n        # Return None if there is no bgcolor\n        if \"bgcolor\" not in pys_style:\n            return\n\n        pattern = xlwt.Pattern()\n        pattern.pattern = xlwt.Pattern.SOLID_PATTERN\n\n        bgcolor = wx.Colour()\n        bgcolor.SetRGB(pys_style[\"bgcolor\"])\n        pattern.pattern_fore_colour = self.color2idx(*bgcolor.Get())\n\n        return pattern"
  },
  {
    "id": "train-python-cosqa-train-10275",
    "code": "def reduce_fn ( x ) : values = x . values if pd and isinstance ( x , pd . Series ) else x for v in values : if not is_nan ( v ) : return v return np . NaN",
    "text": "return nan values of a column in data frame python",
    "label": 1,
    "raw": "def reduce_fn(x):\n    \"\"\"\n    Aggregation function to get the first non-zero value.\n    \"\"\"\n    values = x.values if pd and isinstance(x, pd.Series) else x\n    for v in values:\n        if not is_nan(v):\n            return v\n    return np.NaN"
  },
  {
    "id": "train-python-cosqa-train-12568",
    "code": "def pop ( self ) : if not self . empty ( ) : val = self . stack [ - 1 ] del self . stack [ - 1 ] return val",
    "text": "the self python stack",
    "label": 1,
    "raw": "def pop(self):\n        \"\"\"\n        return the last stack element and delete it from the list\n        \"\"\"\n        if not self.empty():\n            val = self.stack[-1]\n            del self.stack[-1]\n            return val"
  },
  {
    "id": "train-python-cosqa-train-5791",
    "code": "def safe_unicode ( string ) : if not PY3 : uni = string . replace ( u'\\u2019' , \"'\" ) return uni . encode ( 'utf-8' ) return string",
    "text": "make string utf8 python",
    "label": 1,
    "raw": "def safe_unicode(string):\n    \"\"\"If Python 2, replace non-ascii characters and return encoded string.\"\"\"\n    if not PY3:\n        uni = string.replace(u'\\u2019', \"'\")\n        return uni.encode('utf-8')\n        \n    return string"
  },
  {
    "id": "train-python-cosqa-train-10210",
    "code": "def strip_accents ( text ) : normalized_str = unicodedata . normalize ( 'NFD' , text ) return '' . join ( [ c for c in normalized_str if unicodedata . category ( c ) != 'Mn' ] )",
    "text": "remove characters from string except for python",
    "label": 1,
    "raw": "def strip_accents(text):\n    \"\"\"\n    Strip agents from a string.\n    \"\"\"\n\n    normalized_str = unicodedata.normalize('NFD', text)\n\n    return ''.join([\n        c for c in normalized_str if unicodedata.category(c) != 'Mn'])"
  },
  {
    "id": "train-python-cosqa-train-12725",
    "code": "def min_values ( args ) : return Interval ( min ( x . low for x in args ) , min ( x . high for x in args ) )",
    "text": "'int' object is not callable range funtion python",
    "label": 1,
    "raw": "def min_values(args):\n    \"\"\" Return possible range for min function. \"\"\"\n    return Interval(min(x.low for x in args), min(x.high for x in args))"
  },
  {
    "id": "train-python-cosqa-train-14643",
    "code": "def is_date ( thing ) : # known date types date_types = ( datetime . datetime , datetime . date , DateTime ) return isinstance ( thing , date_types )",
    "text": "python check for datetime object",
    "label": 1,
    "raw": "def is_date(thing):\n    \"\"\"Checks if the given thing represents a date\n\n    :param thing: The object to check if it is a date\n    :type thing: arbitrary object\n    :returns: True if we have a date object\n    :rtype: bool\n    \"\"\"\n    # known date types\n    date_types = (datetime.datetime,\n                  datetime.date,\n                  DateTime)\n    return isinstance(thing, date_types)"
  },
  {
    "id": "train-python-cosqa-train-244",
    "code": "def update_index ( index ) : logger . info ( \"Updating search index: '%s'\" , index ) client = get_client ( ) responses = [ ] for model in get_index_models ( index ) : logger . info ( \"Updating search index model: '%s'\" , model . search_doc_type ) objects = model . objects . get_search_queryset ( index ) . iterator ( ) actions = bulk_actions ( objects , index = index , action = \"index\" ) response = helpers . bulk ( client , actions , chunk_size = get_setting ( \"chunk_size\" ) ) responses . append ( response ) return responses",
    "text": "python elasticsearch bulk index",
    "label": 1,
    "raw": "def update_index(index):\n    \"\"\"Re-index every document in a named index.\"\"\"\n    logger.info(\"Updating search index: '%s'\", index)\n    client = get_client()\n    responses = []\n    for model in get_index_models(index):\n        logger.info(\"Updating search index model: '%s'\", model.search_doc_type)\n        objects = model.objects.get_search_queryset(index).iterator()\n        actions = bulk_actions(objects, index=index, action=\"index\")\n        response = helpers.bulk(client, actions, chunk_size=get_setting(\"chunk_size\"))\n        responses.append(response)\n    return responses"
  },
  {
    "id": "train-python-cosqa-train-5787",
    "code": "def pretty_dict_string ( d , indent = 0 ) : s = '' for key , value in sorted ( d . items ( ) ) : s += '    ' * indent + str ( key ) if isinstance ( value , dict ) : s += '\\n' + pretty_dict_string ( value , indent + 1 ) else : s += '=' + str ( value ) + '\\n' return s",
    "text": "make nested dict a str python",
    "label": 1,
    "raw": "def pretty_dict_string(d, indent=0):\n    \"\"\"Pretty output of nested dictionaries.\n    \"\"\"\n    s = ''\n    for key, value in sorted(d.items()):\n        s += '    ' * indent + str(key)\n        if isinstance(value, dict):\n             s += '\\n' + pretty_dict_string(value, indent+1)\n        else:\n             s += '=' + str(value) + '\\n'\n    return s"
  },
  {
    "id": "train-python-cosqa-train-14731",
    "code": "def isTestCaseDisabled ( test_case_class , method_name ) : test_method = getattr ( test_case_class , method_name ) return getattr ( test_method , \"__test__\" , 'not nose' ) is False",
    "text": "unit test to disable python",
    "label": 1,
    "raw": "def isTestCaseDisabled(test_case_class, method_name):\n    \"\"\"\n    I check to see if a method on a TestCase has been disabled via nose's\n    convention for disabling a TestCase.  This makes it so that users can\n    mix nose's parameterized tests with green as a runner.\n    \"\"\"\n    test_method = getattr(test_case_class, method_name)\n    return getattr(test_method, \"__test__\", 'not nose') is False"
  },
  {
    "id": "train-python-cosqa-train-14552",
    "code": "def is_nullable_list ( val , vtype ) : return ( isinstance ( val , list ) and any ( isinstance ( v , vtype ) for v in val ) and all ( ( isinstance ( v , vtype ) or v is None ) for v in val ) )",
    "text": "see if a list is null in python",
    "label": 1,
    "raw": "def is_nullable_list(val, vtype):\n    \"\"\"Return True if list contains either values of type `vtype` or None.\"\"\"\n    return (isinstance(val, list) and\n            any(isinstance(v, vtype) for v in val) and\n            all((isinstance(v, vtype) or v is None) for v in val))"
  },
  {
    "id": "train-python-cosqa-train-19708",
    "code": "def _check_whitespace ( string ) : if string . count ( ' ' ) + string . count ( '\\t' ) + string . count ( '\\n' ) > 0 : raise ValueError ( INSTRUCTION_HAS_WHITESPACE )",
    "text": "python check for trailing whitespace",
    "label": 1,
    "raw": "def _check_whitespace(string):\n    \"\"\"\n    Make sure thre is no whitespace in the given string. Will raise a\n    ValueError if whitespace is detected\n    \"\"\"\n    if string.count(' ') + string.count('\\t') + string.count('\\n') > 0:\n        raise ValueError(INSTRUCTION_HAS_WHITESPACE)"
  },
  {
    "id": "train-python-cosqa-train-11838",
    "code": "def end_index ( self ) : return ( ( self . number - 1 ) * self . paginator . per_page + len ( self . object_list ) )",
    "text": "python return last item of queryset",
    "label": 1,
    "raw": "def end_index(self):\n        \"\"\"\n        Returns the 1-based index of the last object on this page,\n        relative to total objects found (hits).\n        \"\"\"\n        return ((self.number - 1) * self.paginator.per_page +\n            len(self.object_list))"
  },
  {
    "id": "train-python-cosqa-train-9459",
    "code": "def percentile ( values , k ) : if not values : return None values . sort ( ) index = ( len ( values ) * ( float ( k ) / 100 ) ) - 1 return values [ int ( math . ceil ( index ) ) ]",
    "text": "python percentile of a list of values",
    "label": 1,
    "raw": "def percentile(values, k):\n    \"\"\"Find the percentile of a list of values.\n\n    :param list values: The list of values to find the percentile of\n    :param int k: The percentile to find\n    :rtype: float or int\n\n    \"\"\"\n    if not values:\n        return None\n    values.sort()\n    index = (len(values) * (float(k) / 100)) - 1\n    return values[int(math.ceil(index))]"
  },
  {
    "id": "train-python-cosqa-train-13451",
    "code": "def variance ( arr ) : avg = average ( arr ) return sum ( [ ( float ( x ) - avg ) ** 2 for x in arr ] ) / float ( len ( arr ) - 1 )",
    "text": "how to add each value in array to average python",
    "label": 1,
    "raw": "def variance(arr):\n  \"\"\"variance of the values, must have 2 or more entries.\n\n  :param arr: list of numbers\n  :type arr: number[] a number array\n  :return: variance\n  :rtype: float\n\n  \"\"\"\n  avg = average(arr)\n  return sum([(float(x)-avg)**2 for x in arr])/float(len(arr)-1)"
  },
  {
    "id": "train-python-cosqa-train-11659",
    "code": "def arg_default ( * args , * * kwargs ) : parser = argparse . ArgumentParser ( ) parser . add_argument ( * args , * * kwargs ) args = vars ( parser . parse_args ( [ ] ) ) _ , default = args . popitem ( ) return default",
    "text": "how to make a default arguement in function python",
    "label": 1,
    "raw": "def arg_default(*args, **kwargs):\n    \"\"\"Return default argument value as given by argparse's add_argument().\n\n    The argument is passed through a mocked-up argument parser. This way, we\n    get default parameters even if the feature is called directly and not\n    through the CLI.\n    \"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument(*args, **kwargs)\n    args = vars(parser.parse_args([]))\n    _, default = args.popitem()\n    return default"
  },
  {
    "id": "train-python-cosqa-train-9128",
    "code": "def crop_box ( im , box = False , * * kwargs ) : if box : im = im . crop ( box ) return im",
    "text": "python image crop non rectangular",
    "label": 1,
    "raw": "def crop_box(im, box=False, **kwargs):\n    \"\"\"Uses box coordinates to crop an image without resizing it first.\"\"\"\n    if box:\n        im = im.crop(box)\n    return im"
  },
  {
    "id": "train-python-cosqa-train-17604",
    "code": "def __replace_all ( repls : dict , input : str ) -> str : return re . sub ( '|' . join ( re . escape ( key ) for key in repls . keys ( ) ) , lambda k : repls [ k . group ( 0 ) ] , input )",
    "text": "python how to replace multiple characters of a string",
    "label": 1,
    "raw": "def __replace_all(repls: dict, input: str) -> str:\n    \"\"\" Replaces from a string **input** all the occurrences of some\n    symbols according to mapping **repls**.\n\n    :param dict repls: where #key is the old character and\n    #value is the one to substitute with;\n    :param str input: original string where to apply the\n    replacements;\n    :return: *(str)* the string with the desired characters replaced\n    \"\"\"\n    return re.sub('|'.join(re.escape(key) for key in repls.keys()),\n                  lambda k: repls[k.group(0)], input)"
  },
  {
    "id": "train-python-cosqa-dev-178",
    "code": "def round_sig ( x , sig ) : return round ( x , sig - int ( floor ( log10 ( abs ( x ) ) ) ) - 1 )",
    "text": "python round to three significant digits",
    "label": 1,
    "raw": "def round_sig(x, sig):\n    \"\"\"Round the number to the specified number of significant figures\"\"\"\n    return round(x, sig - int(floor(log10(abs(x)))) - 1)"
  },
  {
    "id": "train-python-cosqa-train-6770",
    "code": "def hamming_distance ( str1 , str2 ) : if len ( str1 ) != len ( str2 ) : raise VisualizationError ( 'Strings not same length.' ) return sum ( s1 != s2 for s1 , s2 in zip ( str1 , str2 ) )",
    "text": "distance between 2 strings python",
    "label": 1,
    "raw": "def hamming_distance(str1, str2):\n    \"\"\"Calculate the Hamming distance between two bit strings\n\n    Args:\n        str1 (str): First string.\n        str2 (str): Second string.\n    Returns:\n        int: Distance between strings.\n    Raises:\n        VisualizationError: Strings not same length\n    \"\"\"\n    if len(str1) != len(str2):\n        raise VisualizationError('Strings not same length.')\n    return sum(s1 != s2 for s1, s2 in zip(str1, str2))"
  },
  {
    "id": "train-python-cosqa-train-17809",
    "code": "def copy_without_prompts ( self ) : text = self . get_selected_text ( ) lines = text . split ( os . linesep ) for index , line in enumerate ( lines ) : if line . startswith ( '>>> ' ) or line . startswith ( '... ' ) : lines [ index ] = line [ 4 : ] text = os . linesep . join ( lines ) QApplication . clipboard ( ) . setText ( text )",
    "text": "pasting data from clipboard in python",
    "label": 1,
    "raw": "def copy_without_prompts(self):\n        \"\"\"Copy text to clipboard without prompts\"\"\"\n        text = self.get_selected_text()\n        lines = text.split(os.linesep)\n        for index, line in enumerate(lines):\n            if line.startswith('>>> ') or line.startswith('... '):\n                lines[index] = line[4:]\n        text = os.linesep.join(lines)\n        QApplication.clipboard().setText(text)"
  },
  {
    "id": "train-python-cosqa-train-12007",
    "code": "def stop ( self ) : with self . lock : for dummy in self . threads : self . queue . put ( None )",
    "text": "python stop threads once all queue items processed",
    "label": 1,
    "raw": "def stop(self):\n        \"\"\"Stop the resolver threads.\n        \"\"\"\n        with self.lock:\n            for dummy in self.threads:\n                self.queue.put(None)"
  },
  {
    "id": "train-python-cosqa-train-11760",
    "code": "def unaccentuate ( s ) : return \"\" . join ( c for c in unicodedata . normalize ( \"NFKD\" , s ) if not unicodedata . combining ( c ) )",
    "text": "python remove accents from arabic",
    "label": 1,
    "raw": "def unaccentuate(s):\n    \"\"\" Replace accentuated chars in string by their non accentuated equivalent. \"\"\"\n    return \"\".join(c for c in unicodedata.normalize(\"NFKD\", s) if not unicodedata.combining(c))"
  },
  {
    "id": "train-python-cosqa-train-2289",
    "code": "def log_exception ( exc_info = None , stream = None ) : exc_info = exc_info or sys . exc_info ( ) stream = stream or sys . stderr try : from traceback import print_exception print_exception ( exc_info [ 0 ] , exc_info [ 1 ] , exc_info [ 2 ] , None , stream ) stream . flush ( ) finally : exc_info = None",
    "text": "python exc log trace",
    "label": 1,
    "raw": "def log_exception(exc_info=None, stream=None):\n    \"\"\"Log the 'exc_info' tuple in the server log.\"\"\"\n    exc_info = exc_info or sys.exc_info()\n    stream = stream or sys.stderr\n    try:\n        from traceback import print_exception\n        print_exception(exc_info[0], exc_info[1], exc_info[2], None, stream)\n        stream.flush()\n    finally:\n        exc_info = None"
  },
  {
    "id": "train-python-cosqa-train-11972",
    "code": "def split_len ( s , length ) : return [ s [ i : i + length ] for i in range ( 0 , len ( s ) , length ) ]",
    "text": "python split string on length",
    "label": 1,
    "raw": "def split_len(s, length):\n    \"\"\"split string *s* into list of strings no longer than *length*\"\"\"\n    return [s[i:i+length] for i in range(0, len(s), length)]"
  },
  {
    "id": "train-python-cosqa-train-12395",
    "code": "def angle ( x , y ) : return arccos ( dot ( x , y ) / ( norm ( x ) * norm ( y ) ) ) * 180. / pi",
    "text": "python angle of two segments",
    "label": 1,
    "raw": "def angle(x, y):\n    \"\"\"Return the angle between vectors a and b in degrees.\"\"\"\n    return arccos(dot(x, y)/(norm(x)*norm(y)))*180./pi"
  },
  {
    "id": "train-python-cosqa-train-6257",
    "code": "def add_parent ( self , parent ) : parent . add_child ( self ) self . parent = parent return parent",
    "text": "update parent from child python",
    "label": 1,
    "raw": "def add_parent(self, parent):\n        \"\"\"\n        Adds self as child of parent, then adds parent.\n        \"\"\"\n        parent.add_child(self)\n        self.parent = parent\n        return parent"
  },
  {
    "id": "train-python-cosqa-train-16415",
    "code": "def element_to_string ( element , include_declaration = True , encoding = DEFAULT_ENCODING , method = 'xml' ) : if isinstance ( element , ElementTree ) : element = element . getroot ( ) elif not isinstance ( element , ElementType ) : element = get_element ( element ) if element is None : return u'' element_as_string = tostring ( element , encoding , method ) . decode ( encoding = encoding ) if include_declaration : return element_as_string else : return strip_xml_declaration ( element_as_string )",
    "text": "python xml elementtree to string",
    "label": 1,
    "raw": "def element_to_string(element, include_declaration=True, encoding=DEFAULT_ENCODING, method='xml'):\n    \"\"\" :return: the string value of the element or element tree \"\"\"\n\n    if isinstance(element, ElementTree):\n        element = element.getroot()\n    elif not isinstance(element, ElementType):\n        element = get_element(element)\n\n    if element is None:\n        return u''\n\n    element_as_string = tostring(element, encoding, method).decode(encoding=encoding)\n    if include_declaration:\n        return element_as_string\n    else:\n        return strip_xml_declaration(element_as_string)"
  },
  {
    "id": "train-python-cosqa-train-9781",
    "code": "def shutdown ( self ) : if self . sock : self . sock . close ( ) self . sock = None self . connected = False",
    "text": "python socket restart after close",
    "label": 1,
    "raw": "def shutdown(self):\n        \"\"\"close socket, immediately.\"\"\"\n        if self.sock:\n            self.sock.close()\n            self.sock = None\n            self.connected = False"
  },
  {
    "id": "train-python-cosqa-train-14273",
    "code": "def put_pidfile ( pidfile_path , pid ) : with open ( pidfile_path , \"w\" ) as f : f . write ( \"%s\" % pid ) os . fsync ( f . fileno ( ) ) return",
    "text": "linux copy pid of python script to a file at time of init",
    "label": 1,
    "raw": "def put_pidfile( pidfile_path, pid ):\n    \"\"\"\n    Put a PID into a pidfile\n    \"\"\"\n    with open( pidfile_path, \"w\" ) as f:\n        f.write(\"%s\" % pid)\n        os.fsync(f.fileno())\n\n    return"
  },
  {
    "id": "train-python-cosqa-train-18431",
    "code": "def sorted ( self ) : for i in range ( 0 , self . tabs . tabBar ( ) . count ( ) - 1 ) : if ( self . tabs . tabBar ( ) . tabText ( i ) > self . tabs . tabBar ( ) . tabText ( i + 1 ) ) : return False return True",
    "text": "how do i minimize tabs in python",
    "label": 1,
    "raw": "def sorted(self):\n        \"\"\"Utility function for sort_file_tabs_alphabetically().\"\"\"\n        for i in range(0, self.tabs.tabBar().count() - 1):\n            if (self.tabs.tabBar().tabText(i) >\n                    self.tabs.tabBar().tabText(i + 1)):\n                return False\n        return True"
  },
  {
    "id": "train-python-cosqa-train-13287",
    "code": "def normalize_array ( lst ) : np_arr = np . array ( lst ) x_normalized = np_arr / np_arr . max ( axis = 0 ) return list ( x_normalized )",
    "text": "python how to normalize an array",
    "label": 1,
    "raw": "def normalize_array(lst):\n    \"\"\"Normalizes list\n\n    :param lst: Array of floats\n    :return: Normalized (in [0, 1]) input array\n    \"\"\"\n    np_arr = np.array(lst)\n    x_normalized = np_arr / np_arr.max(axis=0)\n    return list(x_normalized)"
  },
  {
    "id": "train-python-cosqa-train-13482",
    "code": "def list_of_lists_to_dict ( l ) : d = { } for key , val in l : d . setdefault ( key , [ ] ) . append ( val ) return d",
    "text": "python list of lists to dictionary",
    "label": 1,
    "raw": "def list_of_lists_to_dict(l):\n    \"\"\" Convert list of key,value lists to dict\n\n    [['id', 1], ['id', 2], ['id', 3], ['foo': 4]]\n    {'id': [1, 2, 3], 'foo': [4]}\n    \"\"\"\n    d = {}\n    for key, val in l:\n        d.setdefault(key, []).append(val)\n    return d"
  },
  {
    "id": "train-python-cosqa-train-8574",
    "code": "def show_xticklabels ( self , row , column ) : subplot = self . get_subplot_at ( row , column ) subplot . show_xticklabels ( )",
    "text": "python define x axis of subplot",
    "label": 1,
    "raw": "def show_xticklabels(self, row, column):\n        \"\"\"Show the x-axis tick labels for a subplot.\n\n        :param row,column: specify the subplot.\n\n        \"\"\"\n        subplot = self.get_subplot_at(row, column)\n        subplot.show_xticklabels()"
  },
  {
    "id": "train-python-cosqa-train-17972",
    "code": "def running_containers ( name_filter : str ) -> List [ str ] : return [ container . short_id for container in docker_client . containers . list ( filters = { \"name\" : name_filter } ) ]",
    "text": "docker container ls not listing python",
    "label": 1,
    "raw": "def running_containers(name_filter: str) -> List[str]:\n    \"\"\"\n    :raises docker.exceptions.APIError\n    \"\"\"\n    return [container.short_id for container in\n            docker_client.containers.list(filters={\"name\": name_filter})]"
  },
  {
    "id": "train-python-cosqa-train-7034",
    "code": "def random_str ( size = 10 ) : return '' . join ( random . choice ( string . ascii_lowercase ) for _ in range ( size ) )",
    "text": "how can i automatically create a string of a particular length python",
    "label": 1,
    "raw": "def random_str(size=10):\n    \"\"\"\n    create random string of selected size\n\n    :param size: int, length of the string\n    :return: the string\n    \"\"\"\n    return ''.join(random.choice(string.ascii_lowercase) for _ in range(size))"
  },
  {
    "id": "train-python-cosqa-train-18201",
    "code": "def __replace_all ( repls : dict , input : str ) -> str : return re . sub ( '|' . join ( re . escape ( key ) for key in repls . keys ( ) ) , lambda k : repls [ k . group ( 0 ) ] , input )",
    "text": "python string replace all",
    "label": 1,
    "raw": "def __replace_all(repls: dict, input: str) -> str:\n    \"\"\" Replaces from a string **input** all the occurrences of some\n    symbols according to mapping **repls**.\n\n    :param dict repls: where #key is the old character and\n    #value is the one to substitute with;\n    :param str input: original string where to apply the\n    replacements;\n    :return: *(str)* the string with the desired characters replaced\n    \"\"\"\n    return re.sub('|'.join(re.escape(key) for key in repls.keys()),\n                  lambda k: repls[k.group(0)], input)"
  },
  {
    "id": "train-python-cosqa-train-10727",
    "code": "def add_range ( self , sequence , begin , end ) : sequence . parser_tree = parsing . Range ( self . value ( begin ) . strip ( \"'\" ) , self . value ( end ) . strip ( \"'\" ) ) return True",
    "text": "can a range object hold strings python",
    "label": 1,
    "raw": "def add_range(self, sequence, begin, end):\n    \"\"\"Add a read_range primitive\"\"\"\n    sequence.parser_tree = parsing.Range(self.value(begin).strip(\"'\"),\n                                         self.value(end).strip(\"'\"))\n    return True"
  },
  {
    "id": "train-python-cosqa-train-6347",
    "code": "def notin ( arg , values ) : op = ops . NotContains ( arg , values ) return op . to_expr ( )",
    "text": "python \"not in\" array",
    "label": 1,
    "raw": "def notin(arg, values):\n    \"\"\"\n    Like isin, but checks whether this expression's value(s) are not\n    contained in the passed values. See isin docs for full usage.\n    \"\"\"\n    op = ops.NotContains(arg, values)\n    return op.to_expr()"
  },
  {
    "id": "train-python-cosqa-train-9745",
    "code": "def copy_default_data_file ( filename , module = None ) : if module is None : module = __get_filetypes_module ( ) fullpath = get_default_data_path ( filename , module = module ) shutil . copy ( fullpath , \".\" )",
    "text": "python set default file path",
    "label": 1,
    "raw": "def copy_default_data_file(filename, module=None):\n    \"\"\"Copies file from default data directory to local directory.\"\"\"\n    if module is None:\n        module = __get_filetypes_module()\n    fullpath = get_default_data_path(filename, module=module)\n    shutil.copy(fullpath, \".\")"
  },
  {
    "id": "train-python-cosqa-train-1967",
    "code": "def _multiline_width ( multiline_s , line_width_fn = len ) : return max ( map ( line_width_fn , re . split ( \"[\\r\\n]\" , multiline_s ) ) )",
    "text": "python change maximun line length",
    "label": 1,
    "raw": "def _multiline_width(multiline_s, line_width_fn=len):\n    \"\"\"Visible width of a potentially multiline content.\"\"\"\n    return max(map(line_width_fn, re.split(\"[\\r\\n]\", multiline_s)))"
  },
  {
    "id": "train-python-cosqa-dev-226",
    "code": "def alter_change_column ( self , table , column , field ) : return self . _update_column ( table , column , lambda a , b : b )",
    "text": "python modify data of a column",
    "label": 1,
    "raw": "def alter_change_column(self, table, column, field):\n        \"\"\"Support change columns.\"\"\"\n        return self._update_column(table, column, lambda a, b: b)"
  },
  {
    "id": "train-python-cosqa-train-10083",
    "code": "def imp_print ( self , text , end ) : sys . stdout . write ( ( text + end ) . encode ( \"utf-8\" ) )",
    "text": "python write stdout encoding",
    "label": 1,
    "raw": "def imp_print(self, text, end):\n\t\t\"\"\"Directly send utf8 bytes to stdout\"\"\"\n\t\tsys.stdout.write((text + end).encode(\"utf-8\"))"
  },
  {
    "id": "train-python-cosqa-train-11887",
    "code": "def find_largest_contig ( contig_lengths_dict ) : # Initialise the dictionary longest_contig_dict = dict ( ) for file_name , contig_lengths in contig_lengths_dict . items ( ) : # As the list is sorted in descending order, the largest contig is the first entry in the list longest_contig_dict [ file_name ] = contig_lengths [ 0 ] return longest_contig_dict",
    "text": "python select longest string in a dictionary",
    "label": 1,
    "raw": "def find_largest_contig(contig_lengths_dict):\n    \"\"\"\n    Determine the largest contig for each strain\n    :param contig_lengths_dict: dictionary of strain name: reverse-sorted list of all contig lengths\n    :return: longest_contig_dict: dictionary of strain name: longest contig\n    \"\"\"\n    # Initialise the dictionary\n    longest_contig_dict = dict()\n    for file_name, contig_lengths in contig_lengths_dict.items():\n        # As the list is sorted in descending order, the largest contig is the first entry in the list\n        longest_contig_dict[file_name] = contig_lengths[0]\n    return longest_contig_dict"
  },
  {
    "id": "train-python-cosqa-train-12094",
    "code": "def list_of_lists_to_dict ( l ) : d = { } for key , val in l : d . setdefault ( key , [ ] ) . append ( val ) return d",
    "text": "list to dictionary in python",
    "label": 1,
    "raw": "def list_of_lists_to_dict(l):\n    \"\"\" Convert list of key,value lists to dict\n\n    [['id', 1], ['id', 2], ['id', 3], ['foo': 4]]\n    {'id': [1, 2, 3], 'foo': [4]}\n    \"\"\"\n    d = {}\n    for key, val in l:\n        d.setdefault(key, []).append(val)\n    return d"
  },
  {
    "id": "train-python-cosqa-train-4973",
    "code": "def keys ( self , index = None ) : with self . _lmdb . begin ( ) as txn : return [ key . decode ( ) for key , _ in txn . cursor ( ) ]",
    "text": "python lmdb get all keys",
    "label": 1,
    "raw": "def keys(self, index=None):\n        \"\"\"Returns a list of keys in the database\n        \"\"\"\n        with self._lmdb.begin() as txn:\n            return [key.decode() for key, _ in txn.cursor()]"
  },
  {
    "id": "train-python-cosqa-train-13198",
    "code": "def exists ( self , path ) : import hdfs try : self . client . status ( path ) return True except hdfs . util . HdfsError as e : if str ( e ) . startswith ( 'File does not exist: ' ) : return False else : raise e",
    "text": "python hdfs detect file exist",
    "label": 1,
    "raw": "def exists(self, path):\n        \"\"\"\n        Returns true if the path exists and false otherwise.\n        \"\"\"\n        import hdfs\n        try:\n            self.client.status(path)\n            return True\n        except hdfs.util.HdfsError as e:\n            if str(e).startswith('File does not exist: '):\n                return False\n            else:\n                raise e"
  },
  {
    "id": "train-python-cosqa-train-223",
    "code": "def is_date ( thing ) : # known date types date_types = ( datetime . datetime , datetime . date , DateTime ) return isinstance ( thing , date_types )",
    "text": "check is string is date in python",
    "label": 1,
    "raw": "def is_date(thing):\n    \"\"\"Checks if the given thing represents a date\n\n    :param thing: The object to check if it is a date\n    :type thing: arbitrary object\n    :returns: True if we have a date object\n    :rtype: bool\n    \"\"\"\n    # known date types\n    date_types = (datetime.datetime,\n                  datetime.date,\n                  DateTime)\n    return isinstance(thing, date_types)"
  },
  {
    "id": "train-python-cosqa-train-1404",
    "code": "def _validate_date_str ( str_ ) : if not str_ : return None # Convert to datetime so we can validate it's a real date that exists then # convert it back to the string. try : date = datetime . strptime ( str_ , DATE_FMT ) except ValueError : msg = 'Invalid date format, should be YYYY-MM-DD' raise argparse . ArgumentTypeError ( msg ) return date . strftime ( DATE_FMT )",
    "text": "python str is valid date",
    "label": 1,
    "raw": "def _validate_date_str(str_):\n    \"\"\"Validate str as a date and return string version of date\"\"\"\n\n    if not str_:\n        return None\n\n    # Convert to datetime so we can validate it's a real date that exists then\n    # convert it back to the string.\n    try:\n        date = datetime.strptime(str_, DATE_FMT)\n    except ValueError:\n        msg = 'Invalid date format, should be YYYY-MM-DD'\n        raise argparse.ArgumentTypeError(msg)\n\n    return date.strftime(DATE_FMT)"
  },
  {
    "id": "train-python-cosqa-train-19384",
    "code": "def uppercase_chars ( string : any ) -> str : return '' . join ( [ c if c . isupper ( ) else '' for c in str ( string ) ] )",
    "text": "make string all uppercase python",
    "label": 1,
    "raw": "def uppercase_chars(string: any) -> str:\n        \"\"\"Return all (and only) the uppercase chars in the given string.\"\"\"\n        return ''.join([c if c.isupper() else '' for c in str(string)])"
  },
  {
    "id": "train-python-cosqa-train-6888",
    "code": "def find_ge ( a , x ) : i = bs . bisect_left ( a , x ) if i != len ( a ) : return i raise ValueError",
    "text": "first index greater than a number in python",
    "label": 1,
    "raw": "def find_ge(a, x):\n    \"\"\"Find leftmost item greater than or equal to x.\"\"\"\n    i = bs.bisect_left(a, x)\n    if i != len(a): return i\n    raise ValueError"
  },
  {
    "id": "train-python-cosqa-train-8448",
    "code": "def isetdiff_flags ( list1 , list2 ) : set2 = set ( list2 ) return ( item not in set2 for item in list1 )",
    "text": "python compare compare sets not in one set",
    "label": 1,
    "raw": "def isetdiff_flags(list1, list2):\n    \"\"\"\n    move to util_iter\n    \"\"\"\n    set2 = set(list2)\n    return (item not in set2 for item in list1)"
  },
  {
    "id": "train-python-cosqa-train-1843",
    "code": "def add_argument ( self , dest , nargs = 1 , obj = None ) : if obj is None : obj = dest self . _args . append ( Argument ( dest = dest , nargs = nargs , obj = obj ) )",
    "text": "python argarse custom action",
    "label": 1,
    "raw": "def add_argument(self, dest, nargs=1, obj=None):\n        \"\"\"Adds a positional argument named `dest` to the parser.\n\n        The `obj` can be used to identify the option in the order list\n        that is returned from the parser.\n        \"\"\"\n        if obj is None:\n            obj = dest\n        self._args.append(Argument(dest=dest, nargs=nargs, obj=obj))"
  },
  {
    "id": "train-python-cosqa-train-15533",
    "code": "def extract_vars_above ( * names ) : callerNS = sys . _getframe ( 2 ) . f_locals return dict ( ( k , callerNS [ k ] ) for k in names )",
    "text": "python inspect variables from calling frame",
    "label": 1,
    "raw": "def extract_vars_above(*names):\n    \"\"\"Extract a set of variables by name from another frame.\n\n    Similar to extractVars(), but with a specified depth of 1, so that names\n    are exctracted exactly from above the caller.\n\n    This is simply a convenience function so that the very common case (for us)\n    of skipping exactly 1 frame doesn't have to construct a special dict for\n    keyword passing.\"\"\"\n\n    callerNS = sys._getframe(2).f_locals\n    return dict((k,callerNS[k]) for k in names)"
  },
  {
    "id": "train-python-cosqa-train-7428",
    "code": "def add_arrow ( self , x1 , y1 , x2 , y2 , * * kws ) : self . panel . add_arrow ( x1 , y1 , x2 , y2 , * * kws )",
    "text": "how to insert arrows on plots python",
    "label": 1,
    "raw": "def add_arrow(self, x1, y1, x2, y2, **kws):\n        \"\"\"add arrow to plot\"\"\"\n        self.panel.add_arrow(x1, y1, x2, y2, **kws)"
  },
  {
    "id": "train-python-cosqa-train-4690",
    "code": "def chmod_add_excute ( filename ) : st = os . stat ( filename ) os . chmod ( filename , st . st_mode | stat . S_IEXEC )",
    "text": "python give file excute premission",
    "label": 1,
    "raw": "def chmod_add_excute(filename):\n        \"\"\"\n        Adds execute permission to file.\n        :param filename:\n        :return:\n        \"\"\"\n        st = os.stat(filename)\n        os.chmod(filename, st.st_mode | stat.S_IEXEC)"
  },
  {
    "id": "train-python-cosqa-train-1559",
    "code": "def kill_process_children ( pid ) : if sys . platform == \"darwin\" : kill_process_children_osx ( pid ) elif sys . platform == \"linux\" : kill_process_children_unix ( pid ) else : pass",
    "text": "kill a root process from python",
    "label": 1,
    "raw": "def kill_process_children(pid):\n    \"\"\"Find and kill child processes of a process.\n\n    :param pid: PID of parent process (process ID)\n    :return: Nothing\n    \"\"\"\n    if sys.platform == \"darwin\":\n        kill_process_children_osx(pid)\n    elif sys.platform == \"linux\":\n        kill_process_children_unix(pid)\n    else:\n        pass"
  },
  {
    "id": "train-python-cosqa-train-13375",
    "code": "def set_clear_color ( self , color = 'black' , alpha = None ) : self . glir . command ( 'FUNC' , 'glClearColor' , * Color ( color , alpha ) . rgba )",
    "text": "glclearcolor not working python",
    "label": 1,
    "raw": "def set_clear_color(self, color='black', alpha=None):\n        \"\"\"Set the screen clear color\n\n        This is a wrapper for gl.glClearColor.\n\n        Parameters\n        ----------\n        color : str | tuple | instance of Color\n            Color to use. See vispy.color.Color for options.\n        alpha : float | None\n            Alpha to use.\n        \"\"\"\n        self.glir.command('FUNC', 'glClearColor', *Color(color, alpha).rgba)"
  },
  {
    "id": "train-python-cosqa-train-10967",
    "code": "def paste ( cmd = paste_cmd , stdout = PIPE ) : return Popen ( cmd , stdout = stdout ) . communicate ( ) [ 0 ] . decode ( 'utf-8' )",
    "text": "python get linux clipboard",
    "label": 1,
    "raw": "def paste(cmd=paste_cmd, stdout=PIPE):\n    \"\"\"Returns system clipboard contents.\n    \"\"\"\n    return Popen(cmd, stdout=stdout).communicate()[0].decode('utf-8')"
  },
  {
    "id": "train-python-cosqa-train-3382",
    "code": "def sanitize_word ( s ) : s = re . sub ( '[^\\w-]+' , '_' , s ) s = re . sub ( '__+' , '_' , s ) return s . strip ( '_' )",
    "text": "how to remove space in strings in python",
    "label": 1,
    "raw": "def sanitize_word(s):\n    \"\"\"Remove non-alphanumerical characters from metric word.\n    And trim excessive underscores.\n    \"\"\"\n    s = re.sub('[^\\w-]+', '_', s)\n    s = re.sub('__+', '_', s)\n    return s.strip('_')"
  },
  {
    "id": "train-python-cosqa-train-19053",
    "code": "def position ( self ) -> Position : return Position ( self . _index , self . _lineno , self . _col_offset )",
    "text": "get current cursor position python",
    "label": 1,
    "raw": "def position(self) -> Position:\n        \"\"\"The current position of the cursor.\"\"\"\n        return Position(self._index, self._lineno, self._col_offset)"
  },
  {
    "id": "train-python-cosqa-train-1367",
    "code": "def case_us2mc ( x ) : return re . sub ( r'_([a-z])' , lambda m : ( m . group ( 1 ) . upper ( ) ) , x )",
    "text": "python split underscore reverse",
    "label": 1,
    "raw": "def case_us2mc(x):\n    \"\"\" underscore to mixed case notation \"\"\"\n    return re.sub(r'_([a-z])', lambda m: (m.group(1).upper()), x)"
  },
  {
    "id": "train-python-cosqa-train-13101",
    "code": "def estimate_complexity ( self , x , y , z , n ) : num_calculations = x * y * z * n run_time = num_calculations / 100000 # a 2014 PC does about 100k calcs in a second (guess based on prior logs) return self . show_time_as_short_string ( run_time )",
    "text": "determining time complexity in python",
    "label": 1,
    "raw": "def estimate_complexity(self, x,y,z,n):\n        \"\"\" \n        calculates a rough guess of runtime based on product of parameters \n        \"\"\"\n        num_calculations = x * y * z * n\n        run_time = num_calculations / 100000  # a 2014 PC does about 100k calcs in a second (guess based on prior logs)\n        return self.show_time_as_short_string(run_time)"
  },
  {
    "id": "train-python-cosqa-train-12694",
    "code": "def _compile ( pattern , flags ) : return re . compile ( WcParse ( pattern , flags & FLAG_MASK ) . parse ( ) )",
    "text": "python compile regex with flag",
    "label": 1,
    "raw": "def _compile(pattern, flags):\n    \"\"\"Compile the pattern to regex.\"\"\"\n\n    return re.compile(WcParse(pattern, flags & FLAG_MASK).parse())"
  },
  {
    "id": "train-python-cosqa-train-9220",
    "code": "def floor ( self ) : return Point ( int ( math . floor ( self . x ) ) , int ( math . floor ( self . y ) ) )",
    "text": "how to call a float object in python",
    "label": 1,
    "raw": "def floor(self):\n    \"\"\"Round `x` and `y` down to integers.\"\"\"\n    return Point(int(math.floor(self.x)), int(math.floor(self.y)))"
  },
  {
    "id": "train-python-cosqa-train-15420",
    "code": "def _get_wow64 ( ) : # Try to determine if the debugger itself is running on WOW64. # On error assume False. if bits == 64 : wow64 = False else : try : wow64 = IsWow64Process ( GetCurrentProcess ( ) ) except Exception : wow64 = False return wow64",
    "text": "python how to determine whether i am on windows",
    "label": 1,
    "raw": "def _get_wow64():\n    \"\"\"\n    Determines if the current process is running in Windows-On-Windows 64 bits.\n\n    @rtype:  bool\n    @return: C{True} of the current process is a 32 bit program running in a\n        64 bit version of Windows, C{False} if it's either a 32 bit program\n        in a 32 bit Windows or a 64 bit program in a 64 bit Windows.\n    \"\"\"\n    # Try to determine if the debugger itself is running on WOW64.\n    # On error assume False.\n    if bits == 64:\n        wow64 = False\n    else:\n        try:\n            wow64 = IsWow64Process( GetCurrentProcess() )\n        except Exception:\n            wow64 = False\n    return wow64"
  },
  {
    "id": "train-python-cosqa-train-13819",
    "code": "def __iter__ ( self ) : for value , count in self . counts ( ) : for _ in range ( count ) : yield value",
    "text": "how to iterate every other element in python",
    "label": 1,
    "raw": "def __iter__(self):\n\t\t\"\"\"Iterate through all elements.\n\n\t\tMultiple copies will be returned if they exist.\n\t\t\"\"\"\n\t\tfor value, count in self.counts():\n\t\t\tfor _ in range(count):\n\t\t\t\tyield value"
  },
  {
    "id": "train-python-cosqa-train-11055",
    "code": "def underscore ( text ) : return UNDERSCORE [ 1 ] . sub ( r'\\1_\\2' , UNDERSCORE [ 0 ] . sub ( r'\\1_\\2' , text ) ) . lower ( )",
    "text": "extract everthing before underscore python",
    "label": 1,
    "raw": "def underscore(text):\n    \"\"\"Converts text that may be camelcased into an underscored format\"\"\"\n    return UNDERSCORE[1].sub(r'\\1_\\2', UNDERSCORE[0].sub(r'\\1_\\2', text)).lower()"
  },
  {
    "id": "train-python-cosqa-train-14238",
    "code": "def _get_local_ip ( ) : return set ( [ x [ 4 ] [ 0 ] for x in socket . getaddrinfo ( socket . gethostname ( ) , 80 , socket . AF_INET ) ] ) . pop ( )",
    "text": "ip adress of current machine in python",
    "label": 1,
    "raw": "def _get_local_ip():\n        \"\"\"\n        Get the local ip of this device\n\n        :return: Ip of this computer\n        :rtype: str\n        \"\"\"\n        return set([x[4][0] for x in socket.getaddrinfo(\n            socket.gethostname(),\n            80,\n            socket.AF_INET\n        )]).pop()"
  },
  {
    "id": "train-python-cosqa-train-11438",
    "code": "def select_up ( self ) : r , c = self . _index self . _select_index ( r - 1 , c )",
    "text": "python move index to comumn",
    "label": 1,
    "raw": "def select_up(self):\n        \"\"\"move cursor up\"\"\"\n        r, c = self._index\n        self._select_index(r-1, c)"
  },
  {
    "id": "train-python-cosqa-train-8095",
    "code": "def normalize_value ( text ) : result = text . replace ( '\\n' , ' ' ) result = re . subn ( '[ ]{2,}' , ' ' , result ) [ 0 ] return result",
    "text": "remove spaces in text python",
    "label": 1,
    "raw": "def normalize_value(text):\n    \"\"\"\n    This removes newlines and multiple spaces from a string.\n    \"\"\"\n    result = text.replace('\\n', ' ')\n    result = re.subn('[ ]{2,}', ' ', result)[0]\n    return result"
  },
  {
    "id": "train-python-cosqa-train-11265",
    "code": "def _query_for_reverse_geocoding ( lat , lng ) : # have to do some stupid f/Decimal/str stuff to (a) ensure we get as much # decimal places as the user already specified and (b) to ensure we don't # get e-5 stuff return \"{0:f},{1:f}\" . format ( Decimal ( str ( lat ) ) , Decimal ( str ( lng ) ) )",
    "text": "how do you get only latitude and longitude using geocode in python geeks for geeks",
    "label": 1,
    "raw": "def _query_for_reverse_geocoding(lat, lng):\n    \"\"\"\n    Given a lat & lng, what's the string search query.\n\n    If the API changes, change this function. Only for internal use.\n    \"\"\"\n    # have to do some stupid f/Decimal/str stuff to (a) ensure we get as much\n    # decimal places as the user already specified and (b) to ensure we don't\n    # get e-5 stuff\n    return \"{0:f},{1:f}\".format(Decimal(str(lat)), Decimal(str(lng)))"
  },
  {
    "id": "train-python-cosqa-train-12463",
    "code": "def consecutive ( data , stepsize = 1 ) : return np . split ( data , np . where ( np . diff ( data ) != stepsize ) [ 0 ] + 1 )",
    "text": "slicing datasets with array using python",
    "label": 1,
    "raw": "def consecutive(data, stepsize=1):\n    \"\"\"Converts array into chunks with consecutive elements of given step size.\n    http://stackoverflow.com/questions/7352684/how-to-find-the-groups-of-consecutive-elements-from-an-array-in-numpy\n    \"\"\"\n    return np.split(data, np.where(np.diff(data) != stepsize)[0] + 1)"
  },
  {
    "id": "train-python-cosqa-train-12944",
    "code": "def get_own_ip ( ) : sock = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) try : sock . connect ( ( \"8.8.8.8\" , 80 ) ) except socket . gaierror : ip_ = \"127.0.0.1\" else : ip_ = sock . getsockname ( ) [ 0 ] finally : sock . close ( ) return ip_",
    "text": "python finding own ip",
    "label": 1,
    "raw": "def get_own_ip():\n    \"\"\"Get the host's ip number.\n    \"\"\"\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    try:\n        sock.connect((\"8.8.8.8\", 80))\n    except socket.gaierror:\n        ip_ = \"127.0.0.1\"\n    else:\n        ip_ = sock.getsockname()[0]\n    finally:\n        sock.close()\n    return ip_"
  },
  {
    "id": "train-python-cosqa-train-331",
    "code": "def render_template_string ( source , * * context ) : ctx = _app_ctx_stack . top ctx . app . update_template_context ( context ) return _render ( ctx . app . jinja_env . from_string ( source ) , context , ctx . app )",
    "text": "python flask template extend with context",
    "label": 1,
    "raw": "def render_template_string(source, **context):\n    \"\"\"Renders a template from the given template source string\n    with the given context.\n\n    :param source: the sourcecode of the template to be\n                   rendered\n    :param context: the variables that should be available in the\n                    context of the template.\n    \"\"\"\n    ctx = _app_ctx_stack.top\n    ctx.app.update_template_context(context)\n    return _render(ctx.app.jinja_env.from_string(source),\n                   context, ctx.app)"
  },
  {
    "id": "train-python-cosqa-train-11824",
    "code": "def _read_group_h5 ( filename , groupname ) : with h5py . File ( filename , 'r' ) as h5f : data = h5f [ groupname ] [ ( ) ] return data",
    "text": "how to see members of a group hdf5 python",
    "label": 1,
    "raw": "def _read_group_h5(filename, groupname):\n    \"\"\"Return group content.\n\n    Args:\n        filename (:class:`pathlib.Path`): path of hdf5 file.\n        groupname (str): name of group to read.\n    Returns:\n        :class:`numpy.array`: content of group.\n    \"\"\"\n    with h5py.File(filename, 'r') as h5f:\n        data = h5f[groupname][()]\n    return data"
  },
  {
    "id": "train-python-cosqa-train-5391",
    "code": "def file_read ( filename ) : fobj = open ( filename , 'r' ) source = fobj . read ( ) fobj . close ( ) return source",
    "text": "how to open and close file python",
    "label": 1,
    "raw": "def file_read(filename):\n    \"\"\"Read a file and close it.  Returns the file source.\"\"\"\n    fobj = open(filename,'r');\n    source = fobj.read();\n    fobj.close()\n    return source"
  },
  {
    "id": "train-python-cosqa-train-18044",
    "code": "def mmap ( func , iterable ) : if sys . version_info [ 0 ] > 2 : return [ i for i in map ( func , iterable ) ] else : return map ( func , iterable )",
    "text": "using map on lists python",
    "label": 1,
    "raw": "def mmap(func, iterable):\n    \"\"\"Wrapper to make map() behave the same on Py2 and Py3.\"\"\"\n\n    if sys.version_info[0] > 2:\n        return [i for i in map(func, iterable)]\n    else:\n        return map(func, iterable)"
  },
  {
    "id": "train-python-cosqa-train-11910",
    "code": "def log_y_cb ( self , w , val ) : self . tab_plot . logy = val self . plot_two_columns ( )",
    "text": "python set y axis log",
    "label": 1,
    "raw": "def log_y_cb(self, w, val):\n        \"\"\"Toggle linear/log scale for Y-axis.\"\"\"\n        self.tab_plot.logy = val\n        self.plot_two_columns()"
  },
  {
    "id": "train-python-cosqa-train-8596",
    "code": "def terminate ( self ) : for t in self . _threads : t . quit ( ) self . _thread = [ ] self . _workers = [ ]",
    "text": "python destroy all threads",
    "label": 1,
    "raw": "def terminate(self):\n        \"\"\"Terminate all workers and threads.\"\"\"\n        for t in self._threads:\n            t.quit()\n        self._thread = []\n        self._workers = []"
  },
  {
    "id": "train-python-cosqa-train-9037",
    "code": "def get_var ( self , name ) : for var in self . vars : if var . name == name : return var else : raise ValueError",
    "text": "python how to get the variable with the same name as the string",
    "label": 1,
    "raw": "def get_var(self, name):\n        \"\"\" Returns the variable set with the given name.\n        \"\"\"\n        for var in self.vars:\n            if var.name == name:\n                return var\n        else:\n            raise ValueError"
  },
  {
    "id": "train-python-cosqa-train-11960",
    "code": "def _set_module_names_for_sphinx ( modules : List , new_name : str ) : for obj in modules : obj . __module__ = new_name",
    "text": "python sphinx figure with caption",
    "label": 1,
    "raw": "def _set_module_names_for_sphinx(modules: List, new_name: str):\n    \"\"\" Trick sphinx into displaying the desired module in these objects' documentation. \"\"\"\n    for obj in modules:\n        obj.__module__ = new_name"
  },
  {
    "id": "train-python-cosqa-train-7043",
    "code": "def list_get ( l , idx , default = None ) : try : if l [ idx ] : return l [ idx ] else : return default except IndexError : return default",
    "text": "python list get with default",
    "label": 1,
    "raw": "def list_get(l, idx, default=None):\n    \"\"\"\n    Get from a list with an optional default value.\n    \"\"\"\n    try:\n        if l[idx]:\n            return l[idx]\n        else:\n            return default\n    except IndexError:\n        return default"
  },
  {
    "id": "train-python-cosqa-train-7619",
    "code": "def internal_reset ( self ) : log . critical ( \"PIA internal_reset()\" ) self . empty_key_toggle = True self . current_input_char = None self . input_repead = 0",
    "text": "how to reset the input python",
    "label": 1,
    "raw": "def internal_reset(self):\n        \"\"\"\n        internal state reset.\n        used e.g. in unittests\n        \"\"\"\n        log.critical(\"PIA internal_reset()\")\n        self.empty_key_toggle = True\n        self.current_input_char = None\n        self.input_repead = 0"
  },
  {
    "id": "train-python-cosqa-train-12895",
    "code": "def update_scale ( self , value ) : self . plotter . set_scale ( self . x_slider_group . value , self . y_slider_group . value , self . z_slider_group . value )",
    "text": "change scale on python plot",
    "label": 1,
    "raw": "def update_scale(self, value):\n        \"\"\" updates the scale of all actors in the plotter \"\"\"\n        self.plotter.set_scale(self.x_slider_group.value,\n                               self.y_slider_group.value,\n                               self.z_slider_group.value)"
  },
  {
    "id": "train-python-cosqa-train-10313",
    "code": "def download_file ( save_path , file_url ) : r = requests . get ( file_url ) # create HTTP response object with open ( save_path , 'wb' ) as f : f . write ( r . content ) return save_path",
    "text": "save http get to file python",
    "label": 1,
    "raw": "def download_file(save_path, file_url):\n    \"\"\" Download file from http url link \"\"\"\n\n    r = requests.get(file_url)  # create HTTP response object\n\n    with open(save_path, 'wb') as f:\n        f.write(r.content)\n\n    return save_path"
  },
  {
    "id": "train-python-cosqa-dev-413",
    "code": "def not_matching_list ( self ) : pre_result = comp ( self . regex ) return [ x for x in self . data if not pre_result . search ( str ( x ) ) ]",
    "text": "python remove elements from list not match regex",
    "label": 1,
    "raw": "def not_matching_list(self):\n        \"\"\"\n        Return a list of string which don't match the\n        given regex.\n        \"\"\"\n\n        pre_result = comp(self.regex)\n\n        return [x for x in self.data if not pre_result.search(str(x))]"
  },
  {
    "id": "train-python-cosqa-train-19457",
    "code": "def valid_file ( path : str ) -> bool : path = Path ( path ) . expanduser ( ) log . debug ( \"checking if %s is a valid file\" , path ) return path . exists ( ) and path . is_file ( )",
    "text": "python how to verify file location",
    "label": 1,
    "raw": "def valid_file(path: str) -> bool:\n    \"\"\"\n    Verifies that a string path actually exists and is a file\n\n    :param path: The path to verify\n    :return: **True** if path exist and is a file\n    \"\"\"\n    path = Path(path).expanduser()\n    log.debug(\"checking if %s is a valid file\", path)\n    return path.exists() and path.is_file()"
  },
  {
    "id": "train-python-cosqa-train-17622",
    "code": "def strings_to_integers ( strings : Iterable [ str ] ) -> Iterable [ int ] : return strings_to_ ( strings , lambda x : int ( float ( x ) ) )",
    "text": "cast a list of string in integer in python",
    "label": 1,
    "raw": "def strings_to_integers(strings: Iterable[str]) -> Iterable[int]:\n    \"\"\"\n    Convert a list of strings to a list of integers.\n\n    :param strings: a list of string\n    :return: a list of converted integers\n\n    .. doctest::\n\n        >>> strings_to_integers(['1', '1.0', '-0.2'])\n        [1, 1, 0]\n    \"\"\"\n    return strings_to_(strings, lambda x: int(float(x)))"
  },
  {
    "id": "train-python-cosqa-train-10851",
    "code": "def setLib ( self , lib ) : for name , item in lib . items ( ) : self . font . lib [ name ] = item",
    "text": "python fonttools how to merge",
    "label": 1,
    "raw": "def setLib(self, lib):\n        \"\"\" Copy the lib items into our font. \"\"\"\n        for name, item in lib.items():\n            self.font.lib[name] = item"
  },
  {
    "id": "train-python-cosqa-train-18012",
    "code": "def astensor ( array : TensorLike ) -> BKTensor : tensor = tf . convert_to_tensor ( value = array , dtype = CTYPE ) return tensor",
    "text": "how to transform a 2d matrix to tensor python",
    "label": 1,
    "raw": "def astensor(array: TensorLike) -> BKTensor:\n    \"\"\"Covert numpy array to tensorflow tensor\"\"\"\n    tensor = tf.convert_to_tensor(value=array, dtype=CTYPE)\n    return tensor"
  },
  {
    "id": "train-python-cosqa-train-9726",
    "code": "def _set_scroll_v ( self , * args ) : self . _canvas_categories . yview ( * args ) self . _canvas_scroll . yview ( * args )",
    "text": "python scrollbar 2 canvas",
    "label": 1,
    "raw": "def _set_scroll_v(self, *args):\n        \"\"\"Scroll both categories Canvas and scrolling container\"\"\"\n        self._canvas_categories.yview(*args)\n        self._canvas_scroll.yview(*args)"
  },
  {
    "id": "train-python-cosqa-train-10467",
    "code": "def _update_plot ( self , _ ) : # Since all sliders call this same callback without saying who they are # I need to update the values for all parameters. This can be # circumvented by creating a seperate callback function for each # parameter. for param in self . model . params : param . value = self . _sliders [ param ] . val for indep_var , dep_var in self . _projections : self . _update_specific_plot ( indep_var , dep_var )",
    "text": "python change function values with slider",
    "label": 1,
    "raw": "def _update_plot(self, _):\n        \"\"\"Callback to redraw the plot to reflect the new parameter values.\"\"\"\n        # Since all sliders call this same callback without saying who they are\n        # I need to update the values for all parameters. This can be\n        # circumvented by creating a seperate callback function for each\n        # parameter.\n        for param in self.model.params:\n            param.value = self._sliders[param].val\n        for indep_var, dep_var in self._projections:\n            self._update_specific_plot(indep_var, dep_var)"
  },
  {
    "id": "train-python-cosqa-train-14824",
    "code": "def _run_asyncio ( loop , zmq_context ) : try : asyncio . set_event_loop ( loop ) loop . run_forever ( ) except : pass finally : loop . close ( ) zmq_context . destroy ( 1000 )",
    "text": "zmq context python hang on",
    "label": 1,
    "raw": "def _run_asyncio(loop, zmq_context):\n    \"\"\"\n    Run asyncio (should be called in a thread) and close the loop and the zmq context when the thread ends\n    :param loop:\n    :param zmq_context:\n    :return:\n    \"\"\"\n    try:\n        asyncio.set_event_loop(loop)\n        loop.run_forever()\n    except:\n        pass\n    finally:\n        loop.close()\n        zmq_context.destroy(1000)"
  },
  {
    "id": "train-python-cosqa-train-2647",
    "code": "def median_high ( data ) : data = sorted ( data ) n = len ( data ) if n == 0 : raise StatisticsError ( \"no median for empty data\" ) return data [ n // 2 ]",
    "text": "finding a median code python",
    "label": 1,
    "raw": "def median_high(data):\n    \"\"\"Return the high median of data.\n\n    When the number of data points is odd, the middle value is returned.\n    When it is even, the larger of the two middle values is returned.\n\n    \"\"\"\n    data = sorted(data)\n    n = len(data)\n    if n == 0:\n        raise StatisticsError(\"no median for empty data\")\n    return data[n // 2]"
  },
  {
    "id": "train-python-cosqa-train-11317",
    "code": "def confirm ( question , default = True ) : valid = { \"\" : default , \"yes\" : True , \"y\" : True , \"no\" : False , \"n\" : False } while 1 : choice = input ( question + ( \" [Y/n] \" if default else \" [y/N] \" ) ) . lower ( ) if choice in valid : return valid [ choice ] print ( \"Please respond with 'y' or 'n' \" )",
    "text": "how to ask question in python then pick formula based on answer",
    "label": 1,
    "raw": "def confirm(question, default=True):\n    \"\"\"Ask a yes/no question interactively.\n\n    :param question: The text of the question to ask.\n    :returns: True if the answer was \"yes\", False otherwise.\n    \"\"\"\n    valid = {\"\": default, \"yes\": True, \"y\": True, \"no\": False, \"n\": False}\n    while 1:\n        choice = input(question + (\" [Y/n] \" if default else \" [y/N] \")).lower()\n        if choice in valid:\n            return valid[choice]\n        print(\"Please respond with 'y' or 'n' \")"
  },
  {
    "id": "train-python-cosqa-train-11766",
    "code": "def removeFromRegistery ( obj ) : if isRabaObject ( obj ) : _unregisterRabaObjectInstance ( obj ) elif isRabaList ( obj ) : _unregisterRabaListInstance ( obj )",
    "text": "python remove an object to free memory",
    "label": 1,
    "raw": "def removeFromRegistery(obj) :\n\t\"\"\"Removes an object/rabalist from registery. This is useful if you want to allow the garbage collector to free the memory\n\ttaken by the objects you've already loaded. Be careful might cause some discrepenties in your scripts. For objects,\n\tcascades to free the registeries of related rabalists also\"\"\"\n\t\n\tif isRabaObject(obj) :\n\t\t_unregisterRabaObjectInstance(obj)\n\telif isRabaList(obj) :\n\t\t_unregisterRabaListInstance(obj)"
  },
  {
    "id": "train-python-cosqa-train-4553",
    "code": "def get_distance_matrix ( x ) : square = nd . sum ( x ** 2.0 , axis = 1 , keepdims = True ) distance_square = square + square . transpose ( ) - ( 2.0 * nd . dot ( x , x . transpose ( ) ) ) return nd . sqrt ( distance_square )",
    "text": "computing distance matrix in python",
    "label": 1,
    "raw": "def get_distance_matrix(x):\n    \"\"\"Get distance matrix given a matrix. Used in testing.\"\"\"\n    square = nd.sum(x ** 2.0, axis=1, keepdims=True)\n    distance_square = square + square.transpose() - (2.0 * nd.dot(x, x.transpose()))\n    return nd.sqrt(distance_square)"
  },
  {
    "id": "train-python-cosqa-train-17252",
    "code": "def prin ( * args , * * kwargs ) : print >> kwargs . get ( 'out' , None ) , \" \" . join ( [ str ( arg ) for arg in args ] )",
    "text": "passing variables to a print function in python",
    "label": 1,
    "raw": "def prin(*args, **kwargs):\n    r\"\"\"Like ``print``, but a function. I.e. prints out all arguments as\n    ``print`` would do. Specify output stream like this::\n\n      print('ERROR', `out=\"sys.stderr\"``).\n\n    \"\"\"\n    print >> kwargs.get('out',None), \" \".join([str(arg) for arg in args])"
  },
  {
    "id": "train-python-cosqa-train-15404",
    "code": "def enable_writes ( self ) : self . write_buffer = [ ] self . flush_lock = threading . RLock ( ) self . flush_thread = FlushThread ( self . max_batch_time , self . _flush_writes )",
    "text": "flushing the print queue in python multiprocessing",
    "label": 1,
    "raw": "def enable_writes(self):\n        \"\"\"Restores the state of the batched queue for writing.\"\"\"\n        self.write_buffer = []\n        self.flush_lock = threading.RLock()\n        self.flush_thread = FlushThread(self.max_batch_time,\n                                        self._flush_writes)"
  },
  {
    "id": "train-python-cosqa-train-4296",
    "code": "def parse_datetime ( dt_str , format ) : t = time . strptime ( dt_str , format ) return datetime ( t [ 0 ] , t [ 1 ] , t [ 2 ] , t [ 3 ] , t [ 4 ] , t [ 5 ] , t [ 6 ] , pytz . UTC )",
    "text": "python datetime from string with timezone",
    "label": 1,
    "raw": "def parse_datetime(dt_str, format):\n    \"\"\"Create a timezone-aware datetime object from a datetime string.\"\"\"\n    t = time.strptime(dt_str, format)\n    return datetime(t[0], t[1], t[2], t[3], t[4], t[5], t[6], pytz.UTC)"
  },
  {
    "id": "train-python-cosqa-train-10766",
    "code": "def as_float_array ( a ) : return np . asarray ( a , dtype = np . quaternion ) . view ( ( np . double , 4 ) )",
    "text": "changing numpy array to float python",
    "label": 1,
    "raw": "def as_float_array(a):\n    \"\"\"View the quaternion array as an array of floats\n\n    This function is fast (of order 1 microsecond) because no data is\n    copied; the returned quantity is just a \"view\" of the original.\n\n    The output view has one more dimension (of size 4) than the input\n    array, but is otherwise the same shape.\n\n    \"\"\"\n    return np.asarray(a, dtype=np.quaternion).view((np.double, 4))"
  },
  {
    "id": "train-python-cosqa-train-12081",
    "code": "def socket_close ( self ) : if self . sock != NC . INVALID_SOCKET : self . sock . close ( ) self . sock = NC . INVALID_SOCKET",
    "text": "kill socket connections python",
    "label": 1,
    "raw": "def socket_close(self):\n        \"\"\"Close our socket.\"\"\"\n        if self.sock != NC.INVALID_SOCKET:\n            self.sock.close()\n        self.sock = NC.INVALID_SOCKET"
  },
  {
    "id": "train-python-cosqa-train-14518",
    "code": "def extend ( self , iterable ) : return super ( Collection , self ) . extend ( self . _ensure_iterable_is_valid ( iterable ) )",
    "text": "python append to iterable",
    "label": 1,
    "raw": "def extend(self, iterable):\n        \"\"\"Extend the list by appending all the items in the given list.\"\"\"\n        return super(Collection, self).extend(\n            self._ensure_iterable_is_valid(iterable))"
  },
  {
    "id": "train-python-cosqa-train-8030",
    "code": "def random_color ( _min = MIN_COLOR , _max = MAX_COLOR ) : return color ( random . randint ( _min , _max ) )",
    "text": "random variable min max python",
    "label": 1,
    "raw": "def random_color(_min=MIN_COLOR, _max=MAX_COLOR):\n    \"\"\"Returns a random color between min and max.\"\"\"\n    return color(random.randint(_min, _max))"
  },
  {
    "id": "train-python-cosqa-train-14152",
    "code": "def filesavebox ( msg = None , title = None , argInitialFile = None ) : return psidialogs . ask_file ( message = msg , title = title , default = argInitialFile , save = True )",
    "text": "how to use a dialog box to save a file in python",
    "label": 1,
    "raw": "def filesavebox(msg=None, title=None, argInitialFile=None):\n    \"\"\"Original doc: A file to get the name of a file to save.\n        Returns the name of a file, or None if user chose to cancel.\n\n        if argInitialFile contains a valid filename, the dialog will\n        be positioned at that file when it appears.\n        \"\"\"\n    return psidialogs.ask_file(message=msg, title=title, default=argInitialFile, save=True)"
  },
  {
    "id": "train-python-cosqa-train-7990",
    "code": "def is_string ( obj ) : if PYTHON3 : str_type = ( bytes , str ) else : str_type = ( bytes , str , unicode ) return isinstance ( obj , str_type )",
    "text": "python3 check whether is string",
    "label": 1,
    "raw": "def is_string(obj):\n    \"\"\"Is this a string.\n\n    :param object obj:\n    :rtype: bool\n    \"\"\"\n    if PYTHON3:\n        str_type = (bytes, str)\n    else:\n        str_type = (bytes, str, unicode)\n    return isinstance(obj, str_type)"
  },
  {
    "id": "train-python-cosqa-train-7252",
    "code": "def Max ( a , axis , keep_dims ) : return np . amax ( a , axis = axis if not isinstance ( axis , np . ndarray ) else tuple ( axis ) , keepdims = keep_dims ) ,",
    "text": "python numpy max axie",
    "label": 1,
    "raw": "def Max(a, axis, keep_dims):\n    \"\"\"\n    Max reduction op.\n    \"\"\"\n    return np.amax(a, axis=axis if not isinstance(axis, np.ndarray) else tuple(axis),\n                   keepdims=keep_dims),"
  },
  {
    "id": "train-python-cosqa-train-13754",
    "code": "def getScriptLocation ( ) : location = os . path . abspath ( \"./\" ) if __file__ . rfind ( \"/\" ) != - 1 : location = __file__ [ : __file__ . rfind ( \"/\" ) ] return location",
    "text": "how to get python location",
    "label": 1,
    "raw": "def getScriptLocation():\n\t\"\"\"Helper function to get the location of a Python file.\"\"\"\n\tlocation = os.path.abspath(\"./\")\n\tif __file__.rfind(\"/\") != -1:\n\t\tlocation = __file__[:__file__.rfind(\"/\")]\n\treturn location"
  },
  {
    "id": "train-python-cosqa-train-8576",
    "code": "def safe_delete ( filename ) : try : os . unlink ( filename ) except OSError as e : if e . errno != errno . ENOENT : raise",
    "text": "python delete a file safely",
    "label": 1,
    "raw": "def safe_delete(filename):\n  \"\"\"Delete a file safely. If it's not present, no-op.\"\"\"\n  try:\n    os.unlink(filename)\n  except OSError as e:\n    if e.errno != errno.ENOENT:\n      raise"
  },
  {
    "id": "train-python-cosqa-train-18812",
    "code": "def inverted_dict ( d ) : return dict ( ( force_hashable ( v ) , k ) for ( k , v ) in viewitems ( dict ( d ) ) )",
    "text": "python invert a dict",
    "label": 1,
    "raw": "def inverted_dict(d):\n    \"\"\"Return a dict with swapped keys and values\n\n    >>> inverted_dict({0: ('a', 'b'), 1: 'cd'}) == {'cd': 1, ('a', 'b'): 0}\n    True\n    \"\"\"\n    return dict((force_hashable(v), k) for (k, v) in viewitems(dict(d)))"
  },
  {
    "id": "train-python-cosqa-train-7182",
    "code": "def imapchain ( * a , * * kwa ) : imap_results = map ( * a , * * kwa ) return itertools . chain ( * imap_results )",
    "text": "python multiprocessing map imap",
    "label": 1,
    "raw": "def imapchain(*a, **kwa):\n    \"\"\" Like map but also chains the results. \"\"\"\n\n    imap_results = map( *a, **kwa )\n    return itertools.chain( *imap_results )"
  },
  {
    "id": "train-python-cosqa-train-13570",
    "code": "def value ( self ) : if self . _prop . fget is None : raise AttributeError ( 'Unable to read attribute' ) return self . _prop . fget ( self . _obj )",
    "text": "python member property getter",
    "label": 1,
    "raw": "def value(self):\n        \"\"\"Value of property.\"\"\"\n        if self._prop.fget is None:\n            raise AttributeError('Unable to read attribute')\n        return self._prop.fget(self._obj)"
  },
  {
    "id": "train-python-cosqa-train-8442",
    "code": "def _update_bordercolor ( self , bordercolor ) : border_color = wx . SystemSettings_GetColour ( wx . SYS_COLOUR_ACTIVEBORDER ) border_color . SetRGB ( bordercolor ) self . linecolor_choice . SetColour ( border_color )",
    "text": "wxpython setting background color of static text",
    "label": 1,
    "raw": "def _update_bordercolor(self, bordercolor):\n        \"\"\"Updates background color\"\"\"\n\n        border_color = wx.SystemSettings_GetColour(wx.SYS_COLOUR_ACTIVEBORDER)\n        border_color.SetRGB(bordercolor)\n\n        self.linecolor_choice.SetColour(border_color)"
  },
  {
    "id": "train-python-cosqa-train-4793",
    "code": "def combinations ( l ) : result = [ ] for x in xrange ( len ( l ) - 1 ) : ls = l [ x + 1 : ] for y in ls : result . append ( ( l [ x ] , y ) ) return result",
    "text": "generate combinations of elements in a list python",
    "label": 1,
    "raw": "def combinations(l):\n    \"\"\"Pure-Python implementation of itertools.combinations(l, 2).\"\"\"\n    result = []\n    for x in xrange(len(l) - 1):\n        ls = l[x + 1:]\n        for y in ls:\n            result.append((l[x], y))\n    return result"
  },
  {
    "id": "train-python-cosqa-train-18459",
    "code": "def snake_case ( a_string ) : partial = re . sub ( '(.)([A-Z][a-z]+)' , r'\\1_\\2' , a_string ) return re . sub ( '([a-z0-9])([A-Z])' , r'\\1_\\2' , partial ) . lower ( )",
    "text": "lowercase + string object + python",
    "label": 1,
    "raw": "def snake_case(a_string):\n    \"\"\"Returns a snake cased version of a string.\n\n    :param a_string: any :class:`str` object.\n\n    Usage:\n        >>> snake_case('FooBar')\n        \"foo_bar\"\n    \"\"\"\n\n    partial = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', a_string)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', partial).lower()"
  },
  {
    "id": "train-python-cosqa-train-7303",
    "code": "def extract_table_names ( query ) : # a good old fashioned regex. turns out this worked better than actually parsing the code tables_blocks = re . findall ( r'(?:FROM|JOIN)\\s+(\\w+(?:\\s*,\\s*\\w+)*)' , query , re . IGNORECASE ) tables = [ tbl for block in tables_blocks for tbl in re . findall ( r'\\w+' , block ) ] return set ( tables )",
    "text": "how to extract tables of mysql database in python",
    "label": 1,
    "raw": "def extract_table_names(query):\n    \"\"\" Extract table names from an SQL query. \"\"\"\n    # a good old fashioned regex. turns out this worked better than actually parsing the code\n    tables_blocks = re.findall(r'(?:FROM|JOIN)\\s+(\\w+(?:\\s*,\\s*\\w+)*)', query, re.IGNORECASE)\n    tables = [tbl\n              for block in tables_blocks\n              for tbl in re.findall(r'\\w+', block)]\n    return set(tables)"
  },
  {
    "id": "train-python-cosqa-train-7511",
    "code": "def csv2yaml ( in_file , out_file = None ) : if out_file is None : out_file = \"%s.yaml\" % os . path . splitext ( in_file ) [ 0 ] barcode_ids = _generate_barcode_ids ( _read_input_csv ( in_file ) ) lanes = _organize_lanes ( _read_input_csv ( in_file ) , barcode_ids ) with open ( out_file , \"w\" ) as out_handle : out_handle . write ( yaml . safe_dump ( lanes , default_flow_style = False ) ) return out_file",
    "text": "how to merge multi yaml file into csv in python",
    "label": 1,
    "raw": "def csv2yaml(in_file, out_file=None):\n    \"\"\"Convert a CSV SampleSheet to YAML run_info format.\n    \"\"\"\n    if out_file is None:\n        out_file = \"%s.yaml\" % os.path.splitext(in_file)[0]\n    barcode_ids = _generate_barcode_ids(_read_input_csv(in_file))\n    lanes = _organize_lanes(_read_input_csv(in_file), barcode_ids)\n    with open(out_file, \"w\") as out_handle:\n        out_handle.write(yaml.safe_dump(lanes, default_flow_style=False))\n    return out_file"
  },
  {
    "id": "train-python-cosqa-train-14175",
    "code": "def join ( self ) : self . inputfeeder_thread . join ( ) self . pool . join ( ) self . resulttracker_thread . join ( ) self . failuretracker_thread . join ( )",
    "text": "python threading not running concurrent join",
    "label": 1,
    "raw": "def join(self):\n\t\t\"\"\"Note that the Executor must be close()'d elsewhere,\n\t\tor join() will never return.\n\t\t\"\"\"\n\t\tself.inputfeeder_thread.join()\n\t\tself.pool.join()\n\t\tself.resulttracker_thread.join()\n\t\tself.failuretracker_thread.join()"
  },
  {
    "id": "train-python-cosqa-train-6981",
    "code": "def get_week_start_end_day ( ) : t = date . today ( ) wd = t . weekday ( ) return ( t - timedelta ( wd ) , t + timedelta ( 6 - wd ) )",
    "text": "get previous week end and month end python",
    "label": 1,
    "raw": "def get_week_start_end_day():\n    \"\"\"\n    Get the week start date and end date\n    \"\"\"\n    t = date.today()\n    wd = t.weekday()\n    return (t - timedelta(wd), t + timedelta(6 - wd))"
  },
  {
    "id": "train-python-cosqa-train-16749",
    "code": "def stop ( self , reason = None ) : self . logger . info ( 'stopping' ) self . loop . stop ( pyev . EVBREAK_ALL )",
    "text": "stop window service python",
    "label": 1,
    "raw": "def stop(self, reason=None):\n        \"\"\"Shutdown the service with a reason.\"\"\"\n        self.logger.info('stopping')\n        self.loop.stop(pyev.EVBREAK_ALL)"
  },
  {
    "id": "train-python-cosqa-train-10947",
    "code": "def root_parent ( self , category = None ) : return next ( filter ( lambda c : c . is_root , self . hierarchy ( ) ) )",
    "text": "python get hierarchy of parent for an instance",
    "label": 1,
    "raw": "def root_parent(self, category=None):\n        \"\"\" Returns the topmost parent of the current category. \"\"\"\n        return next(filter(lambda c: c.is_root, self.hierarchy()))"
  },
  {
    "id": "train-python-cosqa-train-6338",
    "code": "def convolve_fft ( array , kernel ) : array = np . asarray ( array , dtype = np . complex ) kernel = np . asarray ( kernel , dtype = np . complex ) if array . ndim != kernel . ndim : raise ValueError ( \"Image and kernel must have same number of \" \"dimensions\" ) array_shape = array . shape kernel_shape = kernel . shape new_shape = np . array ( array_shape ) + np . array ( kernel_shape ) array_slices = [ ] kernel_slices = [ ] for ( new_dimsize , array_dimsize , kernel_dimsize ) in zip ( new_shape , array_shape , kernel_shape ) : center = new_dimsize - ( new_dimsize + 1 ) // 2 array_slices += [ slice ( center - array_dimsize // 2 , center + ( array_dimsize + 1 ) // 2 ) ] kernel_slices += [ slice ( center - kernel_dimsize // 2 , center + ( kernel_dimsize + 1 ) // 2 ) ] array_slices = tuple ( array_slices ) kernel_slices = tuple ( kernel_slices ) if not np . all ( new_shape == array_shape ) : big_array = np . zeros ( new_shape , dtype = np . complex ) big_array [ array_slices ] = array else : big_array = array if not np . all ( new_shape == kernel_shape ) : big_kernel = np . zeros ( new_shape , dtype = np . complex ) big_kernel [ kernel_slices ] = kernel else : big_kernel = kernel array_fft = np . fft . fftn ( big_array ) kernel_fft = np . fft . fftn ( np . fft . ifftshift ( big_kernel ) ) rifft = np . fft . ifftn ( array_fft * kernel_fft ) return rifft [ array_slices ] . real",
    "text": "python convolution kernel to fuse boundary",
    "label": 1,
    "raw": "def convolve_fft(array, kernel):\n    \"\"\"\n    Convolve an array with a kernel using FFT.\n    Implemntation based on the convolve_fft function from astropy.\n\n    https://github.com/astropy/astropy/blob/master/astropy/convolution/convolve.py\n    \"\"\"\n\n    array = np.asarray(array, dtype=np.complex)\n    kernel = np.asarray(kernel, dtype=np.complex)\n\n    if array.ndim != kernel.ndim:\n        raise ValueError(\"Image and kernel must have same number of \"\n                         \"dimensions\")\n\n    array_shape = array.shape\n    kernel_shape = kernel.shape\n    new_shape = np.array(array_shape) + np.array(kernel_shape)\n\n    array_slices = []\n    kernel_slices = []\n    for (new_dimsize, array_dimsize, kernel_dimsize) in zip(\n            new_shape, array_shape, kernel_shape):\n        center = new_dimsize - (new_dimsize + 1) // 2\n        array_slices += [slice(center - array_dimsize // 2,\n                         center + (array_dimsize + 1) // 2)]\n        kernel_slices += [slice(center - kernel_dimsize // 2,\n                          center + (kernel_dimsize + 1) // 2)]\n\n    array_slices = tuple(array_slices)\n    kernel_slices = tuple(kernel_slices)\n\n    if not np.all(new_shape == array_shape):\n        big_array = np.zeros(new_shape, dtype=np.complex)\n        big_array[array_slices] = array\n    else:\n        big_array = array\n\n    if not np.all(new_shape == kernel_shape):\n        big_kernel = np.zeros(new_shape, dtype=np.complex)\n        big_kernel[kernel_slices] = kernel\n    else:\n        big_kernel = kernel\n\n    array_fft = np.fft.fftn(big_array)\n    kernel_fft = np.fft.fftn(np.fft.ifftshift(big_kernel))\n\n    rifft = np.fft.ifftn(array_fft * kernel_fft)\n\n    return rifft[array_slices].real"
  },
  {
    "id": "train-python-cosqa-train-19414",
    "code": "def _kbhit_unix ( ) -> bool : dr , dw , de = select . select ( [ sys . stdin ] , [ ] , [ ] , 0 ) return dr != [ ]",
    "text": "python method for reading keypress? in linux",
    "label": 1,
    "raw": "def _kbhit_unix() -> bool:\n    \"\"\"\n    Under UNIX: is a keystroke available?\n    \"\"\"\n    dr, dw, de = select.select([sys.stdin], [], [], 0)\n    return dr != []"
  },
  {
    "id": "train-python-cosqa-train-13142",
    "code": "def get_list_dimensions ( _list ) : if isinstance ( _list , list ) or isinstance ( _list , tuple ) : return [ len ( _list ) ] + get_list_dimensions ( _list [ 0 ] ) return [ ]",
    "text": "python get shape of list of lists",
    "label": 1,
    "raw": "def get_list_dimensions(_list):\n    \"\"\"\n    Takes a nested list and returns the size of each dimension followed\n    by the element type in the list\n    \"\"\"\n    if isinstance(_list, list) or isinstance(_list, tuple):\n        return [len(_list)] + get_list_dimensions(_list[0])\n    return []"
  },
  {
    "id": "train-python-cosqa-train-8261",
    "code": "def column_stack_2d ( data ) : return list ( list ( itt . chain . from_iterable ( _ ) ) for _ in zip ( * data ) )",
    "text": "stack 2d lists python",
    "label": 1,
    "raw": "def column_stack_2d(data):\n    \"\"\"Perform column-stacking on a list of 2d data blocks.\"\"\"\n    return list(list(itt.chain.from_iterable(_)) for _ in zip(*data))"
  },
  {
    "id": "train-python-cosqa-train-14535",
    "code": "def rstjinja ( app , docname , source ) : # Make sure we're outputting HTML if app . builder . format != 'html' : return src = source [ 0 ] rendered = app . builder . templates . render_string ( src , app . config . html_context ) source [ 0 ] = rendered",
    "text": "run functions parrale flask python jinja2",
    "label": 1,
    "raw": "def rstjinja(app, docname, source):\n    \"\"\"\n    Render our pages as a jinja template for fancy templating goodness.\n    \"\"\"\n    # Make sure we're outputting HTML\n    if app.builder.format != 'html':\n        return\n    src = source[0]\n    rendered = app.builder.templates.render_string(\n        src, app.config.html_context\n    )\n    source[0] = rendered"
  },
  {
    "id": "train-python-cosqa-train-18099",
    "code": "def pack_bits ( longbits ) : byte = longbits & ( 0x0101010101010101 ) byte = ( byte | ( byte >> 7 ) ) & ( 0x0003000300030003 ) byte = ( byte | ( byte >> 14 ) ) & ( 0x0000000f0000000f ) byte = ( byte | ( byte >> 28 ) ) & ( 0x00000000000000ff ) return byte",
    "text": "how to parse bits into 32 bit in python chunk",
    "label": 1,
    "raw": "def pack_bits( longbits ):\n    \"\"\"Crunch a 64-bit int (8 bool bytes) into a bitfield.\"\"\"\n    byte = longbits & (0x0101010101010101)\n    byte = (byte | (byte>>7)) & (0x0003000300030003)\n    byte = (byte | (byte>>14)) & (0x0000000f0000000f)\n    byte = (byte | (byte>>28)) & (0x00000000000000ff)\n    return byte"
  },
  {
    "id": "train-python-cosqa-train-10288",
    "code": "def format_exc ( limit = None ) : try : etype , value , tb = sys . exc_info ( ) return '' . join ( traceback . format_exception ( etype , value , tb , limit ) ) finally : etype = value = tb = None",
    "text": "python 3 print excetion message",
    "label": 1,
    "raw": "def format_exc(limit=None):\n    \"\"\"Like print_exc() but return a string. Backport for Python 2.3.\"\"\"\n    try:\n        etype, value, tb = sys.exc_info()\n        return ''.join(traceback.format_exception(etype, value, tb, limit))\n    finally:\n        etype = value = tb = None"
  },
  {
    "id": "train-python-cosqa-train-18589",
    "code": "def clean ( ctx , text ) : text = conversions . to_string ( text , ctx ) return '' . join ( [ c for c in text if ord ( c ) >= 32 ] )",
    "text": "python remove non english charachters from a text",
    "label": 1,
    "raw": "def clean(ctx, text):\n    \"\"\"\n    Removes all non-printable characters from a text string\n    \"\"\"\n    text = conversions.to_string(text, ctx)\n    return ''.join([c for c in text if ord(c) >= 32])"
  },
  {
    "id": "train-python-cosqa-train-3420",
    "code": "def unique_element ( ll ) : seen = { } result = [ ] for item in ll : if item in seen : continue seen [ item ] = 1 result . append ( item ) return result",
    "text": "how to see the unique value in a list in python",
    "label": 1,
    "raw": "def unique_element(ll):\n    \"\"\" returns unique elements from a list preserving the original order \"\"\"\n    seen = {}\n    result = []\n    for item in ll:\n        if item in seen:\n            continue\n        seen[item] = 1\n        result.append(item)\n    return result"
  },
  {
    "id": "train-python-cosqa-train-11742",
    "code": "def m ( name = '' , * * kwargs ) : with Reflect . context ( * * kwargs ) as r : kwargs [ \"name\" ] = name instance = M_CLASS ( r , stream , * * kwargs ) instance ( )",
    "text": "how to profile object memory python3",
    "label": 1,
    "raw": "def m(name='', **kwargs):\n    \"\"\"\n    Print out memory usage at this point in time\n\n    http://docs.python.org/2/library/resource.html\n    http://stackoverflow.com/a/15448600/5006\n    http://stackoverflow.com/questions/110259/which-python-memory-profiler-is-recommended\n    \"\"\"\n    with Reflect.context(**kwargs) as r:\n        kwargs[\"name\"] = name\n        instance = M_CLASS(r, stream, **kwargs)\n        instance()"
  },
  {
    "id": "train-python-cosqa-train-9613",
    "code": "def clean ( some_string , uppercase = False ) : if uppercase : return some_string . strip ( ) . upper ( ) else : return some_string . strip ( ) . lower ( )",
    "text": "how to make string imput upper case in python 3",
    "label": 1,
    "raw": "def clean(some_string, uppercase=False):\n    \"\"\"\n    helper to clean up an input string\n    \"\"\"\n    if uppercase:\n        return some_string.strip().upper()\n    else:\n        return some_string.strip().lower()"
  },
  {
    "id": "train-python-cosqa-train-13083",
    "code": "def guess_media_type ( filepath ) : o = subprocess . check_output ( [ 'file' , '--mime-type' , '-Lb' , filepath ] ) o = o . strip ( ) return o",
    "text": "python get file mime type",
    "label": 1,
    "raw": "def guess_media_type(filepath):\n    \"\"\"Returns the media-type of the file at the given ``filepath``\"\"\"\n    o = subprocess.check_output(['file', '--mime-type', '-Lb', filepath])\n    o = o.strip()\n    return o"
  },
  {
    "id": "train-python-cosqa-train-12301",
    "code": "def is_palindrome ( string , strict = True ) : if is_full_string ( string ) : if strict : return reverse ( string ) == string return is_palindrome ( SPACES_RE . sub ( '' , string ) ) return False",
    "text": "program that says is word is palindrome python",
    "label": 1,
    "raw": "def is_palindrome(string, strict=True):\n    \"\"\"\n    Checks if the string is a palindrome (https://en.wikipedia.org/wiki/Palindrome).\n\n    :param string: String to check.\n    :type string: str\n    :param strict: True if white spaces matter (default), false otherwise.\n    :type strict: bool\n    :return: True if the string is a palindrome (like \"otto\", or \"i topi non avevano nipoti\" if strict=False),\n    False otherwise\n    \"\"\"\n    if is_full_string(string):\n        if strict:\n            return reverse(string) == string\n        return is_palindrome(SPACES_RE.sub('', string))\n    return False"
  },
  {
    "id": "train-python-cosqa-train-13460",
    "code": "def prepend_line ( filepath , line ) : with open ( filepath ) as f : lines = f . readlines ( ) lines . insert ( 0 , line ) with open ( filepath , 'w' ) as f : f . writelines ( lines )",
    "text": "how to append a line at top of file in python",
    "label": 1,
    "raw": "def prepend_line(filepath, line):\n    \"\"\"Rewrite a file adding a line to its beginning.\n    \"\"\"\n    with open(filepath) as f:\n        lines = f.readlines()\n\n    lines.insert(0, line)\n\n    with open(filepath, 'w') as f:\n        f.writelines(lines)"
  },
  {
    "id": "train-python-cosqa-train-11269",
    "code": "def cli_command_quit ( self , msg ) : if self . state == State . RUNNING and self . sprocess and self . sprocess . proc : self . sprocess . proc . kill ( ) else : sys . exit ( 0 )",
    "text": "how do you kill a program in python",
    "label": 1,
    "raw": "def cli_command_quit(self, msg):\n        \"\"\"\\\n        kills the child and exits\n        \"\"\"\n        if self.state == State.RUNNING and self.sprocess and self.sprocess.proc:\n            self.sprocess.proc.kill()\n        else:\n            sys.exit(0)"
  },
  {
    "id": "train-python-cosqa-train-17445",
    "code": "def _my_hash ( arg_list ) : # type: (List[Any]) -> int res = 0 for arg in arg_list : res = res * 31 + hash ( arg ) return res",
    "text": "hash function generates fixed length code in python",
    "label": 1,
    "raw": "def _my_hash(arg_list):\n    # type: (List[Any]) -> int\n    \"\"\"Simple helper hash function\"\"\"\n    res = 0\n    for arg in arg_list:\n        res = res * 31 + hash(arg)\n    return res"
  },
  {
    "id": "train-python-cosqa-dev-385",
    "code": "def getYamlDocument ( filePath ) : with open ( filePath ) as stream : doc = yaml . load ( stream ) return doc",
    "text": "yaml read file python",
    "label": 1,
    "raw": "def getYamlDocument(filePath):\n    \"\"\"\n    Return a yaml file's contents as a dictionary\n    \"\"\"\n    with open(filePath) as stream:\n        doc = yaml.load(stream)\n        return doc"
  },
  {
    "id": "train-python-cosqa-dev-15",
    "code": "def get_distance_matrix ( x ) : square = nd . sum ( x ** 2.0 , axis = 1 , keepdims = True ) distance_square = square + square . transpose ( ) - ( 2.0 * nd . dot ( x , x . transpose ( ) ) ) return nd . sqrt ( distance_square )",
    "text": "custom distance matrix python",
    "label": 1,
    "raw": "def get_distance_matrix(x):\n    \"\"\"Get distance matrix given a matrix. Used in testing.\"\"\"\n    square = nd.sum(x ** 2.0, axis=1, keepdims=True)\n    distance_square = square + square.transpose() - (2.0 * nd.dot(x, x.transpose()))\n    return nd.sqrt(distance_square)"
  },
  {
    "id": "train-python-cosqa-train-11728",
    "code": "def print ( * a ) : try : _print ( * a ) return a [ 0 ] if len ( a ) == 1 else a except : _print ( * a )",
    "text": "how to print only one return value in python",
    "label": 1,
    "raw": "def print(*a):\n    \"\"\" print just one that returns what you give it instead of None \"\"\"\n    try:\n        _print(*a)\n        return a[0] if len(a) == 1 else a\n    except:\n        _print(*a)"
  },
  {
    "id": "train-python-cosqa-train-13379",
    "code": "def partition_all ( n , iterable ) : it = iter ( iterable ) while True : chunk = list ( itertools . islice ( it , n ) ) if not chunk : break yield chunk",
    "text": "python integer partition all permutations of certain size",
    "label": 1,
    "raw": "def partition_all(n, iterable):\n    \"\"\"Partition a list into equally sized pieces, including last smaller parts\n    http://stackoverflow.com/questions/5129102/python-equivalent-to-clojures-partition-all\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            break\n        yield chunk"
  },
  {
    "id": "train-python-cosqa-train-9079",
    "code": "def __getitem__ ( self , index ) : row , col = index return self . rows [ row ] [ col ]",
    "text": "get item at index in python",
    "label": 1,
    "raw": "def __getitem__(self, index):\n    \"\"\"Get the item at the given index.\n\n    Index is a tuple of (row, col)\n    \"\"\"\n    row, col = index\n    return self.rows[row][col]"
  },
  {
    "id": "train-python-cosqa-train-16436",
    "code": "def trap_exceptions ( results , handler , exceptions = Exception ) : try : for result in results : yield result except exceptions as exc : for result in always_iterable ( handler ( exc ) ) : yield result",
    "text": "python yield catch except",
    "label": 1,
    "raw": "def trap_exceptions(results, handler, exceptions=Exception):\n\t\"\"\"\n\tIterate through the results, but if an exception occurs, stop\n\tprocessing the results and instead replace\n\tthe results with the output from the exception handler.\n\t\"\"\"\n\ttry:\n\t\tfor result in results:\n\t\t\tyield result\n\texcept exceptions as exc:\n\t\tfor result in always_iterable(handler(exc)):\n\t\t\tyield result"
  },
  {
    "id": "train-python-cosqa-train-12318",
    "code": "def dedupe_list ( seq ) : seen = set ( ) return [ x for x in seq if not ( x in seen or seen . add ( x ) ) ]",
    "text": "remove duplicated list python",
    "label": 1,
    "raw": "def dedupe_list(seq):\n    \"\"\"\n    Utility function to remove duplicates from a list\n    :param seq: The sequence (list) to deduplicate\n    :return: A list with original duplicates removed\n    \"\"\"\n    seen = set()\n    return [x for x in seq if not (x in seen or seen.add(x))]"
  },
  {
    "id": "train-python-cosqa-train-18391",
    "code": "def get_file_extension ( filename ) : filename_x = filename . split ( '.' ) if len ( filename_x ) > 1 : if filename_x [ - 1 ] . strip ( ) is not '' : return filename_x [ - 1 ] return None",
    "text": "python how to get the file extension",
    "label": 1,
    "raw": "def get_file_extension(filename):\n    \"\"\" Return the extension if the filename has it. None if not.\n\n    :param filename: The filename.\n    :return: Extension or None.\n    \"\"\"\n    filename_x = filename.split('.')\n    if len(filename_x) > 1:\n        if filename_x[-1].strip() is not '':\n            return filename_x[-1]\n    return None"
  },
  {
    "id": "train-python-cosqa-train-11669",
    "code": "def readme ( ) : try : import pypandoc readme_content = pypandoc . convert ( 'README.md' , 'rst' ) except ( IOError , ImportError ) : print ( \"Warning: no pypandoc module found.\" ) try : readme_content = open ( 'README.md' ) . read ( ) except IOError : readme_content = '' return readme_content",
    "text": "python pypdf2 read document",
    "label": 1,
    "raw": "def readme():\n    \"\"\"Try converting the README to an RST document. Return it as is on failure.\"\"\"\n    try:\n        import pypandoc\n        readme_content = pypandoc.convert('README.md', 'rst')\n    except(IOError, ImportError):\n        print(\"Warning: no pypandoc module found.\")\n        try:\n            readme_content = open('README.md').read()\n        except IOError:\n            readme_content = ''\n    return readme_content"
  },
  {
    "id": "train-python-cosqa-train-17965",
    "code": "def string ( value ) -> str : return system_json . dumps ( Json ( value ) . safe_object ( ) , ensure_ascii = False )",
    "text": "python json value as string",
    "label": 1,
    "raw": "def string(value) -> str:\n        \"\"\" string dict/object/value to JSON \"\"\"\n        return system_json.dumps(Json(value).safe_object(), ensure_ascii=False)"
  },
  {
    "id": "train-python-cosqa-train-14186",
    "code": "def _make_sql_params ( self , kw ) : return [ '%s=?' % k for k in kw . keys ( ) ] for k , v in kw . iteritems ( ) : vals . append ( '%s=?' % k ) return vals",
    "text": "how to write sql queries with variables python",
    "label": 1,
    "raw": "def _make_sql_params(self,kw):\n        \"\"\"Make a list of strings to pass to an SQL statement\n        from the dictionary kw with Python types\"\"\"\n        return ['%s=?' %k for k in kw.keys() ]\n        for k,v in kw.iteritems():\n            vals.append('%s=?' %k)\n        return vals"
  },
  {
    "id": "train-python-cosqa-dev-575",
    "code": "def close_all ( ) : # Windows can be closed by releasing all references to them so they can be # garbage collected. May not be necessary to call close(). global _qtg_windows for window in _qtg_windows : window . close ( ) _qtg_windows = [ ] global _qtg_widgets for widget in _qtg_widgets : widget . close ( ) _qtg_widgets = [ ] global _plt_figures for fig in _plt_figures : _ , plt , _ = _import_plt ( ) plt . close ( fig ) _plt_figures = [ ]",
    "text": "how to close figure windows opened in a loop in python",
    "label": 1,
    "raw": "def close_all():\n    r\"\"\"Close all opened windows.\"\"\"\n\n    # Windows can be closed by releasing all references to them so they can be\n    # garbage collected. May not be necessary to call close().\n    global _qtg_windows\n    for window in _qtg_windows:\n        window.close()\n    _qtg_windows = []\n\n    global _qtg_widgets\n    for widget in _qtg_widgets:\n        widget.close()\n    _qtg_widgets = []\n\n    global _plt_figures\n    for fig in _plt_figures:\n        _, plt, _ = _import_plt()\n        plt.close(fig)\n    _plt_figures = []"
  },
  {
    "id": "train-python-cosqa-train-19759",
    "code": "def cli_run ( ) : parser = argparse . ArgumentParser ( description = 'Stupidly simple code answers from StackOverflow' ) parser . add_argument ( 'query' , help = \"What's the problem ?\" , type = str , nargs = '+' ) parser . add_argument ( '-t' , '--tags' , help = 'semicolon separated tags -> python;lambda' ) args = parser . parse_args ( ) main ( args )",
    "text": "python argparse specify flad",
    "label": 1,
    "raw": "def cli_run():\n    \"\"\"docstring for argparse\"\"\"\n    parser = argparse.ArgumentParser(description='Stupidly simple code answers from StackOverflow')\n    parser.add_argument('query', help=\"What's the problem ?\", type=str, nargs='+')\n    parser.add_argument('-t','--tags', help='semicolon separated tags -> python;lambda')\n    args = parser.parse_args()\n    main(args)"
  },
  {
    "id": "train-python-cosqa-train-9568",
    "code": "def run ( self , forever = True ) : loop = self . create_connection ( ) self . add_signal_handlers ( ) if forever : loop . run_forever ( )",
    "text": "how to make a python bot run continuously",
    "label": 1,
    "raw": "def run(self, forever=True):\n        \"\"\"start the bot\"\"\"\n        loop = self.create_connection()\n        self.add_signal_handlers()\n        if forever:\n            loop.run_forever()"
  },
  {
    "id": "train-python-cosqa-train-19548",
    "code": "def memory_full ( ) : current_process = psutil . Process ( os . getpid ( ) ) return ( current_process . memory_percent ( ) > config . MAXIMUM_CACHE_MEMORY_PERCENTAGE )",
    "text": "linux python memcache return none",
    "label": 1,
    "raw": "def memory_full():\n    \"\"\"Check if the memory is too full for further caching.\"\"\"\n    current_process = psutil.Process(os.getpid())\n    return (current_process.memory_percent() >\n            config.MAXIMUM_CACHE_MEMORY_PERCENTAGE)"
  },
  {
    "id": "train-python-cosqa-train-13849",
    "code": "def is_valid_regex ( string ) : try : re . compile ( string ) is_valid = True except re . error : is_valid = False return is_valid",
    "text": "python regular expression to check validity",
    "label": 1,
    "raw": "def is_valid_regex(string):\n    \"\"\"\n    Checks whether the re module can compile the given regular expression.\n\n    Parameters\n    ----------\n    string: str\n\n    Returns\n    -------\n    boolean\n    \"\"\"\n    try:\n        re.compile(string)\n        is_valid = True\n    except re.error:\n        is_valid = False\n    return is_valid"
  },
  {
    "id": "train-python-cosqa-train-6607",
    "code": "def file_writelines_flush_sync ( path , lines ) : fp = open ( path , 'w' ) try : fp . writelines ( lines ) flush_sync_file_object ( fp ) finally : fp . close ( )",
    "text": "python file auto flush",
    "label": 1,
    "raw": "def file_writelines_flush_sync(path, lines):\n    \"\"\"\n    Fill file at @path with @lines then flush all buffers\n    (Python and system buffers)\n    \"\"\"\n    fp = open(path, 'w')\n    try:\n        fp.writelines(lines)\n        flush_sync_file_object(fp)\n    finally:\n        fp.close()"
  },
  {
    "id": "train-python-cosqa-train-7629",
    "code": "def security ( self ) : return { k : v for i in self . pdf . resolvedObjects . items ( ) for k , v in i [ 1 ] . items ( ) }",
    "text": "python set pdf properties",
    "label": 1,
    "raw": "def security(self):\n        \"\"\"Print security object information for a pdf document\"\"\"\n        return {k: v for i in self.pdf.resolvedObjects.items() for k, v in i[1].items()}"
  },
  {
    "id": "train-python-cosqa-train-14408",
    "code": "def _readuntil ( f , end = _TYPE_END ) : buf = bytearray ( ) byte = f . read ( 1 ) while byte != end : if byte == b'' : raise ValueError ( 'File ended unexpectedly. Expected end byte {}.' . format ( end ) ) buf += byte byte = f . read ( 1 ) return buf",
    "text": "read file python until character",
    "label": 1,
    "raw": "def _readuntil(f, end=_TYPE_END):\n\t\"\"\"Helper function to read bytes until a certain end byte is hit\"\"\"\n\tbuf = bytearray()\n\tbyte = f.read(1)\n\twhile byte != end:\n\t\tif byte == b'':\n\t\t\traise ValueError('File ended unexpectedly. Expected end byte {}.'.format(end))\n\t\tbuf += byte\n\t\tbyte = f.read(1)\n\treturn buf"
  },
  {
    "id": "train-python-cosqa-train-6041",
    "code": "def cint32_array_to_numpy ( cptr , length ) : if isinstance ( cptr , ctypes . POINTER ( ctypes . c_int32 ) ) : return np . fromiter ( cptr , dtype = np . int32 , count = length ) else : raise RuntimeError ( 'Expected int pointer' )",
    "text": "python array to c pointer",
    "label": 1,
    "raw": "def cint32_array_to_numpy(cptr, length):\n    \"\"\"Convert a ctypes int pointer array to a numpy array.\"\"\"\n    if isinstance(cptr, ctypes.POINTER(ctypes.c_int32)):\n        return np.fromiter(cptr, dtype=np.int32, count=length)\n    else:\n        raise RuntimeError('Expected int pointer')"
  },
  {
    "id": "train-python-cosqa-train-13600",
    "code": "def _is_root ( ) : import os import ctypes try : return os . geteuid ( ) == 0 except AttributeError : return ctypes . windll . shell32 . IsUserAnAdmin ( ) != 0 return False",
    "text": "python modles have execute access to root and not user in linux",
    "label": 1,
    "raw": "def _is_root():\n    \"\"\"Checks if the user is rooted.\"\"\"\n    import os\n    import ctypes\n    try:\n        return os.geteuid() == 0\n    except AttributeError:\n        return ctypes.windll.shell32.IsUserAnAdmin() != 0\n    return False"
  },
  {
    "id": "train-python-cosqa-train-5379",
    "code": "def strip_spaces ( value , sep = None , join = True ) : value = value . strip ( ) value = [ v . strip ( ) for v in value . split ( sep ) ] join_sep = sep or ' ' return join_sep . join ( value ) if join else value",
    "text": "python remove brackets and commas from list",
    "label": 1,
    "raw": "def strip_spaces(value, sep=None, join=True):\n    \"\"\"Cleans trailing whitespaces and replaces also multiple whitespaces with a single space.\"\"\"\n    value = value.strip()\n    value = [v.strip() for v in value.split(sep)]\n    join_sep = sep or ' '\n    return join_sep.join(value) if join else value"
  },
  {
    "id": "train-python-cosqa-train-6940",
    "code": "def ancestors ( self , node ) : if isinstance ( node , int ) : warnings . warn ( 'Calling ancestors() with a node id is deprecated,' ' use a DAGNode instead' , DeprecationWarning , 2 ) node = self . _id_to_node [ node ] return nx . ancestors ( self . _multi_graph , node )",
    "text": "get ancestors of a node networkx python",
    "label": 1,
    "raw": "def ancestors(self, node):\n        \"\"\"Returns set of the ancestors of a node as DAGNodes.\"\"\"\n        if isinstance(node, int):\n            warnings.warn('Calling ancestors() with a node id is deprecated,'\n                          ' use a DAGNode instead',\n                          DeprecationWarning, 2)\n            node = self._id_to_node[node]\n\n        return nx.ancestors(self._multi_graph, node)"
  },
  {
    "id": "train-python-cosqa-train-7951",
    "code": "def memory_usage ( method ) : def wrapper ( * args , * * kwargs ) : logging . info ( 'Memory before method %s is %s.' , method . __name__ , runtime . memory_usage ( ) . current ( ) ) result = method ( * args , * * kwargs ) logging . info ( 'Memory after method %s is %s' , method . __name__ , runtime . memory_usage ( ) . current ( ) ) return result return wrapper",
    "text": "measure duration of python function call",
    "label": 1,
    "raw": "def memory_usage(method):\n  \"\"\"Log memory usage before and after a method.\"\"\"\n  def wrapper(*args, **kwargs):\n    logging.info('Memory before method %s is %s.',\n                 method.__name__, runtime.memory_usage().current())\n    result = method(*args, **kwargs)\n    logging.info('Memory after method %s is %s',\n                 method.__name__, runtime.memory_usage().current())\n    return result\n  return wrapper"
  },
  {
    "id": "train-python-cosqa-train-15579",
    "code": "def get_absolute_path ( * args ) : directory = os . path . dirname ( os . path . abspath ( __file__ ) ) return os . path . join ( directory , * args )",
    "text": "how do i make relative directory name in python",
    "label": 1,
    "raw": "def get_absolute_path(*args):\n    \"\"\"Transform relative pathnames into absolute pathnames.\"\"\"\n    directory = os.path.dirname(os.path.abspath(__file__))\n    return os.path.join(directory, *args)"
  },
  {
    "id": "train-python-cosqa-train-9571",
    "code": "def compute_depth ( self ) : left_depth = self . left_node . compute_depth ( ) if self . left_node else 0 right_depth = self . right_node . compute_depth ( ) if self . right_node else 0 return 1 + max ( left_depth , right_depth )",
    "text": "python recursion sum of the left leaves",
    "label": 1,
    "raw": "def compute_depth(self):\n        \"\"\"\n        Recursively computes true depth of the subtree. Should only\n        be needed for debugging. Unless something is wrong, the\n        depth field should reflect the correct depth of the subtree.\n        \"\"\"\n        left_depth = self.left_node.compute_depth() if self.left_node else 0\n        right_depth = self.right_node.compute_depth() if self.right_node else 0\n        return 1 + max(left_depth, right_depth)"
  },
  {
    "id": "train-python-cosqa-train-6051",
    "code": "def get_closest_index ( myList , myNumber ) : closest_values_index = _np . where ( self . time == take_closest ( myList , myNumber ) ) [ 0 ] [ 0 ] return closest_values_index",
    "text": "select nearest value in list python",
    "label": 1,
    "raw": "def get_closest_index(myList, myNumber):\n    \"\"\"\n    Assumes myList is sorted. Returns closest value to myNumber.\n    If two numbers are equally close, return the smallest number.\n\n    Parameters\n    ----------\n    myList : array\n        The list in which to find the closest value to myNumber\n    myNumber : float\n        The number to find the closest to in MyList\n\n    Returns\n    -------\n    closest_values_index : int\n        The index in the array of the number closest to myNumber in myList\n    \"\"\"\n    closest_values_index = _np.where(self.time == take_closest(myList, myNumber))[0][0]\n    return closest_values_index"
  },
  {
    "id": "train-python-cosqa-train-1873",
    "code": "def log_y_cb ( self , w , val ) : self . tab_plot . logy = val self . plot_two_columns ( )",
    "text": "setting yaxis as log in python",
    "label": 1,
    "raw": "def log_y_cb(self, w, val):\n        \"\"\"Toggle linear/log scale for Y-axis.\"\"\"\n        self.tab_plot.logy = val\n        self.plot_two_columns()"
  },
  {
    "id": "train-python-cosqa-train-2880",
    "code": "def get_geoip ( ip ) : reader = geolite2 . reader ( ) ip_data = reader . get ( ip ) or { } return ip_data . get ( 'country' , { } ) . get ( 'iso_code' )",
    "text": "python lookup country based on lat long",
    "label": 1,
    "raw": "def get_geoip(ip):\n    \"\"\"Lookup country for IP address.\"\"\"\n    reader = geolite2.reader()\n    ip_data = reader.get(ip) or {}\n    return ip_data.get('country', {}).get('iso_code')"
  },
  {
    "id": "train-python-cosqa-train-88",
    "code": "def relative_path ( path ) : return os . path . join ( os . path . dirname ( __file__ ) , path )",
    "text": "best way to give file path in python",
    "label": 1,
    "raw": "def relative_path(path):\n    \"\"\"\n    Return the given path relative to this file.\n    \"\"\"\n    return os.path.join(os.path.dirname(__file__), path)"
  },
  {
    "id": "train-python-cosqa-train-12159",
    "code": "def memory_usage ( method ) : def wrapper ( * args , * * kwargs ) : logging . info ( 'Memory before method %s is %s.' , method . __name__ , runtime . memory_usage ( ) . current ( ) ) result = method ( * args , * * kwargs ) logging . info ( 'Memory after method %s is %s' , method . __name__ , runtime . memory_usage ( ) . current ( ) ) return result return wrapper",
    "text": "measuring time elapsed during function execution in python",
    "label": 1,
    "raw": "def memory_usage(method):\n  \"\"\"Log memory usage before and after a method.\"\"\"\n  def wrapper(*args, **kwargs):\n    logging.info('Memory before method %s is %s.',\n                 method.__name__, runtime.memory_usage().current())\n    result = method(*args, **kwargs)\n    logging.info('Memory after method %s is %s',\n                 method.__name__, runtime.memory_usage().current())\n    return result\n  return wrapper"
  },
  {
    "id": "train-python-cosqa-train-12843",
    "code": "def return_letters_from_string ( text ) : out = \"\" for letter in text : if letter . isalpha ( ) : out += letter return out",
    "text": "can i grab each letter in a string python",
    "label": 1,
    "raw": "def return_letters_from_string(text):\n    \"\"\"Get letters from string only.\"\"\"\n    out = \"\"\n    for letter in text:\n        if letter.isalpha():\n            out += letter\n    return out"
  },
  {
    "id": "train-python-cosqa-train-10204",
    "code": "def DeleteIndex ( self , index ) : to_remove = None for i in self . Items : if i . index == index : to_remove = i if to_remove : self . Items . remove ( to_remove )",
    "text": "remove a item in a series by its index python",
    "label": 1,
    "raw": "def DeleteIndex(self, index):\n        \"\"\"\n        Remove a spent coin based on its index.\n\n        Args:\n            index (int):\n        \"\"\"\n        to_remove = None\n        for i in self.Items:\n            if i.index == index:\n                to_remove = i\n\n        if to_remove:\n            self.Items.remove(to_remove)"
  },
  {
    "id": "train-python-cosqa-train-5752",
    "code": "def get_table_names ( connection ) : cursor = connection . cursor ( ) cursor . execute ( \"SELECT name FROM sqlite_master WHERE type == 'table'\" ) return [ name for ( name , ) in cursor ]",
    "text": "list of tables in database sql in python",
    "label": 1,
    "raw": "def get_table_names(connection):\n\t\"\"\"\n\tReturn a list of the table names in the database.\n\t\"\"\"\n\tcursor = connection.cursor()\n\tcursor.execute(\"SELECT name FROM sqlite_master WHERE type == 'table'\")\n\treturn [name for (name,) in cursor]"
  },
  {
    "id": "train-python-cosqa-train-13599",
    "code": "def copy ( a ) : shared = anonymousmemmap ( a . shape , dtype = a . dtype ) shared [ : ] = a [ : ] return shared",
    "text": "how to copy the shape of an array in python",
    "label": 1,
    "raw": "def copy(a):\n    \"\"\" Copy an array to the shared memory. \n\n        Notes\n        -----\n        copy is not always necessary because the private memory is always copy-on-write.\n\n        Use :code:`a = copy(a)` to immediately dereference the old 'a' on private memory\n    \"\"\"\n    shared = anonymousmemmap(a.shape, dtype=a.dtype)\n    shared[:] = a[:]\n    return shared"
  },
  {
    "id": "train-python-cosqa-train-11769",
    "code": "def method ( func ) : attr = abc . abstractmethod ( func ) attr . __imethod__ = True return attr",
    "text": "how to redefine a method python overload",
    "label": 1,
    "raw": "def method(func):\n    \"\"\"Wrap a function as a method.\"\"\"\n    attr = abc.abstractmethod(func)\n    attr.__imethod__ = True\n    return attr"
  },
  {
    "id": "train-python-cosqa-train-1643",
    "code": "def is_real_floating_dtype ( dtype ) : dtype = np . dtype ( dtype ) return np . issubsctype ( getattr ( dtype , 'base' , None ) , np . floating )",
    "text": "python, how to check the dtype of a variable",
    "label": 1,
    "raw": "def is_real_floating_dtype(dtype):\n    \"\"\"Return ``True`` if ``dtype`` is a real floating point type.\"\"\"\n    dtype = np.dtype(dtype)\n    return np.issubsctype(getattr(dtype, 'base', None), np.floating)"
  },
  {
    "id": "train-python-cosqa-train-12949",
    "code": "def fit_linear ( X , y ) : model = linear_model . LinearRegression ( ) model . fit ( X , y ) return model",
    "text": "python fit linear regression and plot",
    "label": 1,
    "raw": "def fit_linear(X, y):\n    \"\"\"\n    Uses OLS to fit the regression.\n    \"\"\"\n    model = linear_model.LinearRegression()\n    model.fit(X, y)\n    return model"
  },
  {
    "id": "train-python-cosqa-dev-245",
    "code": "def isetdiff_flags ( list1 , list2 ) : set2 = set ( list2 ) return ( item not in set2 for item in list1 )",
    "text": "python how to compare 2 list to identify id's not in one list",
    "label": 1,
    "raw": "def isetdiff_flags(list1, list2):\n    \"\"\"\n    move to util_iter\n    \"\"\"\n    set2 = set(list2)\n    return (item not in set2 for item in list1)"
  },
  {
    "id": "train-python-cosqa-train-12133",
    "code": "def register_view ( self , view ) : super ( ListViewController , self ) . register_view ( view ) self . tree_view . connect ( 'button_press_event' , self . mouse_click )",
    "text": "python treeview mouse over event",
    "label": 1,
    "raw": "def register_view(self, view):\n        \"\"\"Register callbacks for button press events and selection changed\"\"\"\n        super(ListViewController, self).register_view(view)\n        self.tree_view.connect('button_press_event', self.mouse_click)"
  },
  {
    "id": "train-python-cosqa-train-11700",
    "code": "def timedcall ( executable_function , * args ) : time_start = time . clock ( ) result = executable_function ( * args ) time_end = time . clock ( ) return ( time_end - time_start , result )",
    "text": "how to measure execution time of python function",
    "label": 1,
    "raw": "def timedcall(executable_function, *args):\n    \"\"\"!\n    @brief Executes specified method or function with measuring of execution time.\n    \n    @param[in] executable_function (pointer): Pointer to function or method.\n    @param[in] args (*): Arguments of called function or method.\n    \n    @return (tuple) Execution time and result of execution of function or method (execution_time, result_execution).\n    \n    \"\"\"\n    \n    time_start = time.clock();\n    result = executable_function(*args);\n    time_end = time.clock();\n    \n    return (time_end - time_start, result);"
  },
  {
    "id": "train-python-cosqa-train-14230",
    "code": "def logout ( cache ) : cache . set ( flask . session [ 'auth0_key' ] , None ) flask . session . clear ( ) return True",
    "text": "invalidate old session after authantification python flask",
    "label": 1,
    "raw": "def logout(cache):\n    \"\"\"\n    Logs out the current session by removing it from the cache. This is\n    expected to only occur when a session has\n    \"\"\"\n    cache.set(flask.session['auth0_key'], None)\n    flask.session.clear()\n    return True"
  },
  {
    "id": "train-python-cosqa-train-9504",
    "code": "def _stream_docker_logs ( self ) : thread = threading . Thread ( target = self . _stderr_stream_worker ) thread . start ( ) for line in self . docker_client . logs ( self . container , stdout = True , stderr = False , stream = True ) : sys . stdout . write ( line ) thread . join ( )",
    "text": "python print stream docker log",
    "label": 1,
    "raw": "def _stream_docker_logs(self):\n        \"\"\"Stream stdout and stderr from the task container to this\n        process's stdout and stderr, respectively.\n        \"\"\"\n        thread = threading.Thread(target=self._stderr_stream_worker)\n        thread.start()\n        for line in self.docker_client.logs(self.container, stdout=True,\n                                            stderr=False, stream=True):\n            sys.stdout.write(line)\n        thread.join()"
  },
  {
    "id": "train-python-cosqa-train-1026",
    "code": "def perform_pca ( A ) : # First subtract the mean M = ( A - numpy . mean ( A . T , axis = 1 ) ) . T # Get eigenvectors and values of covariance matrix return numpy . linalg . eig ( numpy . cov ( M ) )",
    "text": "python pca based on covariance matrix",
    "label": 1,
    "raw": "def perform_pca(A):\n    \"\"\"\n    Computes eigenvalues and eigenvectors of covariance matrix of A.\n    The rows of a correspond to observations, the columns to variables.\n    \"\"\"\n    # First subtract the mean\n    M = (A-numpy.mean(A.T, axis=1)).T\n    # Get eigenvectors and values of covariance matrix\n    return numpy.linalg.eig(numpy.cov(M))"
  },
  {
    "id": "train-python-cosqa-train-11251",
    "code": "def last_day ( year = _year , month = _month ) : last_day = calendar . monthrange ( year , month ) [ 1 ] return datetime . date ( year = year , month = month , day = last_day )",
    "text": "python is last date of month",
    "label": 1,
    "raw": "def last_day(year=_year, month=_month):\n    \"\"\"\n    get the current month's last day\n    :param year:  default to current year\n    :param month:  default to current month\n    :return: month's last day\n    \"\"\"\n    last_day = calendar.monthrange(year, month)[1]\n    return datetime.date(year=year, month=month, day=last_day)"
  },
  {
    "id": "train-python-cosqa-train-14250",
    "code": "def json_dumps ( self , obj ) : return json . dumps ( obj , sort_keys = True , indent = 4 , separators = ( ',' , ': ' ) )",
    "text": "json dump dictionary minus key python",
    "label": 1,
    "raw": "def json_dumps(self, obj):\n        \"\"\"Serializer for consistency\"\"\"\n        return json.dumps(obj, sort_keys=True, indent=4, separators=(',', ': '))"
  },
  {
    "id": "train-python-cosqa-train-14008",
    "code": "def reset ( self ) : self . __iterator , self . __saved = itertools . tee ( self . __saved )",
    "text": "how to reset an iterator python",
    "label": 1,
    "raw": "def reset(self):\n\t\t\"\"\"\n\t\tResets the iterator to the start.\n\n\t\tAny remaining values in the current iteration are discarded.\n\t\t\"\"\"\n\t\tself.__iterator, self.__saved = itertools.tee(self.__saved)"
  },
  {
    "id": "train-python-cosqa-train-12300",
    "code": "def redirect_stdout ( new_stdout ) : old_stdout , sys . stdout = sys . stdout , new_stdout try : yield None finally : sys . stdout = old_stdout",
    "text": "redirect stdout python global",
    "label": 1,
    "raw": "def redirect_stdout(new_stdout):\n    \"\"\"Redirect the stdout\n\n    Args:\n        new_stdout (io.StringIO): New stdout to use instead\n    \"\"\"\n    old_stdout, sys.stdout = sys.stdout, new_stdout\n    try:\n        yield None\n    finally:\n        sys.stdout = old_stdout"
  },
  {
    "id": "train-python-cosqa-train-9050",
    "code": "def get_neg_infinity ( dtype ) : if issubclass ( dtype . type , ( np . floating , np . integer ) ) : return - np . inf if issubclass ( dtype . type , np . complexfloating ) : return - np . inf - 1j * np . inf return NINF",
    "text": "python how to make an infinity sign",
    "label": 1,
    "raw": "def get_neg_infinity(dtype):\n    \"\"\"Return an appropriate positive infinity for this dtype.\n\n    Parameters\n    ----------\n    dtype : np.dtype\n\n    Returns\n    -------\n    fill_value : positive infinity value corresponding to this dtype.\n    \"\"\"\n    if issubclass(dtype.type, (np.floating, np.integer)):\n        return -np.inf\n\n    if issubclass(dtype.type, np.complexfloating):\n        return -np.inf - 1j * np.inf\n\n    return NINF"
  },
  {
    "id": "train-python-cosqa-train-8525",
    "code": "def downcaseTokens ( s , l , t ) : return [ tt . lower ( ) for tt in map ( _ustr , t ) ]",
    "text": "apply lowercase function in series python",
    "label": 1,
    "raw": "def downcaseTokens(s,l,t):\n    \"\"\"Helper parse action to convert tokens to lower case.\"\"\"\n    return [ tt.lower() for tt in map(_ustr,t) ]"
  },
  {
    "id": "train-python-cosqa-train-6982",
    "code": "def match_files ( files , pattern : Pattern ) : for name in files : if re . match ( pattern , name ) : yield name",
    "text": "python iterate directory for filenames with filter",
    "label": 1,
    "raw": "def match_files(files, pattern: Pattern):\n    \"\"\"Yields file name if matches a regular expression pattern.\"\"\"\n\n    for name in files:\n        if re.match(pattern, name):\n            yield name"
  },
  {
    "id": "train-python-cosqa-train-10697",
    "code": "def read_string ( buff , byteorder = 'big' ) : length = read_numeric ( USHORT , buff , byteorder ) return buff . read ( length ) . decode ( 'utf-8' )",
    "text": "python determining bytes on a buffered reader",
    "label": 1,
    "raw": "def read_string(buff, byteorder='big'):\n    \"\"\"Read a string from a file-like object.\"\"\"\n    length = read_numeric(USHORT, buff, byteorder)\n    return buff.read(length).decode('utf-8')"
  },
  {
    "id": "train-python-cosqa-train-3073",
    "code": "def _match_space_at_line ( line ) : regex = re . compile ( r\"^{0}$\" . format ( _MDL_COMMENT ) ) return regex . match ( line )",
    "text": "how to detect blank line in python",
    "label": 1,
    "raw": "def _match_space_at_line(line):\n    \"\"\"Return a re.match object if an empty comment was found on line.\"\"\"\n    regex = re.compile(r\"^{0}$\".format(_MDL_COMMENT))\n    return regex.match(line)"
  },
  {
    "id": "train-python-cosqa-train-18756",
    "code": "def cmd_dot ( conf : Config ) : build_context = BuildContext ( conf ) populate_targets_graph ( build_context , conf ) if conf . output_dot_file is None : write_dot ( build_context , conf , sys . stdout ) else : with open ( conf . output_dot_file , 'w' ) as out_file : write_dot ( build_context , conf , out_file )",
    "text": "python graphviz windows dot",
    "label": 1,
    "raw": "def cmd_dot(conf: Config):\n    \"\"\"Print out a neat targets dependency tree based on requested targets.\n\n    Use graphviz to render the dot file, e.g.:\n\n    > ybt dot :foo :bar | dot -Tpng -o graph.png\n    \"\"\"\n    build_context = BuildContext(conf)\n    populate_targets_graph(build_context, conf)\n    if conf.output_dot_file is None:\n        write_dot(build_context, conf, sys.stdout)\n    else:\n        with open(conf.output_dot_file, 'w') as out_file:\n            write_dot(build_context, conf, out_file)"
  },
  {
    "id": "train-python-cosqa-train-12752",
    "code": "def setDictDefaults ( d , defaults ) : for key , val in defaults . items ( ) : d . setdefault ( key , val ) return d",
    "text": "python default dict with default dict",
    "label": 1,
    "raw": "def setDictDefaults (d, defaults):\n  \"\"\"Sets all defaults for the given dictionary to those contained in a\n  second defaults dictionary.  This convenience method calls:\n\n    d.setdefault(key, value)\n\n  for each key and value in the given defaults dictionary.\n  \"\"\"\n  for key, val in defaults.items():\n    d.setdefault(key, val)\n\n  return d"
  },
  {
    "id": "train-python-cosqa-train-15475",
    "code": "def _find_first_of ( line , substrings ) : starts = ( ( line . find ( i ) , i ) for i in substrings ) found = [ ( i , sub ) for i , sub in starts if i != - 1 ] if found : return min ( found ) else : return - 1 , None",
    "text": "get index of line containing substring python",
    "label": 1,
    "raw": "def _find_first_of(line, substrings):\n    \"\"\"Find earliest occurrence of one of substrings in line.\n\n    Returns pair of index and found substring, or (-1, None)\n    if no occurrences of any of substrings were found in line.\n    \"\"\"\n    starts = ((line.find(i), i) for i in substrings)\n    found = [(i, sub) for i, sub in starts if i != -1]\n    if found:\n        return min(found)\n    else:\n        return -1, None"
  },
  {
    "id": "train-python-cosqa-train-17047",
    "code": "def attrname_to_colname_dict ( cls ) -> Dict [ str , str ] : attr_col = { } # type: Dict[str, str] for attrname , column in gen_columns ( cls ) : attr_col [ attrname ] = column . name return attr_col",
    "text": "get colunmn names in python",
    "label": 1,
    "raw": "def attrname_to_colname_dict(cls) -> Dict[str, str]:\n    \"\"\"\n    Asks an SQLAlchemy class how its attribute names correspond to database\n    column names.\n\n    Args:\n        cls: SQLAlchemy ORM class\n\n    Returns:\n        a dictionary mapping attribute names to database column names\n    \"\"\"\n    attr_col = {}  # type: Dict[str, str]\n    for attrname, column in gen_columns(cls):\n        attr_col[attrname] = column.name\n    return attr_col"
  },
  {
    "id": "train-python-cosqa-train-13119",
    "code": "def _take_ownership ( self ) : if self : ptr = cast ( self . value , GIBaseInfo ) _UnrefFinalizer . track ( self , ptr ) self . __owns = True",
    "text": "discarding owned python object not allowed without gil",
    "label": 1,
    "raw": "def _take_ownership(self):\n        \"\"\"Make the Python instance take ownership of the GIBaseInfo. i.e.\n        unref if the python instance gets gc'ed.\n        \"\"\"\n\n        if self:\n            ptr = cast(self.value, GIBaseInfo)\n            _UnrefFinalizer.track(self, ptr)\n            self.__owns = True"
  },
  {
    "id": "train-python-cosqa-train-16887",
    "code": "def last_day ( year = _year , month = _month ) : last_day = calendar . monthrange ( year , month ) [ 1 ] return datetime . date ( year = year , month = month , day = last_day )",
    "text": "verify a date it is last day of a month python",
    "label": 1,
    "raw": "def last_day(year=_year, month=_month):\n    \"\"\"\n    get the current month's last day\n    :param year:  default to current year\n    :param month:  default to current month\n    :return: month's last day\n    \"\"\"\n    last_day = calendar.monthrange(year, month)[1]\n    return datetime.date(year=year, month=month, day=last_day)"
  },
  {
    "id": "train-python-cosqa-train-8019",
    "code": "def hasattrs ( object , * names ) : for name in names : if not hasattr ( object , name ) : return False return True",
    "text": "ow to check if object has no attribvute python",
    "label": 1,
    "raw": "def hasattrs(object, *names):\n    \"\"\"\n    Takes in an object and a variable length amount of named attributes,\n    and checks to see if the object has each property. If any of the\n    attributes are missing, this returns false.\n\n    :param object: an object that may or may not contain the listed attributes\n    :param names: a variable amount of attribute names to check for\n    :return: True if the object contains each named attribute, false otherwise\n    \"\"\"\n    for name in names:\n        if not hasattr(object, name):\n            return False\n    return True"
  },
  {
    "id": "train-python-cosqa-train-11072",
    "code": "def fft_freqs ( n_fft , fs ) : return np . arange ( 0 , ( n_fft // 2 + 1 ) ) / float ( n_fft ) * float ( fs )",
    "text": "fft low frequency signal python",
    "label": 1,
    "raw": "def fft_freqs(n_fft, fs):\n    \"\"\"Return frequencies for DFT\n\n    Parameters\n    ----------\n    n_fft : int\n        Number of points in the FFT.\n    fs : float\n        The sampling rate.\n    \"\"\"\n    return np.arange(0, (n_fft // 2 + 1)) / float(n_fft) * float(fs)"
  },
  {
    "id": "train-python-cosqa-train-10718",
    "code": "def _get_printable_columns ( columns , row ) : if not columns : return row # Extract the column values, in the order specified. return tuple ( row [ c ] for c in columns )",
    "text": "python display specific columns",
    "label": 1,
    "raw": "def _get_printable_columns(columns, row):\n    \"\"\"Return only the part of the row which should be printed.\n    \"\"\"\n    if not columns:\n        return row\n\n    # Extract the column values, in the order specified.\n    return tuple(row[c] for c in columns)"
  },
  {
    "id": "train-python-cosqa-train-3357",
    "code": "def kill_mprocess ( process ) : if process and proc_alive ( process ) : process . terminate ( ) process . communicate ( ) return not proc_alive ( process )",
    "text": "python sanic child process not kill",
    "label": 1,
    "raw": "def kill_mprocess(process):\n    \"\"\"kill process\n    Args:\n        process - Popen object for process\n    \"\"\"\n    if process and proc_alive(process):\n        process.terminate()\n        process.communicate()\n    return not proc_alive(process)"
  },
  {
    "id": "train-python-cosqa-train-15260",
    "code": "def estimate_complexity ( self , x , y , z , n ) : num_calculations = x * y * z * n run_time = num_calculations / 100000 # a 2014 PC does about 100k calcs in a second (guess based on prior logs) return self . show_time_as_short_string ( run_time )",
    "text": "determine time complexity of my python program",
    "label": 1,
    "raw": "def estimate_complexity(self, x,y,z,n):\n        \"\"\" \n        calculates a rough guess of runtime based on product of parameters \n        \"\"\"\n        num_calculations = x * y * z * n\n        run_time = num_calculations / 100000  # a 2014 PC does about 100k calcs in a second (guess based on prior logs)\n        return self.show_time_as_short_string(run_time)"
  },
  {
    "id": "train-python-cosqa-train-9698",
    "code": "def read_numpy ( fd , byte_order , dtype , count ) : return numpy . fromfile ( fd , byte_order + dtype [ - 1 ] , count )",
    "text": "how to read contents of a numpy file with python",
    "label": 1,
    "raw": "def read_numpy(fd, byte_order, dtype, count):\n    \"\"\"Read tag data from file and return as numpy array.\"\"\"\n    return numpy.fromfile(fd, byte_order+dtype[-1], count)"
  },
  {
    "id": "train-python-cosqa-train-19671",
    "code": "def dictfetchall ( cursor : Cursor ) -> List [ Dict [ str , Any ] ] : columns = get_fieldnames_from_cursor ( cursor ) return [ OrderedDict ( zip ( columns , row ) ) for row in cursor . fetchall ( ) ]",
    "text": "python return ordereddict from db cursor",
    "label": 1,
    "raw": "def dictfetchall(cursor: Cursor) -> List[Dict[str, Any]]:\n    \"\"\"\n    Return all rows from a cursor as a list of :class:`OrderedDict` objects.\n\n    Args:\n        cursor: the cursor\n\n    Returns:\n        a list (one item per row) of :class:`OrderedDict` objects whose key are\n        column names and whose values are the row values\n    \"\"\"\n    columns = get_fieldnames_from_cursor(cursor)\n    return [\n        OrderedDict(zip(columns, row))\n        for row in cursor.fetchall()\n    ]"
  },
  {
    "id": "train-python-cosqa-train-5770",
    "code": "def _correct_args ( func , kwargs ) : args = inspect . getargspec ( func ) [ 0 ] return [ kwargs [ arg ] for arg in args ] + kwargs [ '__args' ]",
    "text": "python unpack dictionary to function args",
    "label": 1,
    "raw": "def _correct_args(func, kwargs):\n    \"\"\"\n        Convert a dictionary of arguments including __argv into a list\n        for passing to the function.\n    \"\"\"\n    args = inspect.getargspec(func)[0]\n    return [kwargs[arg] for arg in args] + kwargs['__args']"
  },
  {
    "id": "train-python-cosqa-train-10975",
    "code": "def get_creation_datetime ( filepath ) : if platform . system ( ) == 'Windows' : return datetime . fromtimestamp ( os . path . getctime ( filepath ) ) else : stat = os . stat ( filepath ) try : return datetime . fromtimestamp ( stat . st_birthtime ) except AttributeError : # We're probably on Linux. No easy way to get creation dates here, # so we'll settle for when its content was last modified. return None",
    "text": "detect the date created on a file with python",
    "label": 1,
    "raw": "def get_creation_datetime(filepath):\n    \"\"\"\n    Get the date that a file was created.\n\n    Parameters\n    ----------\n    filepath : str\n\n    Returns\n    -------\n    creation_datetime : datetime.datetime or None\n    \"\"\"\n    if platform.system() == 'Windows':\n        return datetime.fromtimestamp(os.path.getctime(filepath))\n    else:\n        stat = os.stat(filepath)\n        try:\n            return datetime.fromtimestamp(stat.st_birthtime)\n        except AttributeError:\n            # We're probably on Linux. No easy way to get creation dates here,\n            # so we'll settle for when its content was last modified.\n            return None"
  },
  {
    "id": "train-python-cosqa-train-17117",
    "code": "def normalize ( numbers ) : total = float ( sum ( numbers ) ) return [ n / total for n in numbers ]",
    "text": "python normalize a distribution",
    "label": 1,
    "raw": "def normalize(numbers):\n    \"\"\"Multiply each number by a constant such that the sum is 1.0\n    >>> normalize([1,2,1])\n    [0.25, 0.5, 0.25]\n    \"\"\"\n    total = float(sum(numbers))\n    return [n / total for n in numbers]"
  },
  {
    "id": "train-python-cosqa-train-8017",
    "code": "def _uptime_syllable ( ) : global __boottime try : __boottime = os . stat ( '/dev/pty/mst/pty0' ) . st_mtime return time . time ( ) - __boottime except ( NameError , OSError ) : return None",
    "text": "os python time updated or accessed",
    "label": 1,
    "raw": "def _uptime_syllable():\n    \"\"\"Returns uptime in seconds or None, on Syllable.\"\"\"\n    global __boottime\n    try:\n        __boottime = os.stat('/dev/pty/mst/pty0').st_mtime\n        return time.time() - __boottime\n    except (NameError, OSError):\n        return None"
  },
  {
    "id": "train-python-cosqa-train-9806",
    "code": "def set_ylim ( self , xlims , dx , xscale , reverse = False ) : self . _set_axis_limits ( 'y' , xlims , dx , xscale , reverse ) return",
    "text": "how to set y axis limits in python",
    "label": 1,
    "raw": "def set_ylim(self, xlims, dx, xscale, reverse=False):\n        \"\"\"Set y limits for plot.\n\n        This will set the limits for the y axis\n        for the specific plot.\n\n        Args:\n            ylims (len-2 list of floats): The limits for the axis.\n            dy (float): Amount to increment by between the limits.\n            yscale (str): Scale of the axis. Either `log` or `lin`.\n            reverse (bool, optional): If True, reverse the axis tick marks. Default is False.\n\n        \"\"\"\n        self._set_axis_limits('y', xlims, dx, xscale, reverse)\n        return"
  },
  {
    "id": "train-python-cosqa-train-3331",
    "code": "def conv_dict ( self ) : return dict ( integer = self . integer , real = self . real , no_type = self . no_type )",
    "text": "python return all info in a dict",
    "label": 1,
    "raw": "def conv_dict(self):\n        \"\"\"dictionary of conversion\"\"\"\n        return dict(integer=self.integer, real=self.real, no_type=self.no_type)"
  },
  {
    "id": "train-python-cosqa-train-9919",
    "code": "def printheader ( h = None ) : writer = csv . writer ( sys . stdout ) writer . writerow ( header_fields ( h ) )",
    "text": "how to write headers for a column in python",
    "label": 1,
    "raw": "def printheader(h=None):\n    \"\"\"Print the header for the CSV table.\"\"\"\n    writer = csv.writer(sys.stdout)\n    writer.writerow(header_fields(h))"
  },
  {
    "id": "train-python-cosqa-train-7777",
    "code": "def bash ( filename ) : sys . stdout . flush ( ) subprocess . call ( \"bash {}\" . format ( filename ) , shell = True )",
    "text": "python subprocess run bash script in local directory",
    "label": 1,
    "raw": "def bash(filename):\n    \"\"\"Runs a bash script in the local directory\"\"\"\n    sys.stdout.flush()\n    subprocess.call(\"bash {}\".format(filename), shell=True)"
  },
  {
    "id": "train-python-cosqa-train-11942",
    "code": "def glog ( x , l = 2 ) : return np . log ( ( x + np . sqrt ( x ** 2 + l ** 2 ) ) / 2 ) / np . log ( l )",
    "text": "python solve for a log equation",
    "label": 1,
    "raw": "def glog(x,l = 2):\n    \"\"\"\n    Generalised logarithm\n\n    :param x: number\n    :param p: number added befor logarithm \n\n    \"\"\"\n    return np.log((x+np.sqrt(x**2+l**2))/2)/np.log(l)"
  },
  {
    "id": "train-python-cosqa-train-14732",
    "code": "def set_cursor_position ( self , position ) : position = self . get_position ( position ) cursor = self . textCursor ( ) cursor . setPosition ( position ) self . setTextCursor ( cursor ) self . ensureCursorVisible ( )",
    "text": "python code for moving cursor without user intervention",
    "label": 1,
    "raw": "def set_cursor_position(self, position):\n        \"\"\"Set cursor position\"\"\"\n        position = self.get_position(position)\n        cursor = self.textCursor()\n        cursor.setPosition(position)\n        self.setTextCursor(cursor)\n        self.ensureCursorVisible()"
  },
  {
    "id": "train-python-cosqa-train-15575",
    "code": "def conv_dict ( self ) : return dict ( integer = self . integer , real = self . real , no_type = self . no_type )",
    "text": "how do i create a dict type in python programmatically",
    "label": 1,
    "raw": "def conv_dict(self):\n        \"\"\"dictionary of conversion\"\"\"\n        return dict(integer=self.integer, real=self.real, no_type=self.no_type)"
  },
  {
    "id": "train-python-cosqa-train-10396",
    "code": "def stackplot ( marray , seconds = None , start_time = None , ylabels = None ) : tarray = np . transpose ( marray ) stackplot_t ( tarray , seconds = seconds , start_time = start_time , ylabels = ylabels ) plt . show ( )",
    "text": "stacked plot python time series matplotlib",
    "label": 1,
    "raw": "def stackplot(marray, seconds=None, start_time=None, ylabels=None):\n    \"\"\"\n    will plot a stack of traces one above the other assuming\n    marray.shape = numRows, numSamples\n    \"\"\"\n    tarray = np.transpose(marray)\n    stackplot_t(tarray, seconds=seconds, start_time=start_time, ylabels=ylabels)\n    plt.show()"
  },
  {
    "id": "train-python-cosqa-train-2122",
    "code": "def clear_globals_reload_modules ( self ) : self . code_array . clear_globals ( ) self . code_array . reload_modules ( ) # Clear result cache self . code_array . result_cache . clear ( )",
    "text": "python code to clear all variables at the start of code execution",
    "label": 1,
    "raw": "def clear_globals_reload_modules(self):\n        \"\"\"Clears globals and reloads modules\"\"\"\n\n        self.code_array.clear_globals()\n        self.code_array.reload_modules()\n\n        # Clear result cache\n        self.code_array.result_cache.clear()"
  },
  {
    "id": "train-python-cosqa-train-14475",
    "code": "def remove_series ( self , series ) : if len ( self . all_series ( ) ) == 1 : raise ValueError ( \"Cannot remove last series from %s\" % str ( self ) ) self . _all_series . remove ( series ) series . _chart = None",
    "text": "python 3 remove element from series",
    "label": 1,
    "raw": "def remove_series(self, series):\n        \"\"\"Removes a :py:class:`.Series` from the chart.\n\n        :param Series series: The :py:class:`.Series` to remove.\n        :raises ValueError: if you try to remove the last\\\n        :py:class:`.Series`.\"\"\"\n\n        if len(self.all_series()) == 1:\n            raise ValueError(\"Cannot remove last series from %s\" % str(self))\n        self._all_series.remove(series)\n        series._chart = None"
  },
  {
    "id": "train-python-cosqa-train-13129",
    "code": "def _update_globals ( ) : if not sys . platform . startswith ( 'java' ) and sys . platform != 'cli' : return incompatible = 'extract_constant' , 'get_module_constant' for name in incompatible : del globals ( ) [ name ] __all__ . remove ( name )",
    "text": "do global python objects get deleted after program exits",
    "label": 1,
    "raw": "def _update_globals():\n    \"\"\"\n    Patch the globals to remove the objects not available on some platforms.\n\n    XXX it'd be better to test assertions about bytecode instead.\n    \"\"\"\n\n    if not sys.platform.startswith('java') and sys.platform != 'cli':\n        return\n    incompatible = 'extract_constant', 'get_module_constant'\n    for name in incompatible:\n        del globals()[name]\n        __all__.remove(name)"
  },
  {
    "id": "train-python-cosqa-train-6692",
    "code": "def uniqueID ( size = 6 , chars = string . ascii_uppercase + string . digits ) : return '' . join ( random . choice ( chars ) for x in xrange ( size ) )",
    "text": "python generate a random string of length 5",
    "label": 1,
    "raw": "def uniqueID(size=6, chars=string.ascii_uppercase + string.digits):\n    \"\"\"A quick and dirty way to get a unique string\"\"\"\n    return ''.join(random.choice(chars) for x in xrange(size))"
  },
  {
    "id": "train-python-cosqa-train-11423",
    "code": "def step_table_made ( self ) : try : empty = self . step_table . empty except AttributeError : empty = True return not empty",
    "text": "how to code for empty table in python",
    "label": 1,
    "raw": "def step_table_made(self):\n        \"\"\"check if the step table exists\"\"\"\n        try:\n            empty = self.step_table.empty\n        except AttributeError:\n            empty = True\n        return not empty"
  },
  {
    "id": "train-python-cosqa-train-10444",
    "code": "def tf2 ( ) : # Import the `tf` compat API from this file and check if it's already TF 2.0. if tf . __version__ . startswith ( '2.' ) : return tf elif hasattr ( tf , 'compat' ) and hasattr ( tf . compat , 'v2' ) : # As a fallback, try `tensorflow.compat.v2` if it's defined. return tf . compat . v2 raise ImportError ( 'cannot import tensorflow 2.0 API' )",
    "text": "tensorflow supported python versions",
    "label": 1,
    "raw": "def tf2():\n  \"\"\"Provide the root module of a TF-2.0 API for use within TensorBoard.\n\n  Returns:\n    The root module of a TF-2.0 API, if available.\n\n  Raises:\n    ImportError: if a TF-2.0 API is not available.\n  \"\"\"\n  # Import the `tf` compat API from this file and check if it's already TF 2.0.\n  if tf.__version__.startswith('2.'):\n    return tf\n  elif hasattr(tf, 'compat') and hasattr(tf.compat, 'v2'):\n    # As a fallback, try `tensorflow.compat.v2` if it's defined.\n    return tf.compat.v2\n  raise ImportError('cannot import tensorflow 2.0 API')"
  },
  {
    "id": "train-python-cosqa-train-7711",
    "code": "def split_into_words ( s ) : s = re . sub ( r\"\\W+\" , \" \" , s ) s = re . sub ( r\"[_0-9]+\" , \" \" , s ) return s . split ( )",
    "text": "how to split a string of words into a list with each word being a char python",
    "label": 1,
    "raw": "def split_into_words(s):\n  \"\"\"Split a sentence into list of words.\"\"\"\n  s = re.sub(r\"\\W+\", \" \", s)\n  s = re.sub(r\"[_0-9]+\", \" \", s)\n  return s.split()"
  },
  {
    "id": "train-python-cosqa-train-19349",
    "code": "def csv_to_numpy ( string_like , dtype = None ) : # type: (str) -> np.array stream = StringIO ( string_like ) return np . genfromtxt ( stream , dtype = dtype , delimiter = ',' )",
    "text": "python csv to np array",
    "label": 1,
    "raw": "def csv_to_numpy(string_like, dtype=None):  # type: (str) -> np.array\n    \"\"\"Convert a CSV object to a numpy array.\n\n    Args:\n        string_like (str): CSV string.\n        dtype (dtype, optional):  Data type of the resulting array. If None, the dtypes will be determined by the\n                                        contents of each column, individually. This argument can only be used to\n                                        'upcast' the array.  For downcasting, use the .astype(t) method.\n    Returns:\n        (np.array): numpy array\n    \"\"\"\n    stream = StringIO(string_like)\n    return np.genfromtxt(stream, dtype=dtype, delimiter=',')"
  },
  {
    "id": "train-python-cosqa-train-12764",
    "code": "def _get_node_path ( self , node ) : path = [ ] while node . up : path . append ( node . name ) node = node . up return list ( reversed ( path ) )",
    "text": "all root to leaf path in python",
    "label": 1,
    "raw": "def _get_node_path(self, node):\n        \"\"\"Return the path from the root to ``node`` as a list of node names.\"\"\"\n        path = []\n        while node.up:\n            path.append(node.name)\n            node = node.up\n        return list(reversed(path))"
  },
  {
    "id": "train-python-cosqa-train-13156",
    "code": "def a2s ( a ) : s = np . zeros ( ( 6 , ) , 'f' ) # make the a matrix for i in range ( 3 ) : s [ i ] = a [ i ] [ i ] s [ 3 ] = a [ 0 ] [ 1 ] s [ 4 ] = a [ 1 ] [ 2 ] s [ 5 ] = a [ 0 ] [ 2 ] return s",
    "text": "easiest way to create matrix in python",
    "label": 1,
    "raw": "def a2s(a):\n    \"\"\"\n     convert 3,3 a matrix to 6 element \"s\" list  (see Tauxe 1998)\n    \"\"\"\n    s = np.zeros((6,), 'f')  # make the a matrix\n    for i in range(3):\n        s[i] = a[i][i]\n    s[3] = a[0][1]\n    s[4] = a[1][2]\n    s[5] = a[0][2]\n    return s"
  },
  {
    "id": "train-python-cosqa-train-15165",
    "code": "def beta_pdf ( x , a , b ) : bc = 1 / beta ( a , b ) fc = x ** ( a - 1 ) sc = ( 1 - x ) ** ( b - 1 ) return bc * fc * sc",
    "text": "create a function for the normal distrubution pdf python",
    "label": 1,
    "raw": "def beta_pdf(x, a, b):\n  \"\"\"Beta distirbution probability density function.\"\"\"\n  bc = 1 / beta(a, b)\n  fc = x ** (a - 1)\n  sc = (1 - x) ** (b - 1)\n  return bc * fc * sc"
  },
  {
    "id": "train-python-cosqa-train-8921",
    "code": "def dict_to_querystring ( dictionary ) : s = u\"\" for d in dictionary . keys ( ) : s = unicode . format ( u\"{0}{1}={2}&\" , s , d , dictionary [ d ] ) return s [ : - 1 ]",
    "text": "dump a python dict to url query",
    "label": 1,
    "raw": "def dict_to_querystring(dictionary):\n    \"\"\"Converts a dict to a querystring suitable to be appended to a URL.\"\"\"\n    s = u\"\"\n    for d in dictionary.keys():\n        s = unicode.format(u\"{0}{1}={2}&\", s, d, dictionary[d])\n    return s[:-1]"
  },
  {
    "id": "train-python-cosqa-train-16915",
    "code": "def _pip_exists ( self ) : return os . path . isfile ( os . path . join ( self . path , 'bin' , 'pip' ) )",
    "text": "python check if i'm in virtualenv",
    "label": 1,
    "raw": "def _pip_exists(self):\n        \"\"\"Returns True if pip exists inside the virtual environment. Can be\n        used as a naive way to verify that the environment is installed.\"\"\"\n        return os.path.isfile(os.path.join(self.path, 'bin', 'pip'))"
  },
  {
    "id": "train-python-cosqa-train-12678",
    "code": "def to_dotfile ( G : nx . DiGraph , filename : str ) : A = to_agraph ( G ) A . write ( filename )",
    "text": "write graph data to gml in python",
    "label": 1,
    "raw": "def to_dotfile(G: nx.DiGraph, filename: str):\n    \"\"\" Output a networkx graph to a DOT file. \"\"\"\n    A = to_agraph(G)\n    A.write(filename)"
  },
  {
    "id": "train-python-cosqa-train-11685",
    "code": "def rlognormal ( mu , tau , size = None ) : return np . random . lognormal ( mu , np . sqrt ( 1. / tau ) , size )",
    "text": "python random pseudo gaussian noise",
    "label": 1,
    "raw": "def rlognormal(mu, tau, size=None):\n    \"\"\"\n    Return random lognormal variates.\n    \"\"\"\n\n    return np.random.lognormal(mu, np.sqrt(1. / tau), size)"
  },
  {
    "id": "train-python-cosqa-train-14929",
    "code": "def __copy__ ( self ) : return self . __class__ . load ( self . dump ( ) , context = self . context )",
    "text": "python copy a self in method",
    "label": 1,
    "raw": "def __copy__(self):\n        \"\"\"A magic method to implement shallow copy behavior.\"\"\"\n        return self.__class__.load(self.dump(), context=self.context)"
  },
  {
    "id": "train-python-cosqa-train-10821",
    "code": "def revnet_164_cifar ( ) : hparams = revnet_cifar_base ( ) hparams . bottleneck = True hparams . num_channels = [ 16 , 32 , 64 ] hparams . num_layers_per_block = [ 8 , 8 , 8 ] return hparams",
    "text": "cifar 10 python 3",
    "label": 1,
    "raw": "def revnet_164_cifar():\n  \"\"\"Tiny hparams suitable for CIFAR/etc.\"\"\"\n  hparams = revnet_cifar_base()\n  hparams.bottleneck = True\n  hparams.num_channels = [16, 32, 64]\n  hparams.num_layers_per_block = [8, 8, 8]\n  return hparams"
  },
  {
    "id": "train-python-cosqa-train-17980",
    "code": "def to_bytes ( data : Any ) -> bytearray : # noqa if isinstance ( data , int ) : return bytearray ( [ data ] ) return bytearray ( data , encoding = 'latin-1' )",
    "text": "how to converta string into bytes in python",
    "label": 1,
    "raw": "def to_bytes(data: Any) -> bytearray:\n    \"\"\"\n    Convert anything to a ``bytearray``.\n    \n    See\n    \n    - http://stackoverflow.com/questions/7585435/best-way-to-convert-string-to-bytes-in-python-3\n    - http://stackoverflow.com/questions/10459067/how-to-convert-my-bytearrayb-x9e-x18k-x9a-to-something-like-this-x9e-x1\n    \"\"\"  # noqa\n    if isinstance(data, int):\n        return bytearray([data])\n    return bytearray(data, encoding='latin-1')"
  },
  {
    "id": "train-python-cosqa-train-14126",
    "code": "def is_integer ( dtype ) : dtype = tf . as_dtype ( dtype ) if hasattr ( dtype , 'is_integer' ) : return dtype . is_integer return np . issubdtype ( np . dtype ( dtype ) , np . integer )",
    "text": "how to test if a symbol is an int python",
    "label": 1,
    "raw": "def is_integer(dtype):\n  \"\"\"Returns whether this is a (non-quantized) integer type.\"\"\"\n  dtype = tf.as_dtype(dtype)\n  if hasattr(dtype, 'is_integer'):\n    return dtype.is_integer\n  return np.issubdtype(np.dtype(dtype), np.integer)"
  },
  {
    "id": "train-python-cosqa-train-6818",
    "code": "def _check_graphviz_available ( output_format ) : try : subprocess . call ( [ \"dot\" , \"-V\" ] , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) except OSError : print ( \"The output format '%s' is currently not available.\\n\" \"Please install 'Graphviz' to have other output formats \" \"than 'dot' or 'vcg'.\" % output_format ) sys . exit ( 32 )",
    "text": "python graphviz executables not found",
    "label": 1,
    "raw": "def _check_graphviz_available(output_format):\n    \"\"\"check if we need graphviz for different output format\"\"\"\n    try:\n        subprocess.call([\"dot\", \"-V\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    except OSError:\n        print(\n            \"The output format '%s' is currently not available.\\n\"\n            \"Please install 'Graphviz' to have other output formats \"\n            \"than 'dot' or 'vcg'.\" % output_format\n        )\n        sys.exit(32)"
  },
  {
    "id": "train-python-cosqa-train-3151",
    "code": "def get_last_row ( dbconn , tablename , n = 1 , uuid = None ) : return fetch ( dbconn , tablename , n , uuid , end = True )",
    "text": "how to get 2 last row of a list in python",
    "label": 1,
    "raw": "def get_last_row(dbconn, tablename, n=1, uuid=None):\n    \"\"\"\n    Returns the last `n` rows in the table\n    \"\"\"\n    return fetch(dbconn, tablename, n, uuid, end=True)"
  },
  {
    "id": "train-python-cosqa-train-5843",
    "code": "def compressBuffer ( buffer ) : # http://jython.xhaus.com/http-compression-in-python-and-jython/ zbuf = cStringIO . StringIO ( ) zfile = gzip . GzipFile ( mode = 'wb' , fileobj = zbuf , compresslevel = 9 ) zfile . write ( buffer ) zfile . close ( ) return zbuf . getvalue ( )",
    "text": "python zlib java gzip",
    "label": 1,
    "raw": "def compressBuffer(buffer):\n    \"\"\"\n    Note that this code compresses into a buffer held in memory, rather\n    than a disk file. This is done through the use of cStringIO.StringIO().\n    \"\"\"\n    # http://jython.xhaus.com/http-compression-in-python-and-jython/\n    zbuf = cStringIO.StringIO()\n    zfile = gzip.GzipFile(mode='wb', fileobj=zbuf, compresslevel=9)\n    zfile.write(buffer)\n    zfile.close()\n    return zbuf.getvalue()"
  },
  {
    "id": "train-python-cosqa-train-14375",
    "code": "def fetch ( self ) : api = self . doapi_manager return api . _domain ( api . request ( self . url ) [ \"domain\" ] )",
    "text": "odoo python return domain",
    "label": 1,
    "raw": "def fetch(self):\n        \"\"\"\n        Fetch & return a new `Domain` object representing the domain's current\n        state\n\n        :rtype: Domain\n        :raises DOAPIError: if the API endpoint replies with an error (e.g., if\n            the domain no longer exists)\n        \"\"\"\n        api = self.doapi_manager\n        return api._domain(api.request(self.url)[\"domain\"])"
  },
  {
    "id": "train-python-cosqa-train-8734",
    "code": "def __exit__ ( self , type , value , traceback ) : if not self . asarfile : return self . asarfile . close ( ) self . asarfile = None",
    "text": "python exit without traceback",
    "label": 1,
    "raw": "def __exit__(self, type, value, traceback):\n        \"\"\"When the `with` statement ends.\"\"\"\n\n        if not self.asarfile:\n            return\n\n        self.asarfile.close()\n        self.asarfile = None"
  },
  {
    "id": "train-python-cosqa-train-18999",
    "code": "def iter_fields ( self , schema : Schema ) -> Iterable [ Tuple [ str , Field ] ] : for name in sorted ( schema . fields . keys ( ) ) : field = schema . fields [ name ] yield field . dump_to or name , field",
    "text": "marshmallow python calling schema self for a nested field",
    "label": 1,
    "raw": "def iter_fields(self, schema: Schema) -> Iterable[Tuple[str, Field]]:\n        \"\"\"\n        Iterate through marshmallow schema fields.\n\n        Generates: name, field pairs\n\n        \"\"\"\n        for name in sorted(schema.fields.keys()):\n            field = schema.fields[name]\n            yield field.dump_to or name, field"
  },
  {
    "id": "train-python-cosqa-train-19542",
    "code": "def list_to_str ( list , separator = ',' ) : list = [ str ( x ) for x in list ] return separator . join ( list )",
    "text": "elements of a list to string in python",
    "label": 1,
    "raw": "def list_to_str(list, separator=','):\n    \"\"\"\n    >>> list = [0, 0, 7]\n    >>> list_to_str(list)\n    '0,0,7'\n    \"\"\"\n    list = [str(x) for x in list]\n    return separator.join(list)"
  },
  {
    "id": "train-python-cosqa-train-6939",
    "code": "def _is_name_used_as_variadic ( name , variadics ) : return any ( variadic . value == name or variadic . value . parent_of ( name ) for variadic in variadics )",
    "text": "python if variarble exists",
    "label": 1,
    "raw": "def _is_name_used_as_variadic(name, variadics):\n    \"\"\"Check if the given name is used as a variadic argument.\"\"\"\n    return any(\n        variadic.value == name or variadic.value.parent_of(name)\n        for variadic in variadics\n    )"
  },
  {
    "id": "train-python-cosqa-dev-429",
    "code": "def print_display_png ( o ) : s = latex ( o , mode = 'plain' ) s = s . strip ( '$' ) # As matplotlib does not support display style, dvipng backend is # used here. png = latex_to_png ( '$$%s$$' % s , backend = 'dvipng' ) return png",
    "text": "python latex to png",
    "label": 1,
    "raw": "def print_display_png(o):\n    \"\"\"\n    A function to display sympy expression using display style LaTeX in PNG.\n    \"\"\"\n    s = latex(o, mode='plain')\n    s = s.strip('$')\n    # As matplotlib does not support display style, dvipng backend is\n    # used here.\n    png = latex_to_png('$$%s$$' % s, backend='dvipng')\n    return png"
  },
  {
    "id": "train-python-cosqa-train-13273",
    "code": "def mongoqs_to_json ( qs , fields = None ) : l = list ( qs . as_pymongo ( ) ) for element in l : element . pop ( '_cls' ) # use DjangoJSONEncoder for transform date data type to datetime json_qs = json . dumps ( l , indent = 2 , ensure_ascii = False , cls = DjangoJSONEncoder ) return json_qs",
    "text": "generate json to python queryset object",
    "label": 1,
    "raw": "def mongoqs_to_json(qs, fields=None):\n    \"\"\"\n    transform mongoengine.QuerySet to json\n    \"\"\"\n\n    l = list(qs.as_pymongo())\n\n    for element in l:\n        element.pop('_cls')\n\n    # use DjangoJSONEncoder for transform date data type to datetime\n    json_qs = json.dumps(l, indent=2, ensure_ascii=False, cls=DjangoJSONEncoder)\n    return json_qs"
  },
  {
    "id": "train-python-cosqa-train-16768",
    "code": "def __run_spark_submit ( lane_yaml , dist_dir , spark_home , spark_args , silent ) : # spark-submit binary cmd = [ 'spark-submit' if spark_home is None else os . path . join ( spark_home , 'bin/spark-submit' ) ] # Supplied spark arguments if spark_args : cmd += spark_args # Packaged App & lane cmd += [ '--py-files' , 'libs.zip,_framework.zip,tasks.zip' , 'main.py' ] cmd += [ '--lane' , lane_yaml ] logging . info ( 'Submitting to Spark' ) logging . debug ( str ( cmd ) ) # Submit devnull = open ( os . devnull , 'w' ) outp = { 'stderr' : STDOUT , 'stdout' : devnull } if silent else { } call ( cmd , cwd = dist_dir , env = MY_ENV , * * outp ) devnull . close ( )",
    "text": "submit python code in pysopark",
    "label": 1,
    "raw": "def __run_spark_submit(lane_yaml, dist_dir, spark_home, spark_args, silent):\n    \"\"\"\n    Submits the packaged application to spark using a `spark-submit` subprocess\n\n    Parameters\n    ----------\n    lane_yaml (str): Path to the YAML lane definition file\n    dist_dir (str): Path to the directory where the packaged code is located\n    spark_args (str): String of any additional spark config args to be passed when submitting\n    silent (bool): Flag indicating whether job output should be printed to console\n    \"\"\"\n    # spark-submit binary\n    cmd = ['spark-submit' if spark_home is None else os.path.join(spark_home, 'bin/spark-submit')]\n\n    # Supplied spark arguments\n    if spark_args:\n        cmd += spark_args\n\n    # Packaged App & lane\n    cmd += ['--py-files', 'libs.zip,_framework.zip,tasks.zip', 'main.py']\n    cmd += ['--lane', lane_yaml]\n\n    logging.info('Submitting to Spark')\n    logging.debug(str(cmd))\n\n    # Submit\n    devnull = open(os.devnull, 'w')\n    outp = {'stderr': STDOUT, 'stdout': devnull} if silent else {}\n    call(cmd, cwd=dist_dir, env=MY_ENV, **outp)\n    devnull.close()"
  },
  {
    "id": "train-python-cosqa-train-10988",
    "code": "def get_parent_var ( name , global_ok = False , default = None , skip_frames = 0 ) : scope = get_parent_scope_from_var ( name , global_ok = global_ok , skip_frames = skip_frames + 1 ) if not scope : return default if name in scope . locals : return scope . locals . get ( name , default ) return scope . globals . get ( name , default )",
    "text": "python get parent scope of function",
    "label": 1,
    "raw": "def get_parent_var(name, global_ok=False, default=None, skip_frames=0):\n    \"\"\"\n    Directly gets a variable from a parent frame-scope.\n\n    Returns\n    --------\n    Any\n        The content of the variable found by the given name, or None.\n    \"\"\"\n\n    scope = get_parent_scope_from_var(name, global_ok=global_ok, skip_frames=skip_frames + 1)\n\n    if not scope:\n        return default\n\n    if name in scope.locals:\n        return scope.locals.get(name, default)\n\n    return scope.globals.get(name, default)"
  },
  {
    "id": "train-python-cosqa-train-11182",
    "code": "def schunk ( string , size ) : return [ string [ i : i + size ] for i in range ( 0 , len ( string ) , size ) ]",
    "text": "python how to split string into chunks of n size",
    "label": 1,
    "raw": "def schunk(string, size):\n    \"\"\"Splits string into n sized chunks.\"\"\"\n    return [string[i:i+size] for i in range(0, len(string), size)]"
  },
  {
    "id": "train-python-cosqa-train-17486",
    "code": "def arcball_map_to_sphere ( point , center , radius ) : v0 = ( point [ 0 ] - center [ 0 ] ) / radius v1 = ( center [ 1 ] - point [ 1 ] ) / radius n = v0 * v0 + v1 * v1 if n > 1.0 : # position outside of sphere n = math . sqrt ( n ) return numpy . array ( [ v0 / n , v1 / n , 0.0 ] ) else : return numpy . array ( [ v0 , v1 , math . sqrt ( 1.0 - n ) ] )",
    "text": "compute points on a sphere python",
    "label": 1,
    "raw": "def arcball_map_to_sphere(point, center, radius):\n    \"\"\"Return unit sphere coordinates from window coordinates.\"\"\"\n    v0 = (point[0] - center[0]) / radius\n    v1 = (center[1] - point[1]) / radius\n    n = v0*v0 + v1*v1\n    if n > 1.0:\n        # position outside of sphere\n        n = math.sqrt(n)\n        return numpy.array([v0/n, v1/n, 0.0])\n    else:\n        return numpy.array([v0, v1, math.sqrt(1.0 - n)])"
  },
  {
    "id": "train-python-cosqa-train-7672",
    "code": "def calc_volume ( self , sample : np . ndarray ) : return sqrt ( np . mean ( np . square ( sample ) ) )",
    "text": "python sounddevice get audio volume",
    "label": 1,
    "raw": "def calc_volume(self, sample: np.ndarray):\n        \"\"\"Find the RMS of the audio\"\"\"\n        return sqrt(np.mean(np.square(sample)))"
  },
  {
    "id": "train-python-cosqa-train-14442",
    "code": "def remove_file_from_s3 ( awsclient , bucket , key ) : client_s3 = awsclient . get_client ( 's3' ) response = client_s3 . delete_object ( Bucket = bucket , Key = key )",
    "text": "remove a file from aws bucket python",
    "label": 1,
    "raw": "def remove_file_from_s3(awsclient, bucket, key):\n    \"\"\"Remove a file from an AWS S3 bucket.\n\n    :param awsclient:\n    :param bucket:\n    :param key:\n    :return:\n    \"\"\"\n    client_s3 = awsclient.get_client('s3')\n    response = client_s3.delete_object(Bucket=bucket, Key=key)"
  },
  {
    "id": "train-python-cosqa-train-4992",
    "code": "def get_average_color ( colors ) : c = reduce ( color_reducer , colors ) total = len ( colors ) return tuple ( v / total for v in c )",
    "text": "how to average colors in python grayscale",
    "label": 1,
    "raw": "def get_average_color(colors):\n    \"\"\"Calculate the average color from the list of colors, where each color\n    is a 3-tuple of (r, g, b) values.\n    \"\"\"\n    c = reduce(color_reducer, colors)\n    total = len(colors)\n    return tuple(v / total for v in c)"
  },
  {
    "id": "train-python-cosqa-train-7655",
    "code": "def filter_list_by_indices ( lst , indices ) : return [ x for i , x in enumerate ( lst ) if i in indices ]",
    "text": "how to selecte few elements in list in python by indices",
    "label": 1,
    "raw": "def filter_list_by_indices(lst, indices):\n    \"\"\"Return a modified list containing only the indices indicated.\n\n    Args:\n        lst: Original list of values\n        indices: List of indices to keep from the original list\n\n    Returns:\n        list: Filtered list of values\n\n    \"\"\"\n    return [x for i, x in enumerate(lst) if i in indices]"
  },
  {
    "id": "train-python-cosqa-train-18434",
    "code": "def isfile_notempty ( inputfile : str ) -> bool : try : return isfile ( inputfile ) and getsize ( inputfile ) > 0 except TypeError : raise TypeError ( 'inputfile is not a valid type' )",
    "text": "python how to check if file is empty",
    "label": 1,
    "raw": "def isfile_notempty(inputfile: str) -> bool:\n        \"\"\"Check if the input filename with path is a file and is not empty.\"\"\"\n        try:\n            return isfile(inputfile) and getsize(inputfile) > 0\n        except TypeError:\n            raise TypeError('inputfile is not a valid type')"
  },
  {
    "id": "train-python-cosqa-train-9492",
    "code": "def raw_print ( * args , * * kw ) : print ( * args , sep = kw . get ( 'sep' , ' ' ) , end = kw . get ( 'end' , '\\n' ) , file = sys . __stdout__ ) sys . __stdout__ . flush ( )",
    "text": "python print avoid linespace",
    "label": 1,
    "raw": "def raw_print(*args, **kw):\n    \"\"\"Raw print to sys.__stdout__, otherwise identical interface to print().\"\"\"\n\n    print(*args, sep=kw.get('sep', ' '), end=kw.get('end', '\\n'),\n          file=sys.__stdout__)\n    sys.__stdout__.flush()"
  },
  {
    "id": "train-python-cosqa-train-2190",
    "code": "def dictapply ( d , fn ) : for k , v in d . items ( ) : if isinstance ( v , dict ) : v = dictapply ( v , fn ) else : d [ k ] = fn ( v ) return d",
    "text": "applying a method to a dictionary python",
    "label": 1,
    "raw": "def dictapply(d, fn):\n    \"\"\"\n    apply a function to all non-dict values in a dictionary\n    \"\"\"\n    for k, v in d.items():\n        if isinstance(v, dict):\n            v = dictapply(v, fn)\n        else:\n            d[k] = fn(v)\n    return d"
  },
  {
    "id": "train-python-cosqa-train-10464",
    "code": "def datetime_local_to_utc ( local ) : timestamp = time . mktime ( local . timetuple ( ) ) return datetime . datetime . utcfromtimestamp ( timestamp )",
    "text": "time in am/pm in python to utc time",
    "label": 1,
    "raw": "def datetime_local_to_utc(local):\n    \"\"\"\n    Simple function to convert naive :std:`datetime.datetime` object containing\n    local time to a naive :std:`datetime.datetime` object with UTC time.\n    \"\"\"\n    timestamp = time.mktime(local.timetuple())\n    return datetime.datetime.utcfromtimestamp(timestamp)"
  },
  {
    "id": "train-python-cosqa-train-13585",
    "code": "def pair_strings_sum_formatter ( a , b ) : if b [ : 1 ] == \"-\" : return \"{0} - {1}\" . format ( a , b [ 1 : ] ) return \"{0} + {1}\" . format ( a , b )",
    "text": "how to combine two number strings in python",
    "label": 1,
    "raw": "def pair_strings_sum_formatter(a, b):\n  \"\"\"\n  Formats the sum of a and b.\n\n  Note\n  ----\n  Both inputs are numbers already converted to strings.\n\n  \"\"\"\n  if b[:1] == \"-\":\n    return \"{0} - {1}\".format(a, b[1:])\n  return \"{0} + {1}\".format(a, b)"
  },
  {
    "id": "train-python-cosqa-train-19438",
    "code": "def inverted_dict_of_lists ( d ) : new_dict = { } for ( old_key , old_value_list ) in viewitems ( dict ( d ) ) : for new_key in listify ( old_value_list ) : new_dict [ new_key ] = old_key return new_dict",
    "text": "invert dictionary with list python",
    "label": 1,
    "raw": "def inverted_dict_of_lists(d):\n    \"\"\"Return a dict where the keys are all the values listed in the values of the original dict\n\n    >>> inverted_dict_of_lists({0: ['a', 'b'], 1: 'cd'}) == {'a': 0, 'b': 0, 'cd': 1}\n    True\n    \"\"\"\n    new_dict = {}\n    for (old_key, old_value_list) in viewitems(dict(d)):\n        for new_key in listify(old_value_list):\n            new_dict[new_key] = old_key\n    return new_dict"
  },
  {
    "id": "train-python-cosqa-train-18048",
    "code": "def _run_sync ( self , method : Callable , * args , * * kwargs ) -> Any : if self . loop . is_running ( ) : raise RuntimeError ( \"Event loop is already running.\" ) if not self . is_connected : self . loop . run_until_complete ( self . connect ( ) ) task = asyncio . Task ( method ( * args , * * kwargs ) , loop = self . loop ) result = self . loop . run_until_complete ( task ) self . loop . run_until_complete ( self . quit ( ) ) return result",
    "text": "test asyncio python not working",
    "label": 1,
    "raw": "def _run_sync(self, method: Callable, *args, **kwargs) -> Any:\n        \"\"\"\n        Utility method to run commands synchronously for testing.\n        \"\"\"\n        if self.loop.is_running():\n            raise RuntimeError(\"Event loop is already running.\")\n\n        if not self.is_connected:\n            self.loop.run_until_complete(self.connect())\n\n        task = asyncio.Task(method(*args, **kwargs), loop=self.loop)\n        result = self.loop.run_until_complete(task)\n\n        self.loop.run_until_complete(self.quit())\n\n        return result"
  },
  {
    "id": "train-python-cosqa-train-12793",
    "code": "def _mean_dict ( dict_list ) : return { k : np . array ( [ d [ k ] for d in dict_list ] ) . mean ( ) for k in dict_list [ 0 ] . keys ( ) }",
    "text": "average over python list of dicts",
    "label": 1,
    "raw": "def _mean_dict(dict_list):\n    \"\"\"Compute the mean value across a list of dictionaries\n    \"\"\"\n    return {k: np.array([d[k] for d in dict_list]).mean()\n            for k in dict_list[0].keys()}"
  },
  {
    "id": "train-python-cosqa-train-14308",
    "code": "def asMaskedArray ( self ) : return ma . masked_array ( data = self . data , mask = self . mask , fill_value = self . fill_value )",
    "text": "masked array to numpy array python",
    "label": 1,
    "raw": "def asMaskedArray(self):\n        \"\"\" Creates converts to a masked array\n        \"\"\"\n        return ma.masked_array(data=self.data, mask=self.mask, fill_value=self.fill_value)"
  },
  {
    "id": "train-python-cosqa-train-17500",
    "code": "def _mid ( pt1 , pt2 ) : ( x0 , y0 ) , ( x1 , y1 ) = pt1 , pt2 return 0.5 * ( x0 + x1 ) , 0.5 * ( y0 + y1 )",
    "text": "calculate mid of two points from lat long python",
    "label": 1,
    "raw": "def _mid(pt1, pt2):\n    \"\"\"\n    (Point, Point) -> Point\n    Return the point that lies in between the two input points.\n    \"\"\"\n    (x0, y0), (x1, y1) = pt1, pt2\n    return 0.5 * (x0 + x1), 0.5 * (y0 + y1)"
  },
  {
    "id": "train-python-cosqa-train-11945",
    "code": "def SegmentMax ( a , ids ) : func = lambda idxs : np . amax ( a [ idxs ] , axis = 0 ) return seg_map ( func , a , ids ) ,",
    "text": "how to use max function for a matrix python",
    "label": 1,
    "raw": "def SegmentMax(a, ids):\n    \"\"\"\n    Segmented max op.\n    \"\"\"\n    func = lambda idxs: np.amax(a[idxs], axis=0)\n    return seg_map(func, a, ids),"
  },
  {
    "id": "train-python-cosqa-train-13494",
    "code": "def update ( self , * * kwargs ) : self . reload_context ( es_based = False , * * kwargs ) return super ( ESCollectionView , self ) . update ( * * kwargs )",
    "text": "python listview context after changed",
    "label": 1,
    "raw": "def update(self, **kwargs):\n        \"\"\" Explicitly reload context with DB usage to get access\n        to complete DB object.\n        \"\"\"\n        self.reload_context(es_based=False, **kwargs)\n        return super(ESCollectionView, self).update(**kwargs)"
  },
  {
    "id": "train-python-cosqa-train-19920",
    "code": "def require ( executable : str , explanation : str = \"\" ) -> None : assert shutil . which ( executable ) , \"Need {!r} on the PATH.{}\" . format ( executable , \"\\n\" + explanation if explanation else \"\" )",
    "text": "python assert command not found",
    "label": 1,
    "raw": "def require(executable: str, explanation: str = \"\") -> None:\n    \"\"\"\n    Ensures that the external tool is available.\n    Asserts upon failure.\n    \"\"\"\n    assert shutil.which(executable), \"Need {!r} on the PATH.{}\".format(\n        executable, \"\\n\" + explanation if explanation else \"\")"
  },
  {
    "id": "train-python-cosqa-train-17851",
    "code": "def flatten_list ( x : List [ Any ] ) -> List [ Any ] : # noqa return [ item for sublist in x for item in sublist ]",
    "text": "how to flatten a list of lists in python",
    "label": 1,
    "raw": "def flatten_list(x: List[Any]) -> List[Any]:\n    \"\"\"\n    Converts a list of lists into a flat list.\n    \n    Args:\n        x: list of lists \n\n    Returns:\n        flat list\n        \n    As per\n    http://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python\n\n    \"\"\"  # noqa\n    return [item for sublist in x for item in sublist]"
  },
  {
    "id": "train-python-cosqa-train-10924",
    "code": "def batchify ( data , batch_size ) : nbatch = data . shape [ 0 ] // batch_size data = data [ : nbatch * batch_size ] data = data . reshape ( ( batch_size , nbatch ) ) . T return data",
    "text": "data length for reshape python",
    "label": 1,
    "raw": "def batchify(data, batch_size):\n    \"\"\"Reshape data into (num_example, batch_size)\"\"\"\n    nbatch = data.shape[0] // batch_size\n    data = data[:nbatch * batch_size]\n    data = data.reshape((batch_size, nbatch)).T\n    return data"
  },
  {
    "id": "train-python-cosqa-train-10018",
    "code": "def notin ( arg , values ) : op = ops . NotContains ( arg , values ) return op . to_expr ( )",
    "text": "python using or operation with in",
    "label": 1,
    "raw": "def notin(arg, values):\n    \"\"\"\n    Like isin, but checks whether this expression's value(s) are not\n    contained in the passed values. See isin docs for full usage.\n    \"\"\"\n    op = ops.NotContains(arg, values)\n    return op.to_expr()"
  },
  {
    "id": "train-python-cosqa-train-14474",
    "code": "def rm_keys_from_dict ( d , keys ) : # Loop for each key given for key in keys : # Is the key in the dictionary? if key in d : try : d . pop ( key , None ) except KeyError : # Not concerned with an error. Keep going. pass return d",
    "text": "remove value by key from dict python",
    "label": 1,
    "raw": "def rm_keys_from_dict(d, keys):\n    \"\"\"\n    Given a dictionary and a key list, remove any data in the dictionary with the given keys.\n\n    :param dict d: Metadata\n    :param list keys: Keys to be removed\n    :return dict d: Metadata\n    \"\"\"\n    # Loop for each key given\n    for key in keys:\n        # Is the key in the dictionary?\n        if key in d:\n            try:\n                d.pop(key, None)\n            except KeyError:\n                # Not concerned with an error. Keep going.\n                pass\n    return d"
  },
  {
    "id": "train-python-cosqa-train-13361",
    "code": "def get_time ( filename ) : ts = os . stat ( filename ) . st_mtime return datetime . datetime . utcfromtimestamp ( ts )",
    "text": "get the time created of a file python",
    "label": 1,
    "raw": "def get_time(filename):\n\t\"\"\"\n\tGet the modified time for a file as a datetime instance\n\t\"\"\"\n\tts = os.stat(filename).st_mtime\n\treturn datetime.datetime.utcfromtimestamp(ts)"
  },
  {
    "id": "train-python-cosqa-train-18014",
    "code": "def lowercase_chars ( string : any ) -> str : return '' . join ( [ c if c . islower ( ) else '' for c in str ( string ) ] )",
    "text": "python string \"any lowercase characters\"",
    "label": 1,
    "raw": "def lowercase_chars(string: any) -> str:\n        \"\"\"Return all (and only) the lowercase chars in the given string.\"\"\"\n        return ''.join([c if c.islower() else '' for c in str(string)])"
  },
  {
    "id": "train-python-cosqa-train-19461",
    "code": "def execute ( cur , * args ) : stmt = args [ 0 ] if len ( args ) > 1 : stmt = stmt . replace ( '%' , '%%' ) . replace ( '?' , '%r' ) print ( stmt % ( args [ 1 ] ) ) return cur . execute ( * args )",
    "text": "python + asign sql output to a varaible",
    "label": 1,
    "raw": "def execute(cur, *args):\n    \"\"\"Utility function to print sqlite queries before executing.\n\n    Use instead of cur.execute().  First argument is cursor.\n\n    cur.execute(stmt)\n    becomes\n    util.execute(cur, stmt)\n    \"\"\"\n    stmt = args[0]\n    if len(args) > 1:\n        stmt = stmt.replace('%', '%%').replace('?', '%r')\n        print(stmt % (args[1]))\n    return cur.execute(*args)"
  },
  {
    "id": "train-python-cosqa-train-12915",
    "code": "def contains_extractor ( document ) : tokens = _get_document_tokens ( document ) features = dict ( ( u'contains({0})' . format ( w ) , True ) for w in tokens ) return features",
    "text": "python extract feature words",
    "label": 1,
    "raw": "def contains_extractor(document):\n    \"\"\"A basic document feature extractor that returns a dict of words that the\n    document contains.\"\"\"\n    tokens = _get_document_tokens(document)\n    features = dict((u'contains({0})'.format(w), True) for w in tokens)\n    return features"
  },
  {
    "id": "train-python-cosqa-train-15097",
    "code": "def dot_v2 ( vec1 , vec2 ) : return vec1 . x * vec2 . x + vec1 . y * vec2 . y",
    "text": "python dot on two array of vectors",
    "label": 1,
    "raw": "def dot_v2(vec1, vec2):\n    \"\"\"Return the dot product of two vectors\"\"\"\n\n    return vec1.x * vec2.x + vec1.y * vec2.y"
  },
  {
    "id": "train-python-cosqa-train-10990",
    "code": "def screen_to_latlon ( self , x , y ) : xtile = 1. * x / TILE_SIZE + self . xtile ytile = 1. * y / TILE_SIZE + self . ytile return self . num2deg ( xtile , ytile , self . zoom )",
    "text": "python get pixel position from screen",
    "label": 1,
    "raw": "def screen_to_latlon(self, x, y):\n        \"\"\"\n        Return the latitude and longitude corresponding to a screen point\n        :param x: screen x\n        :param y: screen y\n        :return: latitude and longitude at x,y\n        \"\"\"\n        xtile = 1. * x / TILE_SIZE + self.xtile\n        ytile = 1. * y / TILE_SIZE + self.ytile\n        return self.num2deg(xtile, ytile, self.zoom)"
  },
  {
    "id": "train-python-cosqa-train-15939",
    "code": "def remove_parameter ( self , name ) : if name in self . __query : self . __query . pop ( name )",
    "text": "python query remove element",
    "label": 1,
    "raw": "def remove_parameter(self, name):\n\t\t\"\"\" Remove the specified parameter from this query\n\n\t\t:param name: name of a parameter to remove\n\t\t:return: None\n\t\t\"\"\"\n\t\tif name in self.__query:\n\t\t\tself.__query.pop(name)"
  },
  {
    "id": "train-python-cosqa-train-1993",
    "code": "def isnumber ( * args ) : return all ( map ( lambda c : isinstance ( c , int ) or isinstance ( c , float ) , args ) )",
    "text": "python check all inputs for type",
    "label": 1,
    "raw": "def isnumber(*args):\n    \"\"\"Checks if value is an integer, long integer or float.\n\n    NOTE: Treats booleans as numbers, where True=1 and False=0.\n    \"\"\"\n    return all(map(lambda c: isinstance(c, int) or isinstance(c, float), args))"
  },
  {
    "id": "train-python-cosqa-train-7481",
    "code": "def reduce_multiline ( string ) : string = str ( string ) return \" \" . join ( [ item . strip ( ) for item in string . split ( \"\\n\" ) if item . strip ( ) ] )",
    "text": "python remove newline with strip method of strings and list comprehensions",
    "label": 1,
    "raw": "def reduce_multiline(string):\n    \"\"\"\n    reduces a multiline string to a single line of text.\n\n\n    args:\n        string: the text to reduce\n    \"\"\"\n    string = str(string)\n    return \" \".join([item.strip()\n                     for item in string.split(\"\\n\")\n                     if item.strip()])"
  },
  {
    "id": "train-python-cosqa-train-13582",
    "code": "def pop ( self , key ) : if key in self . _keys : self . _keys . remove ( key ) super ( ListDict , self ) . pop ( key )",
    "text": "python method to remove entry from dictionary",
    "label": 1,
    "raw": "def pop (self, key):\n        \"\"\"Remove key from dict and return value.\"\"\"\n        if key in self._keys:\n            self._keys.remove(key)\n        super(ListDict, self).pop(key)"
  },
  {
    "id": "train-python-cosqa-train-11316",
    "code": "def size ( self ) : if self is NULL : return 0 return 1 + self . left . size ( ) + self . right . size ( )",
    "text": "python len function complexity",
    "label": 1,
    "raw": "def size(self):\n        \"\"\"\n        Recursively find size of a tree. Slow.\n        \"\"\"\n\n        if self is NULL:\n            return 0\n        return 1 + self.left.size() + self.right.size()"
  },
  {
    "id": "train-python-cosqa-train-12922",
    "code": "def is_number ( obj ) : return isinstance ( obj , ( int , float , np . int_ , np . float_ ) )",
    "text": "check if object is number python",
    "label": 1,
    "raw": "def is_number(obj):\n    \"\"\"Check if obj is number.\"\"\"\n    return isinstance(obj, (int, float, np.int_, np.float_))"
  },
  {
    "id": "train-python-cosqa-train-6565",
    "code": "def write_enum ( fo , datum , schema ) : index = schema [ 'symbols' ] . index ( datum ) write_int ( fo , index )",
    "text": "python enumerate enum values",
    "label": 1,
    "raw": "def write_enum(fo, datum, schema):\n    \"\"\"An enum is encoded by a int, representing the zero-based position of\n    the symbol in the schema.\"\"\"\n    index = schema['symbols'].index(datum)\n    write_int(fo, index)"
  },
  {
    "id": "train-python-cosqa-dev-90",
    "code": "def remove_ext ( fname ) : bn = os . path . basename ( fname ) return os . path . splitext ( bn ) [ 0 ]",
    "text": "python get file basename without extension",
    "label": 1,
    "raw": "def remove_ext(fname):\n    \"\"\"Removes the extension from a filename\n    \"\"\"\n    bn = os.path.basename(fname)\n    return os.path.splitext(bn)[0]"
  },
  {
    "id": "train-python-cosqa-train-13852",
    "code": "def detach_index ( self , name ) : assert type ( name ) == str if name in self . _indexes : del self . _indexes [ name ]",
    "text": "python remove an index",
    "label": 1,
    "raw": "def detach_index(self, name):\n        \"\"\"\n\n        :param name:\n        :return:\n        \"\"\"\n        assert type(name) == str\n\n        if name in self._indexes:\n            del self._indexes[name]"
  },
  {
    "id": "train-python-cosqa-train-14792",
    "code": "def return_letters_from_string ( text ) : out = \"\" for letter in text : if letter . isalpha ( ) : out += letter return out",
    "text": "what function goes through the letters in a string? python",
    "label": 1,
    "raw": "def return_letters_from_string(text):\n    \"\"\"Get letters from string only.\"\"\"\n    out = \"\"\n    for letter in text:\n        if letter.isalpha():\n            out += letter\n    return out"
  },
  {
    "id": "train-python-cosqa-train-16148",
    "code": "def main ( argv , version = DEFAULT_VERSION ) : tarball = download_setuptools ( ) _install ( tarball , _build_install_args ( argv ) )",
    "text": "python setuptools undefined distutils defines",
    "label": 1,
    "raw": "def main(argv, version=DEFAULT_VERSION):\n    \"\"\"Install or upgrade setuptools and EasyInstall\"\"\"\n    tarball = download_setuptools()\n    _install(tarball, _build_install_args(argv))"
  },
  {
    "id": "train-python-cosqa-train-12259",
    "code": "def list2string ( inlist , delimit = ' ' ) : stringlist = [ makestr ( _ ) for _ in inlist ] return string . join ( stringlist , delimit )",
    "text": "python3 join a list of string to a long string",
    "label": 1,
    "raw": "def list2string (inlist,delimit=' '):\n    \"\"\"\nConverts a 1D list to a single long string for file output, using\nthe string.join function.\n\nUsage:   list2string (inlist,delimit=' ')\nReturns: the string created from inlist\n\"\"\"\n    stringlist = [makestr(_) for _ in inlist]\n    return string.join(stringlist,delimit)"
  },
  {
    "id": "train-python-cosqa-train-17856",
    "code": "def split ( text : str ) -> List [ str ] : return [ word for word in SEPARATOR . split ( text ) if word . strip ( ' \\t' ) ]",
    "text": "python split on whitespace or punctuation",
    "label": 1,
    "raw": "def split(text: str) -> List[str]:\n    \"\"\"Split a text into a list of tokens.\n\n    :param text: the text to split\n    :return: tokens\n    \"\"\"\n    return [word for word in SEPARATOR.split(text) if word.strip(' \\t')]"
  },
  {
    "id": "train-python-cosqa-train-19441",
    "code": "def _kbhit_unix ( ) -> bool : dr , dw , de = select . select ( [ sys . stdin ] , [ ] , [ ] , 0 ) return dr != [ ]",
    "text": "python getch curses check if key is press",
    "label": 1,
    "raw": "def _kbhit_unix() -> bool:\n    \"\"\"\n    Under UNIX: is a keystroke available?\n    \"\"\"\n    dr, dw, de = select.select([sys.stdin], [], [], 0)\n    return dr != []"
  },
  {
    "id": "train-python-cosqa-train-11034",
    "code": "def getSystemVariable ( self , remote , name ) : if self . _server is not None : return self . _server . getSystemVariable ( remote , name )",
    "text": "python get variable attribute",
    "label": 1,
    "raw": "def getSystemVariable(self, remote, name):\n        \"\"\"Get single system variable from CCU / Homegear\"\"\"\n        if self._server is not None:\n            return self._server.getSystemVariable(remote, name)"
  },
  {
    "id": "train-python-cosqa-train-7514",
    "code": "def _replace_token_range ( tokens , start , end , replacement ) : tokens = tokens [ : start ] + replacement + tokens [ end : ] return tokens",
    "text": "python replace substring splice between words",
    "label": 1,
    "raw": "def _replace_token_range(tokens, start, end, replacement):\n    \"\"\"For a range indicated from start to end, replace with replacement.\"\"\"\n    tokens = tokens[:start] + replacement + tokens[end:]\n    return tokens"
  },
  {
    "id": "train-python-cosqa-train-16368",
    "code": "def table_exists ( cursor , tablename , schema = 'public' ) : query = \"\"\"\n    SELECT EXISTS (\n        SELECT 1\n        FROM information_schema.tables\n        WHERE table_schema = %s\n        AND table_name = %s\n    )\"\"\" cursor . execute ( query , ( schema , tablename ) ) res = cursor . fetchone ( ) [ 0 ] return res",
    "text": "if table exists python",
    "label": 1,
    "raw": "def table_exists(cursor, tablename, schema='public'):\n    query = \"\"\"\n    SELECT EXISTS (\n        SELECT 1\n        FROM information_schema.tables\n        WHERE table_schema = %s\n        AND table_name = %s\n    )\"\"\"\n    cursor.execute(query, (schema, tablename))\n    res = cursor.fetchone()[0]\n    return res"
  },
  {
    "id": "train-python-cosqa-train-9975",
    "code": "def as_list ( self ) : return [ self . name , self . value , [ x . as_list for x in self . children ] ]",
    "text": "python turn self into list",
    "label": 1,
    "raw": "def as_list(self):\n        \"\"\"Return all child objects in nested lists of strings.\"\"\"\n        return [self.name, self.value, [x.as_list for x in self.children]]"
  },
  {
    "id": "train-python-cosqa-train-14739",
    "code": "def update ( self , params ) : dev_info = self . json_state . get ( 'deviceInfo' ) dev_info . update ( { k : params [ k ] for k in params if dev_info . get ( k ) } )",
    "text": "update the value inside json python",
    "label": 1,
    "raw": "def update(self, params):\n        \"\"\"Update the dev_info data from a dictionary.\n\n        Only updates if it already exists in the device.\n        \"\"\"\n        dev_info = self.json_state.get('deviceInfo')\n        dev_info.update({k: params[k] for k in params if dev_info.get(k)})"
  },
  {
    "id": "train-python-cosqa-train-2934",
    "code": "def submit_form_id ( step , id ) : form = world . browser . find_element_by_xpath ( str ( 'id(\"{id}\")' . format ( id = id ) ) ) form . submit ( )",
    "text": "python mechanize how to identify login form by id",
    "label": 1,
    "raw": "def submit_form_id(step, id):\n    \"\"\"\n    Submit the form having given id.\n    \"\"\"\n    form = world.browser.find_element_by_xpath(str('id(\"{id}\")'.format(id=id)))\n    form.submit()"
  },
  {
    "id": "train-python-cosqa-train-18371",
    "code": "def uppercase_chars ( string : any ) -> str : return '' . join ( [ c if c . isupper ( ) else '' for c in str ( string ) ] )",
    "text": "making a string all uppercase python",
    "label": 1,
    "raw": "def uppercase_chars(string: any) -> str:\n        \"\"\"Return all (and only) the uppercase chars in the given string.\"\"\"\n        return ''.join([c if c.isupper() else '' for c in str(string)])"
  },
  {
    "id": "train-python-cosqa-train-19528",
    "code": "def clean_column_names ( df : DataFrame ) -> DataFrame : f = df . copy ( ) f . columns = [ col . strip ( ) for col in f . columns ] return f",
    "text": "remove data frame columns python",
    "label": 1,
    "raw": "def clean_column_names(df: DataFrame) -> DataFrame:\n    \"\"\"\n    Strip the whitespace from all column names in the given DataFrame\n    and return the result.\n    \"\"\"\n    f = df.copy()\n    f.columns = [col.strip() for col in f.columns]\n    return f"
  },
  {
    "id": "train-python-cosqa-train-14451",
    "code": "def remove_element ( self , e ) : if e . label is not None : self . elementdict . pop ( e . label ) self . elementlist . remove ( e )",
    "text": "remove element form python est",
    "label": 1,
    "raw": "def remove_element(self, e):\n        \"\"\"Remove element `e` from model\n        \"\"\"\n        \n        if e.label is not None: self.elementdict.pop(e.label)\n        self.elementlist.remove(e)"
  },
  {
    "id": "train-python-cosqa-train-19350",
    "code": "def stop ( self ) -> None : if self . _stop and not self . _posted_kork : self . _stop ( ) self . _stop = None",
    "text": "stop running function and passing to other variable python",
    "label": 1,
    "raw": "def stop(self) -> None:\n        \"\"\"Stops the analysis as soon as possible.\"\"\"\n        if self._stop and not self._posted_kork:\n            self._stop()\n            self._stop = None"
  },
  {
    "id": "train-python-cosqa-train-1970",
    "code": "def convert_tstamp ( response ) : if response is None : # Allow passing None to convert_tstamp() return response # Overrides the set timezone to UTC - I think... tz = timezone . utc if settings . USE_TZ else None return datetime . datetime . fromtimestamp ( response , tz )",
    "text": "timestramp datetime localtime python",
    "label": 1,
    "raw": "def convert_tstamp(response):\n\t\"\"\"\n\tConvert a Stripe API timestamp response (unix epoch) to a native datetime.\n\n\t:rtype: datetime\n\t\"\"\"\n\tif response is None:\n\t\t# Allow passing None to convert_tstamp()\n\t\treturn response\n\n\t# Overrides the set timezone to UTC - I think...\n\ttz = timezone.utc if settings.USE_TZ else None\n\n\treturn datetime.datetime.fromtimestamp(response, tz)"
  },
  {
    "id": "train-python-cosqa-train-17995",
    "code": "def find_duplicates ( l : list ) -> set : return set ( [ x for x in l if l . count ( x ) > 1 ] )",
    "text": "python checking for duplicates in a list",
    "label": 1,
    "raw": "def find_duplicates(l: list) -> set:\n    \"\"\"\n    Return the duplicates in a list.\n\n    The function relies on\n    https://stackoverflow.com/questions/9835762/find-and-list-duplicates-in-a-list .\n    Parameters\n    ----------\n    l : list\n        Name\n\n    Returns\n    -------\n    set\n        Duplicated values\n\n    >>> find_duplicates([1,2,3])\n    set()\n    >>> find_duplicates([1,2,1])\n    {1}\n    \"\"\"\n    return set([x for x in l if l.count(x) > 1])"
  },
  {
    "id": "train-python-cosqa-train-11347",
    "code": "def forward ( self , step ) : x = self . pos_x + math . cos ( math . radians ( self . rotation ) ) * step y = self . pos_y + math . sin ( math . radians ( self . rotation ) ) * step prev_brush_state = self . brush_on self . brush_on = True self . move ( x , y ) self . brush_on = prev_brush_state",
    "text": "how to change postition of turtle in python",
    "label": 1,
    "raw": "def forward(self, step):\n        \"\"\"Move the turtle forward.\n\n        :param step: Integer. Distance to move forward.\n        \"\"\"\n        x = self.pos_x + math.cos(math.radians(self.rotation)) * step\n        y = self.pos_y + math.sin(math.radians(self.rotation)) * step\n        prev_brush_state = self.brush_on\n        self.brush_on = True\n        self.move(x, y)\n        self.brush_on = prev_brush_state"
  },
  {
    "id": "train-python-cosqa-train-14274",
    "code": "def get ( url ) : response = urllib . request . urlopen ( url ) data = response . read ( ) data = data . decode ( \"utf-8\" ) data = json . loads ( data ) return data",
    "text": "python urllib2 receive json",
    "label": 1,
    "raw": "def get(url):\n    \"\"\"Recieving the JSON file from uulm\"\"\"\n    response = urllib.request.urlopen(url)\n    data = response.read()\n    data = data.decode(\"utf-8\")\n    data = json.loads(data)\n    return data"
  },
  {
    "id": "train-python-cosqa-train-6125",
    "code": "def set_scrollregion ( self , event = None ) : self . canvas . configure ( scrollregion = self . canvas . bbox ( 'all' ) )",
    "text": "python canvas auto scrolling text",
    "label": 1,
    "raw": "def set_scrollregion(self, event=None):\n        \"\"\" Set the scroll region on the canvas\"\"\"\n        self.canvas.configure(scrollregion=self.canvas.bbox('all'))"
  },
  {
    "id": "train-python-cosqa-train-19329",
    "code": "def _run_sync ( self , method : Callable , * args , * * kwargs ) -> Any : if self . loop . is_running ( ) : raise RuntimeError ( \"Event loop is already running.\" ) if not self . is_connected : self . loop . run_until_complete ( self . connect ( ) ) task = asyncio . Task ( method ( * args , * * kwargs ) , loop = self . loop ) result = self . loop . run_until_complete ( task ) self . loop . run_until_complete ( self . quit ( ) ) return result",
    "text": "asyncio python another loop unit tests",
    "label": 1,
    "raw": "def _run_sync(self, method: Callable, *args, **kwargs) -> Any:\n        \"\"\"\n        Utility method to run commands synchronously for testing.\n        \"\"\"\n        if self.loop.is_running():\n            raise RuntimeError(\"Event loop is already running.\")\n\n        if not self.is_connected:\n            self.loop.run_until_complete(self.connect())\n\n        task = asyncio.Task(method(*args, **kwargs), loop=self.loop)\n        result = self.loop.run_until_complete(task)\n\n        self.loop.run_until_complete(self.quit())\n\n        return result"
  },
  {
    "id": "train-python-cosqa-train-17537",
    "code": "def isarray ( array , test , dim = 2 ) : if dim > 1 : return all ( isarray ( array [ i ] , test , dim - 1 ) for i in range ( len ( array ) ) ) return all ( test ( i ) for i in array )",
    "text": "python if element in array meets conditions",
    "label": 1,
    "raw": "def isarray(array, test, dim=2):\n    \"\"\"Returns True if test is True for all array elements.\n    Otherwise, returns False.\n    \"\"\"\n    if dim > 1:\n        return all(isarray(array[i], test, dim - 1)\n                   for i in range(len(array)))\n    return all(test(i) for i in array)"
  },
  {
    "id": "train-python-cosqa-train-18774",
    "code": "def clean_map ( obj : Mapping [ Any , Any ] ) -> Mapping [ Any , Any ] : return { k : v for k , v in obj . items ( ) if v is not None }",
    "text": "python clearing a dict of any records with no values",
    "label": 1,
    "raw": "def clean_map(obj: Mapping[Any, Any]) -> Mapping[Any, Any]:\n    \"\"\"\n    Return a new copied dictionary without the keys with ``None`` values from\n    the given Mapping object.\n    \"\"\"\n    return {k: v for k, v in obj.items() if v is not None}"
  },
  {
    "id": "train-python-cosqa-train-8325",
    "code": "def is_changed ( ) : executed , changed_lines = execute_git ( 'status --porcelain' , output = False ) merge_not_finished = mod_path . exists ( '.git/MERGE_HEAD' ) return changed_lines . strip ( ) or merge_not_finished",
    "text": "python check git status for modified files",
    "label": 1,
    "raw": "def is_changed():\n    \"\"\" Checks if current project has any noncommited changes. \"\"\"\n    executed, changed_lines = execute_git('status --porcelain', output=False)\n    merge_not_finished = mod_path.exists('.git/MERGE_HEAD')\n    return changed_lines.strip() or merge_not_finished"
  },
  {
    "id": "train-python-cosqa-train-12060",
    "code": "def dimension_size ( x , axis ) : # Since tf.gather isn't \"constant-in, constant-out\", we must first check the # static shape or fallback to dynamic shape. s = tf . compat . dimension_value ( tensorshape_util . with_rank_at_least ( x . shape , np . abs ( axis ) ) [ axis ] ) if s is not None : return s return tf . shape ( input = x ) [ axis ]",
    "text": "python tensorflow dimensions of a tensor",
    "label": 1,
    "raw": "def dimension_size(x, axis):\n  \"\"\"Returns the size of a specific dimension.\"\"\"\n  # Since tf.gather isn't \"constant-in, constant-out\", we must first check the\n  # static shape or fallback to dynamic shape.\n  s = tf.compat.dimension_value(\n      tensorshape_util.with_rank_at_least(x.shape, np.abs(axis))[axis])\n  if s is not None:\n    return s\n  return tf.shape(input=x)[axis]"
  },
  {
    "id": "train-python-cosqa-train-18438",
    "code": "def issubset ( self , other ) : if len ( self ) > len ( other ) : # Fast check for obvious cases return False return all ( item in other for item in self )",
    "text": "check if set is subset of another set python",
    "label": 1,
    "raw": "def issubset(self, other):\n        \"\"\"\n        Report whether another set contains this set.\n\n        Example:\n            >>> OrderedSet([1, 2, 3]).issubset({1, 2})\n            False\n            >>> OrderedSet([1, 2, 3]).issubset({1, 2, 3, 4})\n            True\n            >>> OrderedSet([1, 2, 3]).issubset({1, 4, 3, 5})\n            False\n        \"\"\"\n        if len(self) > len(other):  # Fast check for obvious cases\n            return False\n        return all(item in other for item in self)"
  },
  {
    "id": "train-python-cosqa-train-12342",
    "code": "def delimited ( items , character = '|' ) : return '|' . join ( items ) if type ( items ) in ( list , tuple , set ) else items",
    "text": "removing a colon in a list of strings in python",
    "label": 1,
    "raw": "def delimited(items, character='|'):\n    \"\"\"Returns a character delimited version of the provided list as a Python string\"\"\"\n    return '|'.join(items) if type(items) in (list, tuple, set) else items"
  },
  {
    "id": "train-python-cosqa-train-1155",
    "code": "def linregress ( x , y , return_stats = False ) : a1 , a0 , r_value , p_value , stderr = scipy . stats . linregress ( x , y ) retval = a1 , a0 if return_stats : retval += r_value , p_value , stderr return retval",
    "text": "python regression with constraint",
    "label": 1,
    "raw": "def linregress(x, y, return_stats=False):\n    \"\"\"linear regression calculation\n\n    Parameters\n    ----\n    x :         independent variable (series)\n    y :         dependent variable (series)\n    return_stats : returns statistical values as well if required (bool)\n    \n\n    Returns\n    ----\n    list of parameters (and statistics)\n    \"\"\"\n    a1, a0, r_value, p_value, stderr = scipy.stats.linregress(x, y)\n\n    retval = a1, a0\n    if return_stats:\n        retval += r_value, p_value, stderr\n\n    return retval"
  },
  {
    "id": "train-python-cosqa-train-9973",
    "code": "def _to_java_object_rdd ( rdd ) : rdd = rdd . _reserialize ( AutoBatchedSerializer ( PickleSerializer ( ) ) ) return rdd . ctx . _jvm . org . apache . spark . ml . python . MLSerDe . pythonToJava ( rdd . _jrdd , True )",
    "text": "python turn list to rdd",
    "label": 1,
    "raw": "def _to_java_object_rdd(rdd):\n    \"\"\" Return an JavaRDD of Object by unpickling\n\n    It will convert each Python object into Java object by Pyrolite, whenever the\n    RDD is serialized in batch or not.\n    \"\"\"\n    rdd = rdd._reserialize(AutoBatchedSerializer(PickleSerializer()))\n    return rdd.ctx._jvm.org.apache.spark.ml.python.MLSerDe.pythonToJava(rdd._jrdd, True)"
  },
  {
    "id": "train-python-cosqa-train-19052",
    "code": "def find_editor ( ) -> str : editor = os . environ . get ( 'EDITOR' ) if not editor : if sys . platform [ : 3 ] == 'win' : editor = 'notepad' else : # Favor command-line editors first so we don't leave the terminal to edit for editor in [ 'vim' , 'vi' , 'emacs' , 'nano' , 'pico' , 'gedit' , 'kate' , 'subl' , 'geany' , 'atom' ] : if which ( editor ) : break return editor",
    "text": "set default editorfor python scripts windows",
    "label": 1,
    "raw": "def find_editor() -> str:\n    \"\"\"Find a reasonable editor to use by default for the system that the cmd2 application is running on.\"\"\"\n    editor = os.environ.get('EDITOR')\n    if not editor:\n        if sys.platform[:3] == 'win':\n            editor = 'notepad'\n        else:\n            # Favor command-line editors first so we don't leave the terminal to edit\n            for editor in ['vim', 'vi', 'emacs', 'nano', 'pico', 'gedit', 'kate', 'subl', 'geany', 'atom']:\n                if which(editor):\n                    break\n    return editor"
  },
  {
    "id": "train-python-cosqa-train-11229",
    "code": "def equal ( list1 , list2 ) : return [ item1 == item2 for item1 , item2 in broadcast_zip ( list1 , list2 ) ]",
    "text": "python indexing with list of booleans",
    "label": 1,
    "raw": "def equal(list1, list2):\n    \"\"\" takes flags returns indexes of True values \"\"\"\n    return [item1 == item2 for item1, item2 in broadcast_zip(list1, list2)]"
  },
  {
    "id": "train-python-cosqa-train-14965",
    "code": "def camel_to_ ( s ) : s1 = re . sub ( '(.)([A-Z][a-z]+)' , r'\\1_\\2' , s ) return re . sub ( '([a-z0-9])([A-Z])' , r'\\1_\\2' , s1 ) . lower ( )",
    "text": "capital to highercase converter in python",
    "label": 1,
    "raw": "def camel_to_(s):\n    \"\"\"\n    Convert CamelCase to camel_case\n    \"\"\"\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', s)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()"
  },
  {
    "id": "train-python-cosqa-train-10026",
    "code": "def email_type ( arg ) : if not is_valid_email_address ( arg ) : raise argparse . ArgumentTypeError ( \"{0} is not a valid email address\" . format ( repr ( arg ) ) ) return arg",
    "text": "python validate argv given",
    "label": 1,
    "raw": "def email_type(arg):\n\t\"\"\"An argparse type representing an email address.\"\"\"\n\tif not is_valid_email_address(arg):\n\t\traise argparse.ArgumentTypeError(\"{0} is not a valid email address\".format(repr(arg)))\n\treturn arg"
  },
  {
    "id": "train-python-cosqa-train-7848",
    "code": "def getMedian ( numericValues ) : theValues = sorted ( numericValues ) if len ( theValues ) % 2 == 1 : return theValues [ ( len ( theValues ) + 1 ) / 2 - 1 ] else : lower = theValues [ len ( theValues ) / 2 - 1 ] upper = theValues [ len ( theValues ) / 2 ] return ( float ( lower + upper ) ) / 2",
    "text": "python to calculate max min median",
    "label": 1,
    "raw": "def getMedian(numericValues):\n    \"\"\"\n    Gets the median of a list of values\n    Returns a float/int\n    \"\"\"\n    theValues = sorted(numericValues)\n\n    if len(theValues) % 2 == 1:\n        return theValues[(len(theValues) + 1) / 2 - 1]\n    else:\n        lower = theValues[len(theValues) / 2 - 1]\n        upper = theValues[len(theValues) / 2]\n\n        return (float(lower + upper)) / 2"
  },
  {
    "id": "train-python-cosqa-train-13148",
    "code": "def del_Unnamed ( df ) : cols_del = [ c for c in df . columns if 'Unnamed' in c ] return df . drop ( cols_del , axis = 1 )",
    "text": "dropping columns with wild card in column name from python data frame",
    "label": 1,
    "raw": "def del_Unnamed(df):\n    \"\"\"\n    Deletes all the unnamed columns\n\n    :param df: pandas dataframe\n    \"\"\"\n    cols_del=[c for c in df.columns if 'Unnamed' in c]\n    return df.drop(cols_del,axis=1)"
  },
  {
    "id": "train-python-cosqa-train-11140",
    "code": "def get_attribute_name_id ( attr ) : return attr . value . id if isinstance ( attr . value , ast . Name ) else None",
    "text": "get attribute name of a variable python",
    "label": 1,
    "raw": "def get_attribute_name_id(attr):\n    \"\"\"\n    Return the attribute name identifier\n    \"\"\"\n    return attr.value.id if isinstance(attr.value, ast.Name) else None"
  },
  {
    "id": "train-python-cosqa-train-4911",
    "code": "def next ( self ) : # I'm pretty sure this is the completely wrong way to go about this, but # oh well, this works. if not hasattr ( self , '_iter' ) : self . _iter = self . readrow_as_dict ( ) return self . _iter . next ( )",
    "text": "python iterrows get next row",
    "label": 1,
    "raw": "def next(self):\n        \"\"\"Retrieve the next row.\"\"\"\n        # I'm pretty sure this is the completely wrong way to go about this, but\n        # oh well, this works.\n        if not hasattr(self, '_iter'):\n            self._iter = self.readrow_as_dict()\n        return self._iter.next()"
  },
  {
    "id": "train-python-cosqa-train-1579",
    "code": "def set_empty ( self , row , column ) : subplot = self . get_subplot_at ( row , column ) subplot . set_empty ( )",
    "text": "leave subplots empty in python",
    "label": 1,
    "raw": "def set_empty(self, row, column):\n        \"\"\"Keep one of the subplots completely empty.\n\n        :param row,column: specify the subplot.\n\n        \"\"\"\n        subplot = self.get_subplot_at(row, column)\n        subplot.set_empty()"
  },
  {
    "id": "train-python-cosqa-train-11159",
    "code": "def head ( filename , n = 10 ) : with freader ( filename ) as fr : for _ in range ( n ) : print ( fr . readline ( ) . strip ( ) )",
    "text": "python how to print the first 10 lines in a large file",
    "label": 1,
    "raw": "def head(filename, n=10):\n    \"\"\" prints the top `n` lines of a file \"\"\"\n    with freader(filename) as fr:\n        for _ in range(n):\n            print(fr.readline().strip())"
  },
  {
    "id": "train-python-cosqa-train-10855",
    "code": "def _eager_tasklet ( tasklet ) : @ utils . wrapping ( tasklet ) def eager_wrapper ( * args , * * kwds ) : fut = tasklet ( * args , * * kwds ) _run_until_rpc ( ) return fut return eager_wrapper",
    "text": "python force lambda function to be eager",
    "label": 1,
    "raw": "def _eager_tasklet(tasklet):\n  \"\"\"Decorator to turn tasklet to run eagerly.\"\"\"\n\n  @utils.wrapping(tasklet)\n  def eager_wrapper(*args, **kwds):\n    fut = tasklet(*args, **kwds)\n    _run_until_rpc()\n    return fut\n\n  return eager_wrapper"
  },
  {
    "id": "train-python-cosqa-train-10717",
    "code": "def median_date ( dt_list ) : #dt_list_sort = sorted(dt_list) idx = len ( dt_list ) / 2 if len ( dt_list ) % 2 == 0 : md = mean_date ( [ dt_list [ idx - 1 ] , dt_list [ idx ] ] ) else : md = dt_list [ idx ] return md",
    "text": "calculate median of list of times python",
    "label": 1,
    "raw": "def median_date(dt_list):\n    \"\"\"Calcuate median datetime from datetime list\n    \"\"\"\n    #dt_list_sort = sorted(dt_list)\n    idx = len(dt_list)/2\n    if len(dt_list) % 2 == 0:\n        md = mean_date([dt_list[idx-1], dt_list[idx]])\n    else:\n        md = dt_list[idx]\n    return md"
  },
  {
    "id": "train-python-cosqa-train-14047",
    "code": "def save ( self , fname ) : with open ( fname , 'wb' ) as f : json . dump ( self , f )",
    "text": "how to save dictionary of object to file python",
    "label": 1,
    "raw": "def save(self, fname):\n        \"\"\" Saves the dictionary in json format\n        :param fname: file to save to\n        \"\"\"\n        with open(fname, 'wb') as f:\n            json.dump(self, f)"
  },
  {
    "id": "train-python-cosqa-train-13390",
    "code": "def _not_none ( items ) : if not isinstance ( items , ( tuple , list ) ) : items = ( items , ) return all ( item is not _none for item in items )",
    "text": "python is not none and condition",
    "label": 1,
    "raw": "def _not_none(items):\n    \"\"\"Whether the item is a placeholder or contains a placeholder.\"\"\"\n    if not isinstance(items, (tuple, list)):\n        items = (items,)\n    return all(item is not _none for item in items)"
  },
  {
    "id": "train-python-cosqa-train-9416",
    "code": "def filter_dict ( d , keys ) : return { k : v for k , v in d . items ( ) if k in keys }",
    "text": "how to filter a dictionary on the basis of key in python",
    "label": 1,
    "raw": "def filter_dict(d, keys):\n    \"\"\"\n    Creates a new dict from an existing dict that only has the given keys\n    \"\"\"\n    return {k: v for k, v in d.items() if k in keys}"
  },
  {
    "id": "train-python-cosqa-train-9367",
    "code": "def remove_last_line ( self ) : editor = self . _editor text_cursor = editor . textCursor ( ) text_cursor . movePosition ( text_cursor . End , text_cursor . MoveAnchor ) text_cursor . select ( text_cursor . LineUnderCursor ) text_cursor . removeSelectedText ( ) text_cursor . deletePreviousChar ( ) editor . setTextCursor ( text_cursor )",
    "text": "how to delete previous line on python",
    "label": 1,
    "raw": "def remove_last_line(self):\n        \"\"\"Removes the last line of the document.\"\"\"\n        editor = self._editor\n        text_cursor = editor.textCursor()\n        text_cursor.movePosition(text_cursor.End, text_cursor.MoveAnchor)\n        text_cursor.select(text_cursor.LineUnderCursor)\n        text_cursor.removeSelectedText()\n        text_cursor.deletePreviousChar()\n        editor.setTextCursor(text_cursor)"
  },
  {
    "id": "train-python-cosqa-train-13006",
    "code": "def _calc_overlap_count ( markers1 : dict , markers2 : dict , ) : overlaps = np . zeros ( ( len ( markers1 ) , len ( markers2 ) ) ) j = 0 for marker_group in markers1 : tmp = [ len ( markers2 [ i ] . intersection ( markers1 [ marker_group ] ) ) for i in markers2 . keys ( ) ] overlaps [ j , : ] = tmp j += 1 return overlaps",
    "text": "count number of overlaps in two python nested lists",
    "label": 1,
    "raw": "def _calc_overlap_count(\n    markers1: dict,\n    markers2: dict,\n):\n    \"\"\"Calculate overlap count between the values of two dictionaries\n\n    Note: dict values must be sets\n    \"\"\"\n    overlaps=np.zeros((len(markers1), len(markers2)))\n\n    j=0\n    for marker_group in markers1:\n        tmp = [len(markers2[i].intersection(markers1[marker_group])) for i in markers2.keys()]\n        overlaps[j,:] = tmp\n        j += 1\n\n    return overlaps"
  },
  {
    "id": "train-python-cosqa-train-7294",
    "code": "def read_proto_object ( fobj , klass ) : log . debug ( '%s chunk' , klass . __name__ ) obj = klass ( ) obj . ParseFromString ( read_block ( fobj ) ) log . debug ( 'Header: %s' , str ( obj ) ) return obj",
    "text": "python parse protobuf text file",
    "label": 1,
    "raw": "def read_proto_object(fobj, klass):\n    \"\"\"Read a block of data and parse using the given protobuf object.\"\"\"\n    log.debug('%s chunk', klass.__name__)\n    obj = klass()\n    obj.ParseFromString(read_block(fobj))\n    log.debug('Header: %s', str(obj))\n    return obj"
  },
  {
    "id": "train-python-cosqa-train-8459",
    "code": "def compare ( string1 , string2 ) : if len ( string1 ) != len ( string2 ) : return False result = True for c1 , c2 in izip ( string1 , string2 ) : result &= c1 == c2 return result",
    "text": "python compare multiple strings",
    "label": 1,
    "raw": "def compare(string1, string2):\n    \"\"\"Compare two strings while protecting against timing attacks\n\n    :param str string1: the first string\n    :param str string2: the second string\n\n    :returns: True if the strings are equal, False if not\n    :rtype: :obj:`bool`\n    \"\"\"\n    if len(string1) != len(string2):\n        return False\n    result = True\n    for c1, c2 in izip(string1, string2):\n        result &= c1 == c2\n    return result"
  },
  {
    "id": "train-python-cosqa-train-12338",
    "code": "def columnclean ( column ) : cleanedcolumn = str ( column ) . replace ( '%' , 'percent' ) . replace ( '(' , '_' ) . replace ( ')' , '' ) . replace ( 'As' , 'Adenosines' ) . replace ( 'Cs' , 'Cytosines' ) . replace ( 'Gs' , 'Guanines' ) . replace ( 'Ts' , 'Thymines' ) . replace ( 'Ns' , 'Unknowns' ) . replace ( 'index' , 'adapterIndex' ) return cleanedcolumn",
    "text": "remove white spaces on python column names",
    "label": 1,
    "raw": "def columnclean(column):\n        \"\"\"\n        Modifies column header format to be importable into a database\n        :param column: raw column header\n        :return: cleanedcolumn: reformatted column header\n        \"\"\"\n        cleanedcolumn = str(column) \\\n            .replace('%', 'percent') \\\n            .replace('(', '_') \\\n            .replace(')', '') \\\n            .replace('As', 'Adenosines') \\\n            .replace('Cs', 'Cytosines') \\\n            .replace('Gs', 'Guanines') \\\n            .replace('Ts', 'Thymines') \\\n            .replace('Ns', 'Unknowns') \\\n            .replace('index', 'adapterIndex')\n        return cleanedcolumn"
  },
  {
    "id": "train-python-cosqa-train-12779",
    "code": "def stdin_readable ( ) : if not WINDOWS : try : return bool ( select ( [ sys . stdin ] , [ ] , [ ] , 0 ) [ 0 ] ) except Exception : logger . log_exc ( ) try : return not sys . stdin . isatty ( ) except Exception : logger . log_exc ( ) return False",
    "text": "python detect stdin pressed",
    "label": 1,
    "raw": "def stdin_readable():\n    \"\"\"Determine whether stdin has any data to read.\"\"\"\n    if not WINDOWS:\n        try:\n            return bool(select([sys.stdin], [], [], 0)[0])\n        except Exception:\n            logger.log_exc()\n    try:\n        return not sys.stdin.isatty()\n    except Exception:\n        logger.log_exc()\n    return False"
  },
  {
    "id": "train-python-cosqa-train-9959",
    "code": "def eintr_retry ( exc_type , f , * args , * * kwargs ) : while True : try : return f ( * args , * * kwargs ) except exc_type as exc : if exc . errno != EINTR : raise else : break",
    "text": "python try excpetion finally block",
    "label": 1,
    "raw": "def eintr_retry(exc_type, f, *args, **kwargs):\n    \"\"\"Calls a function.  If an error of the given exception type with\n    interrupted system call (EINTR) occurs calls the function again.\n    \"\"\"\n    while True:\n        try:\n            return f(*args, **kwargs)\n        except exc_type as exc:\n            if exc.errno != EINTR:\n                raise\n        else:\n            break"
  },
  {
    "id": "train-python-cosqa-train-12641",
    "code": "def retry_call ( func , cleanup = lambda : None , retries = 0 , trap = ( ) ) : attempts = count ( ) if retries == float ( 'inf' ) else range ( retries ) for attempt in attempts : try : return func ( ) except trap : cleanup ( ) return func ( )",
    "text": "using a loop in a try catch block python",
    "label": 1,
    "raw": "def retry_call(func, cleanup=lambda: None, retries=0, trap=()):\n\t\"\"\"\n\tGiven a callable func, trap the indicated exceptions\n\tfor up to 'retries' times, invoking cleanup on the\n\texception. On the final attempt, allow any exceptions\n\tto propagate.\n\t\"\"\"\n\tattempts = count() if retries == float('inf') else range(retries)\n\tfor attempt in attempts:\n\t\ttry:\n\t\t\treturn func()\n\t\texcept trap:\n\t\t\tcleanup()\n\n\treturn func()"
  },
  {
    "id": "train-python-cosqa-train-12465",
    "code": "def sort_fn_list ( fn_list ) : dt_list = get_dt_list ( fn_list ) fn_list_sort = [ fn for ( dt , fn ) in sorted ( zip ( dt_list , fn_list ) ) ] return fn_list_sort",
    "text": "sort a dataset in python using date as a paramter",
    "label": 1,
    "raw": "def sort_fn_list(fn_list):\n    \"\"\"Sort input filename list by datetime\n    \"\"\"\n    dt_list = get_dt_list(fn_list)\n    fn_list_sort = [fn for (dt,fn) in sorted(zip(dt_list,fn_list))]\n    return fn_list_sort"
  },
  {
    "id": "train-python-cosqa-train-2605",
    "code": "def hard_equals ( a , b ) : if type ( a ) != type ( b ) : return False return a == b",
    "text": "equivalent or not equivalent python",
    "label": 1,
    "raw": "def hard_equals(a, b):\n    \"\"\"Implements the '===' operator.\"\"\"\n    if type(a) != type(b):\n        return False\n    return a == b"
  },
  {
    "id": "train-python-cosqa-train-12309",
    "code": "def addfield ( self , pkt , buf , val ) : self . set_endianess ( pkt ) return self . fld . addfield ( pkt , buf , val )",
    "text": "protobuf python add to zero length field",
    "label": 1,
    "raw": "def addfield(self, pkt, buf, val):\n        \"\"\"add the field with endianness to the buffer\"\"\"\n        self.set_endianess(pkt)\n        return self.fld.addfield(pkt, buf, val)"
  },
  {
    "id": "train-python-cosqa-train-9193",
    "code": "def _timestamp_to_json_row ( value ) : if isinstance ( value , datetime . datetime ) : value = _microseconds_from_datetime ( value ) * 1e-6 return value",
    "text": "python json timestamp to int",
    "label": 1,
    "raw": "def _timestamp_to_json_row(value):\n    \"\"\"Coerce 'value' to an JSON-compatible representation.\n\n    This version returns floating-point seconds value used in row data.\n    \"\"\"\n    if isinstance(value, datetime.datetime):\n        value = _microseconds_from_datetime(value) * 1e-6\n    return value"
  },
  {
    "id": "train-python-cosqa-train-10677",
    "code": "def setdefault ( obj , field , default ) : setattr ( obj , field , getattr ( obj , field , default ) )",
    "text": "python default function value not being overwritten",
    "label": 1,
    "raw": "def setdefault(obj, field, default):\n    \"\"\"Set an object's field to default if it doesn't have a value\"\"\"\n    setattr(obj, field, getattr(obj, field, default))"
  },
  {
    "id": "train-python-cosqa-train-1646",
    "code": "def log_loss ( preds , labels ) : log_likelihood = np . sum ( labels * np . log ( preds ) ) / len ( preds ) return - log_likelihood",
    "text": "maximize log likelihood python",
    "label": 1,
    "raw": "def log_loss(preds, labels):\n    \"\"\"Logarithmic loss with non-necessarily-binary labels.\"\"\"\n    log_likelihood = np.sum(labels * np.log(preds)) / len(preds)\n    return -log_likelihood"
  },
  {
    "id": "train-python-cosqa-train-12009",
    "code": "def adapt_array ( arr ) : out = io . BytesIO ( ) np . save ( out , arr ) , out . seek ( 0 ) return buffer ( out . read ( ) )",
    "text": "python store numpy array in database",
    "label": 1,
    "raw": "def adapt_array(arr):\n    \"\"\"\n    Adapts a Numpy array into an ARRAY string to put into the database.\n\n    Parameters\n    ----------\n    arr: array\n        The Numpy array to be adapted into an ARRAY type that can be inserted into a SQL file.\n\n    Returns\n    -------\n    ARRAY\n            The adapted array object\n\n    \"\"\"\n    out = io.BytesIO()\n    np.save(out, arr), out.seek(0)\n    return buffer(out.read())"
  },
  {
    "id": "train-python-cosqa-train-8287",
    "code": "def load ( self , name ) : name = ctypes . util . find_library ( name ) return ctypes . cdll . LoadLibrary ( name )",
    "text": "python cdll load dll windows",
    "label": 1,
    "raw": "def load(self, name):\n        \"\"\"Loads and returns foreign library.\"\"\"\n        name = ctypes.util.find_library(name)\n        return ctypes.cdll.LoadLibrary(name)"
  },
  {
    "id": "train-python-cosqa-train-3375",
    "code": "def match_files ( files , pattern : Pattern ) : for name in files : if re . match ( pattern , name ) : yield name",
    "text": "python select files by pattern",
    "label": 1,
    "raw": "def match_files(files, pattern: Pattern):\n    \"\"\"Yields file name if matches a regular expression pattern.\"\"\"\n\n    for name in files:\n        if re.match(pattern, name):\n            yield name"
  },
  {
    "id": "train-python-cosqa-train-10078",
    "code": "def sample_colormap ( cmap_name , n_samples ) : colors = [ ] colormap = cm . cmap_d [ cmap_name ] for i in np . linspace ( 0 , 1 , n_samples ) : colors . append ( colormap ( i ) ) return colors",
    "text": "map numerical values to colormap numbers python",
    "label": 1,
    "raw": "def sample_colormap(cmap_name, n_samples):\n    \"\"\"\n    Sample a colormap from matplotlib\n    \"\"\"\n    colors = []\n    colormap = cm.cmap_d[cmap_name]\n    for i in np.linspace(0, 1, n_samples):\n        colors.append(colormap(i))\n\n    return colors"
  },
  {
    "id": "train-python-cosqa-train-11599",
    "code": "def oplot ( self , x , y , * * kw ) : self . panel . oplot ( x , y , * * kw )",
    "text": "python plot specify figure",
    "label": 1,
    "raw": "def oplot(self, x, y, **kw):\n        \"\"\"generic plotting method, overplotting any existing plot \"\"\"\n        self.panel.oplot(x, y, **kw)"
  },
  {
    "id": "train-python-cosqa-train-17908",
    "code": "def grep ( pattern , filename ) : try : # for line in file # if line matches pattern: #    return line return next ( ( L for L in open ( filename ) if L . find ( pattern ) >= 0 ) ) except StopIteration : return ''",
    "text": "in python how do you use grep in a file",
    "label": 1,
    "raw": "def grep(pattern, filename):\n    \"\"\"Very simple grep that returns the first matching line in a file.\n    String matching only, does not do REs as currently implemented.\n    \"\"\"\n    try:\n        # for line in file\n        # if line matches pattern:\n        #    return line\n        return next((L for L in open(filename) if L.find(pattern) >= 0))\n    except StopIteration:\n        return ''"
  },
  {
    "id": "train-python-cosqa-train-9918",
    "code": "def convert_tstamp ( response ) : if response is None : # Allow passing None to convert_tstamp() return response # Overrides the set timezone to UTC - I think... tz = timezone . utc if settings . USE_TZ else None return datetime . datetime . fromtimestamp ( response , tz )",
    "text": "python time stampe type to datetime type",
    "label": 1,
    "raw": "def convert_tstamp(response):\n\t\"\"\"\n\tConvert a Stripe API timestamp response (unix epoch) to a native datetime.\n\n\t:rtype: datetime\n\t\"\"\"\n\tif response is None:\n\t\t# Allow passing None to convert_tstamp()\n\t\treturn response\n\n\t# Overrides the set timezone to UTC - I think...\n\ttz = timezone.utc if settings.USE_TZ else None\n\n\treturn datetime.datetime.fromtimestamp(response, tz)"
  },
  {
    "id": "train-python-cosqa-train-4946",
    "code": "def prettifysql ( sql ) : pretty = [ ] for line in sql . split ( '\\n' ) : pretty . extend ( [ \"%s,\\n\" % x for x in line . split ( ',' ) ] ) return pretty",
    "text": "how do you format sql in python",
    "label": 1,
    "raw": "def prettifysql(sql):\n    \"\"\"Returns a prettified version of the SQL as a list of lines to help\n    in creating a useful diff between two SQL statements.\"\"\"\n    pretty = []\n    for line in sql.split('\\n'):\n        pretty.extend([\"%s,\\n\" % x for x in line.split(',')])\n    return pretty"
  },
  {
    "id": "train-python-cosqa-train-7310",
    "code": "def _put_header ( self ) : self . session . _out ( '%%PDF-%s' % self . pdf_version ) if self . session . compression : self . session . buffer += '%' + chr ( 235 ) + chr ( 236 ) + chr ( 237 ) + chr ( 238 ) + \"\\n\"",
    "text": "python pdf header footer just",
    "label": 1,
    "raw": "def _put_header(self):\n        \"\"\" Standard first line in a PDF. \"\"\"\n        self.session._out('%%PDF-%s' % self.pdf_version)\n        if self.session.compression:\n            self.session.buffer += '%' + chr(235) + chr(236) + chr(237) + chr(238) + \"\\n\""
  },
  {
    "id": "train-python-cosqa-train-3601",
    "code": "def tuple_search ( t , i , v ) : for e in t : if e [ i ] == v : return e return None",
    "text": "index matching tuple, python",
    "label": 1,
    "raw": "def tuple_search(t, i, v):\n    \"\"\"\n    Search tuple array by index and value\n    :param t: tuple array\n    :param i: index of the value in each tuple\n    :param v: value\n    :return: the first tuple in the array with the specific index / value\n    \"\"\"\n    for e in t:\n        if e[i] == v:\n            return e\n    return None"
  },
  {
    "id": "train-python-cosqa-train-13513",
    "code": "def guess_media_type ( filepath ) : o = subprocess . check_output ( [ 'file' , '--mime-type' , '-Lb' , filepath ] ) o = o . strip ( ) return o",
    "text": "how to change the mime type of a file programmatically in python",
    "label": 1,
    "raw": "def guess_media_type(filepath):\n    \"\"\"Returns the media-type of the file at the given ``filepath``\"\"\"\n    o = subprocess.check_output(['file', '--mime-type', '-Lb', filepath])\n    o = o.strip()\n    return o"
  },
  {
    "id": "train-python-cosqa-train-13221",
    "code": "def iter_finds ( regex_obj , s ) : if isinstance ( regex_obj , str ) : for m in re . finditer ( regex_obj , s ) : yield m . group ( ) else : for m in regex_obj . finditer ( s ) : yield m . group ( )",
    "text": "finding patterns in python string",
    "label": 1,
    "raw": "def iter_finds(regex_obj, s):\n    \"\"\"Generate all matches found within a string for a regex and yield each match as a string\"\"\"\n    if isinstance(regex_obj, str):\n        for m in re.finditer(regex_obj, s):\n            yield m.group()\n    else:\n        for m in regex_obj.finditer(s):\n            yield m.group()"
  },
  {
    "id": "train-python-cosqa-train-19818",
    "code": "def lint ( fmt = 'colorized' ) : if fmt == 'html' : outfile = 'pylint_report.html' local ( 'pylint -f %s davies > %s || true' % ( fmt , outfile ) ) local ( 'open %s' % outfile ) else : local ( 'pylint -f %s davies || true' % fmt )",
    "text": "vs code python linting",
    "label": 1,
    "raw": "def lint(fmt='colorized'):\n    \"\"\"Run verbose PyLint on source. Optionally specify fmt=html for HTML output.\"\"\"\n    if fmt == 'html':\n        outfile = 'pylint_report.html'\n        local('pylint -f %s davies > %s || true' % (fmt, outfile))\n        local('open %s' % outfile)\n    else:\n        local('pylint -f %s davies || true' % fmt)"
  },
  {
    "id": "train-python-cosqa-train-14299",
    "code": "def adapter ( data , headers , * * kwargs ) : keys = ( 'sep_title' , 'sep_character' , 'sep_length' ) return vertical_table ( data , headers , * * filter_dict_by_key ( kwargs , keys ) )",
    "text": "python view table with headers",
    "label": 1,
    "raw": "def adapter(data, headers, **kwargs):\n    \"\"\"Wrap vertical table in a function for TabularOutputFormatter.\"\"\"\n    keys = ('sep_title', 'sep_character', 'sep_length')\n    return vertical_table(data, headers, **filter_dict_by_key(kwargs, keys))"
  },
  {
    "id": "train-python-cosqa-train-15561",
    "code": "def _clean_up_name ( self , name ) : for n in self . naughty : name = name . replace ( n , '_' ) return name",
    "text": "how can i remove name titles in python",
    "label": 1,
    "raw": "def _clean_up_name(self, name):\n        \"\"\"\n        Cleans up the name according to the rules specified in this exact\n        function. Uses self.naughty, a list of naughty characters.\n        \"\"\"\n        for n in self.naughty: name = name.replace(n, '_')\n        return name"
  },
  {
    "id": "train-python-cosqa-train-11866",
    "code": "def first ( series , order_by = None ) : if order_by is not None : series = order_series_by ( series , order_by ) first_s = series . iloc [ 0 ] return first_s",
    "text": "how to specify first elment of series python",
    "label": 1,
    "raw": "def first(series, order_by=None):\n    \"\"\"\n    Returns the first value of a series.\n\n    Args:\n        series (pandas.Series): column to summarize.\n\n    Kwargs:\n        order_by: a pandas.Series or list of series (can be symbolic) to order\n            the input series by before summarization.\n    \"\"\"\n\n    if order_by is not None:\n        series = order_series_by(series, order_by)\n    first_s = series.iloc[0]\n    return first_s"
  },
  {
    "id": "train-python-cosqa-train-7818",
    "code": "def get_cell ( self , index ) : i = sorted_index ( self . _index , index ) if self . _sort else self . _index . index ( index ) return self . _data [ i ]",
    "text": "index value of cell python",
    "label": 1,
    "raw": "def get_cell(self, index):\n        \"\"\"\n        For a single index and return the value\n\n        :param index: index value\n        :return: value\n        \"\"\"\n        i = sorted_index(self._index, index) if self._sort else self._index.index(index)\n        return self._data[i]"
  },
  {
    "id": "train-python-cosqa-train-8169",
    "code": "def multiply ( traj ) : z = traj . x * traj . y traj . f_add_result ( 'z' , z = z , comment = 'I am the product of two reals!' )",
    "text": "save product of funtion python",
    "label": 1,
    "raw": "def multiply(traj):\n    \"\"\"Sophisticated simulation of multiplication\"\"\"\n    z=traj.x*traj.y\n    traj.f_add_result('z',z=z, comment='I am the product of two reals!')"
  },
  {
    "id": "train-python-cosqa-train-11217",
    "code": "def _hue ( color , * * kwargs ) : h = colorsys . rgb_to_hls ( * [ x / 255.0 for x in color . value [ : 3 ] ] ) [ 0 ] return NumberValue ( h * 360.0 )",
    "text": "python image rgb to hsl hue",
    "label": 1,
    "raw": "def _hue(color, **kwargs):\n    \"\"\" Get hue value of HSL color.\n    \"\"\"\n    h = colorsys.rgb_to_hls(*[x / 255.0 for x in color.value[:3]])[0]\n    return NumberValue(h * 360.0)"
  },
  {
    "id": "train-python-cosqa-train-6943",
    "code": "def convolve_gaussian_2d ( image , gaussian_kernel_1d ) : result = scipy . ndimage . filters . correlate1d ( image , gaussian_kernel_1d , axis = 0 ) result = scipy . ndimage . filters . correlate1d ( result , gaussian_kernel_1d , axis = 1 ) return result",
    "text": "python image convolve with mask",
    "label": 1,
    "raw": "def convolve_gaussian_2d(image, gaussian_kernel_1d):\n    \"\"\"Convolve 2d gaussian.\"\"\"\n    result = scipy.ndimage.filters.correlate1d(\n        image, gaussian_kernel_1d, axis=0)\n    result = scipy.ndimage.filters.correlate1d(\n        result, gaussian_kernel_1d, axis=1)\n    return result"
  },
  {
    "id": "train-python-cosqa-train-8425",
    "code": "def gaussian_variogram_model ( m , d ) : psill = float ( m [ 0 ] ) range_ = float ( m [ 1 ] ) nugget = float ( m [ 2 ] ) return psill * ( 1. - np . exp ( - d ** 2. / ( range_ * 4. / 7. ) ** 2. ) ) + nugget",
    "text": "python code for a gaussian distribution",
    "label": 1,
    "raw": "def gaussian_variogram_model(m, d):\n    \"\"\"Gaussian model, m is [psill, range, nugget]\"\"\"\n    psill = float(m[0])\n    range_ = float(m[1])\n    nugget = float(m[2])\n    return psill * (1. - np.exp(-d**2./(range_*4./7.)**2.)) + nugget"
  },
  {
    "id": "train-python-cosqa-train-2498",
    "code": "def convert_timestamp ( timestamp ) : datetime = dt . datetime . utcfromtimestamp ( timestamp / 1000. ) return np . datetime64 ( datetime . replace ( tzinfo = None ) )",
    "text": "datetime64[ns, utc] python equivilant in mysql",
    "label": 1,
    "raw": "def convert_timestamp(timestamp):\n    \"\"\"\n    Converts bokehJS timestamp to datetime64.\n    \"\"\"\n    datetime = dt.datetime.utcfromtimestamp(timestamp/1000.)\n    return np.datetime64(datetime.replace(tzinfo=None))"
  },
  {
    "id": "train-python-cosqa-train-9485",
    "code": "def uniquify_list ( L ) : return [ e for i , e in enumerate ( L ) if L . index ( e ) == i ]",
    "text": "how to get unique list from list of list in python",
    "label": 1,
    "raw": "def uniquify_list(L):\n    \"\"\"Same order unique list using only a list compression.\"\"\"\n    return [e for i, e in enumerate(L) if L.index(e) == i]"
  },
  {
    "id": "train-python-cosqa-train-10940",
    "code": "def less_strict_bool ( x ) : if x is None : return False elif x is True or x is False : return x else : return strict_bool ( x )",
    "text": "defaultvalue for a boolean in python",
    "label": 1,
    "raw": "def less_strict_bool(x):\n    \"\"\"Idempotent and None-safe version of strict_bool.\"\"\"\n    if x is None:\n        return False\n    elif x is True or x is False:\n        return x\n    else:\n        return strict_bool(x)"
  },
  {
    "id": "train-python-cosqa-train-13869",
    "code": "def to_capitalized_camel_case ( snake_case_string ) : parts = snake_case_string . split ( '_' ) return '' . join ( [ i . title ( ) for i in parts ] )",
    "text": "how to make every capital letter lowercase python",
    "label": 1,
    "raw": "def to_capitalized_camel_case(snake_case_string):\n    \"\"\"\n    Convert a string from snake case to camel case with the first letter capitalized. For example, \"some_var\"\n    would become \"SomeVar\".\n\n    :param snake_case_string: Snake-cased string to convert to camel case.\n    :returns: Camel-cased version of snake_case_string.\n    \"\"\"\n    parts = snake_case_string.split('_')\n    return ''.join([i.title() for i in parts])"
  },
  {
    "id": "train-python-cosqa-train-875",
    "code": "def __delitem__ ( self , resource ) : self . __caches [ type ( resource ) ] . pop ( resource . get_cache_internal_key ( ) , None )",
    "text": "how to clear cache in python",
    "label": 1,
    "raw": "def __delitem__(self, resource):\n        \"\"\"Remove resource instance from internal cache\"\"\"\n        self.__caches[type(resource)].pop(resource.get_cache_internal_key(), None)"
  },
  {
    "id": "train-python-cosqa-train-7642",
    "code": "def _save_file ( self , filename , contents ) : with open ( filename , 'w' ) as f : f . write ( contents )",
    "text": "how to save string to html file in python",
    "label": 1,
    "raw": "def _save_file(self, filename, contents):\n        \"\"\"write the html file contents to disk\"\"\"\n        with open(filename, 'w') as f:\n            f.write(contents)"
  },
  {
    "id": "train-python-cosqa-train-14234",
    "code": "def cross_product_matrix ( vec ) : return np . array ( [ [ 0 , - vec [ 2 ] , vec [ 1 ] ] , [ vec [ 2 ] , 0 , - vec [ 0 ] ] , [ - vec [ 1 ] , vec [ 0 ] , 0 ] ] )",
    "text": "inverse of 3x3 matrix python",
    "label": 1,
    "raw": "def cross_product_matrix(vec):\n    \"\"\"Returns a 3x3 cross-product matrix from a 3-element vector.\"\"\"\n    return np.array([[0, -vec[2], vec[1]],\n                     [vec[2], 0, -vec[0]],\n                     [-vec[1], vec[0], 0]])"
  },
  {
    "id": "train-python-cosqa-train-11517",
    "code": "def is_serializable ( obj ) : if inspect . isclass ( obj ) : return Serializable . is_serializable_type ( obj ) return isinstance ( obj , Serializable ) or hasattr ( obj , '_asdict' )",
    "text": "python object of type bytes is not json serializable",
    "label": 1,
    "raw": "def is_serializable(obj):\n    \"\"\"Return `True` if the given object conforms to the Serializable protocol.\n\n    :rtype: bool\n    \"\"\"\n    if inspect.isclass(obj):\n      return Serializable.is_serializable_type(obj)\n    return isinstance(obj, Serializable) or hasattr(obj, '_asdict')"
  },
  {
    "id": "train-python-cosqa-train-3371",
    "code": "def unapostrophe ( text ) : text = re . sub ( r'[%s]s?$' % '' . join ( APOSTROPHES ) , '' , text ) return text",
    "text": "how to remove a paranthesis in a string python",
    "label": 1,
    "raw": "def unapostrophe(text):\n    \"\"\"Strip apostrophe and 's' from the end of a string.\"\"\"\n    text = re.sub(r'[%s]s?$' % ''.join(APOSTROPHES), '', text)\n    return text"
  },
  {
    "id": "train-python-cosqa-train-19167",
    "code": "def content_type ( self ) -> ContentType : return self . _ctype if self . _ctype else self . parent . content_type ( )",
    "text": "python get type of self",
    "label": 1,
    "raw": "def content_type(self) -> ContentType:\n        \"\"\"Return receiver's content type.\"\"\"\n        return self._ctype if self._ctype else self.parent.content_type()"
  },
  {
    "id": "train-python-cosqa-train-19603",
    "code": "def to_np ( * args ) : if len ( args ) > 1 : return ( cp . asnumpy ( x ) for x in args ) else : return cp . asnumpy ( args [ 0 ] )",
    "text": "python using arrays to return multiple values",
    "label": 1,
    "raw": "def to_np(*args):\n    \"\"\" convert GPU arras to numpy and return them\"\"\"\n    if len(args) > 1:\n        return (cp.asnumpy(x) for x in args)\n    else:\n        return cp.asnumpy(args[0])"
  },
  {
    "id": "train-python-cosqa-train-9217",
    "code": "def dedupe_list ( l ) : result = [ ] for el in l : if el not in result : result . append ( el ) return result",
    "text": "python list not duplicate",
    "label": 1,
    "raw": "def dedupe_list(l):\n    \"\"\"Remove duplicates from a list preserving the order.\n\n    We might be tempted to use the list(set(l)) idiom, but it doesn't preserve\n    the order, which hinders testability and does not work for lists with\n    unhashable elements.\n    \"\"\"\n    result = []\n\n    for el in l:\n        if el not in result:\n            result.append(el)\n\n    return result"
  },
  {
    "id": "train-python-cosqa-train-14365",
    "code": "def getvariable ( name ) : import inspect fr = inspect . currentframe ( ) try : while fr : fr = fr . f_back vars = fr . f_locals if name in vars : return vars [ name ] except : pass return None",
    "text": "python3 inspect get local variable",
    "label": 1,
    "raw": "def getvariable(name):\n    \"\"\"Get the value of a local variable somewhere in the call stack.\"\"\"\n    import inspect\n    fr = inspect.currentframe()\n    try:\n        while fr:\n            fr = fr.f_back\n            vars = fr.f_locals\n            if name in vars:\n                return vars[name]\n    except:\n        pass\n    return None"
  },
  {
    "id": "train-python-cosqa-train-12502",
    "code": "def getCenter ( self ) : return Location ( self . x + ( self . w / 2 ) , self . y + ( self . h / 2 ) )",
    "text": "python center region in square",
    "label": 1,
    "raw": "def getCenter(self):\n        \"\"\" Return the ``Location`` of the center of this region \"\"\"\n        return Location(self.x+(self.w/2), self.y+(self.h/2))"
  },
  {
    "id": "train-python-cosqa-train-18633",
    "code": "def strip_codes ( s : Any ) -> str : return codepat . sub ( '' , str ( s ) if ( s or ( s == 0 ) ) else '' )",
    "text": "remove logic symbol from python string",
    "label": 1,
    "raw": "def strip_codes(s: Any) -> str:\n    \"\"\" Strip all color codes from a string.\n        Returns empty string for \"falsey\" inputs.\n    \"\"\"\n    return codepat.sub('', str(s) if (s or (s == 0)) else '')"
  },
  {
    "id": "train-python-cosqa-train-12726",
    "code": "def convert_date ( date ) : date = convert_month ( date , shorten = False ) clean_string = convert_string ( date ) return datetime . strptime ( clean_string , DATE_FMT . replace ( '-' , '' ) )",
    "text": "python date parsing for month",
    "label": 1,
    "raw": "def convert_date(date):\n    \"\"\"Convert string to datetime object.\"\"\"\n    date = convert_month(date, shorten=False)\n    clean_string = convert_string(date)\n    return datetime.strptime(clean_string, DATE_FMT.replace('-',''))"
  },
  {
    "id": "train-python-cosqa-train-13794",
    "code": "def items ( self ) : return [ ( value_descriptor . name , value_descriptor . number ) for value_descriptor in self . _enum_type . values ]",
    "text": "python protobuf get enum value as text",
    "label": 1,
    "raw": "def items(self):\n    \"\"\"Return a list of the (name, value) pairs of the enum.\n\n    These are returned in the order they were defined in the .proto file.\n    \"\"\"\n    return [(value_descriptor.name, value_descriptor.number)\n            for value_descriptor in self._enum_type.values]"
  },
  {
    "id": "train-python-cosqa-train-14314",
    "code": "def is_square_matrix ( mat ) : mat = np . array ( mat ) if mat . ndim != 2 : return False shape = mat . shape return shape [ 0 ] == shape [ 1 ]",
    "text": "matrix in python to check accurecy",
    "label": 1,
    "raw": "def is_square_matrix(mat):\n    \"\"\"Test if an array is a square matrix.\"\"\"\n    mat = np.array(mat)\n    if mat.ndim != 2:\n        return False\n    shape = mat.shape\n    return shape[0] == shape[1]"
  },
  {
    "id": "train-python-cosqa-train-12147",
    "code": "def generate_unique_host_id ( ) : host = \".\" . join ( reversed ( socket . gethostname ( ) . split ( \".\" ) ) ) pid = os . getpid ( ) return \"%s.%d\" % ( host , pid )",
    "text": "python unique id in short lent",
    "label": 1,
    "raw": "def generate_unique_host_id():\n    \"\"\"Generate a unique ID, that is somewhat guaranteed to be unique among all\n    instances running at the same time.\"\"\"\n    host = \".\".join(reversed(socket.gethostname().split(\".\")))\n    pid = os.getpid()\n    return \"%s.%d\" % (host, pid)"
  },
  {
    "id": "train-python-cosqa-dev-12",
    "code": "def setDictDefaults ( d , defaults ) : for key , val in defaults . items ( ) : d . setdefault ( key , val ) return d",
    "text": "setdefault dictionary function python",
    "label": 1,
    "raw": "def setDictDefaults (d, defaults):\n  \"\"\"Sets all defaults for the given dictionary to those contained in a\n  second defaults dictionary.  This convenience method calls:\n\n    d.setdefault(key, value)\n\n  for each key and value in the given defaults dictionary.\n  \"\"\"\n  for key, val in defaults.items():\n    d.setdefault(key, val)\n\n  return d"
  },
  {
    "id": "train-python-cosqa-train-8532",
    "code": "def _join ( verb ) : data = pd . merge ( verb . x , verb . y , * * verb . kwargs ) # Preserve x groups if isinstance ( verb . x , GroupedDataFrame ) : data . plydata_groups = list ( verb . x . plydata_groups ) return data",
    "text": "python data frame outer join",
    "label": 1,
    "raw": "def _join(verb):\n    \"\"\"\n    Join helper\n    \"\"\"\n    data = pd.merge(verb.x, verb.y, **verb.kwargs)\n\n    # Preserve x groups\n    if isinstance(verb.x, GroupedDataFrame):\n        data.plydata_groups = list(verb.x.plydata_groups)\n    return data"
  },
  {
    "id": "train-python-cosqa-train-273",
    "code": "def cleanup ( self , app ) : if hasattr ( self . database . obj , 'close_all' ) : self . database . close_all ( )",
    "text": "close connection python sqlalchemy",
    "label": 1,
    "raw": "def cleanup(self, app):\n        \"\"\"Close all connections.\"\"\"\n        if hasattr(self.database.obj, 'close_all'):\n            self.database.close_all()"
  },
  {
    "id": "train-python-cosqa-train-10356",
    "code": "def out_shape_from_array ( arr ) : arr = np . asarray ( arr ) if arr . ndim == 1 : return arr . shape else : return ( arr . shape [ 1 ] , )",
    "text": "python array shape detection",
    "label": 1,
    "raw": "def out_shape_from_array(arr):\n    \"\"\"Get the output shape from an array.\"\"\"\n    arr = np.asarray(arr)\n    if arr.ndim == 1:\n        return arr.shape\n    else:\n        return (arr.shape[1],)"
  },
  {
    "id": "train-python-cosqa-train-10935",
    "code": "def find_largest_contig ( contig_lengths_dict ) : # Initialise the dictionary longest_contig_dict = dict ( ) for file_name , contig_lengths in contig_lengths_dict . items ( ) : # As the list is sorted in descending order, the largest contig is the first entry in the list longest_contig_dict [ file_name ] = contig_lengths [ 0 ] return longest_contig_dict",
    "text": "python get dictionary keys with largest values",
    "label": 1,
    "raw": "def find_largest_contig(contig_lengths_dict):\n    \"\"\"\n    Determine the largest contig for each strain\n    :param contig_lengths_dict: dictionary of strain name: reverse-sorted list of all contig lengths\n    :return: longest_contig_dict: dictionary of strain name: longest contig\n    \"\"\"\n    # Initialise the dictionary\n    longest_contig_dict = dict()\n    for file_name, contig_lengths in contig_lengths_dict.items():\n        # As the list is sorted in descending order, the largest contig is the first entry in the list\n        longest_contig_dict[file_name] = contig_lengths[0]\n    return longest_contig_dict"
  },
  {
    "id": "train-python-cosqa-train-12056",
    "code": "def compute_jaccard_index ( x_set , y_set ) : if not x_set or not y_set : return 0.0 intersection_cardinal = len ( x_set & y_set ) union_cardinal = len ( x_set | y_set ) return intersection_cardinal / float ( union_cardinal )",
    "text": "jaccard similarity product labelling python",
    "label": 1,
    "raw": "def compute_jaccard_index(x_set, y_set):\n    \"\"\"Return the Jaccard similarity coefficient of 2 given sets.\n\n    Args:\n        x_set (set): first set.\n        y_set (set): second set.\n\n    Returns:\n        float: Jaccard similarity coefficient.\n\n    \"\"\"\n    if not x_set or not y_set:\n        return 0.0\n\n    intersection_cardinal = len(x_set & y_set)\n    union_cardinal = len(x_set | y_set)\n\n    return intersection_cardinal / float(union_cardinal)"
  },
  {
    "id": "train-python-cosqa-train-1362",
    "code": "def SetValue ( self , row , col , value ) : self . dataframe . iloc [ row , col ] = value",
    "text": "how to set value in python data frame",
    "label": 1,
    "raw": "def SetValue(self, row, col, value):\n        \"\"\"\n        Set value in the pandas DataFrame\n        \"\"\"\n        self.dataframe.iloc[row, col] = value"
  },
  {
    "id": "train-python-cosqa-train-1353",
    "code": "def _removeStopwords ( text_list ) : output_list = [ ] for word in text_list : if word . lower ( ) not in _stopwords : output_list . append ( word ) return output_list",
    "text": "python spacy how to remove stopwords and lower",
    "label": 1,
    "raw": "def _removeStopwords(text_list):\n    \"\"\"\n    Removes stopwords contained in a list of words.\n\n    :param text_string: A list of strings.\n    :type text_string: list.\n\n    :returns: The input ``text_list`` with stopwords removed.\n    :rtype: list\n    \"\"\"\n\n    output_list = []\n\n    for word in text_list:\n        if word.lower() not in _stopwords:\n            output_list.append(word)\n\n    return output_list"
  },
  {
    "id": "train-python-cosqa-train-17414",
    "code": "def rate_limited ( max_per_hour : int , * args : Any ) -> Callable [ ... , Any ] : return util . rate_limited ( max_per_hour , * args )",
    "text": "python limit the execution time of the given functio",
    "label": 1,
    "raw": "def rate_limited(max_per_hour: int, *args: Any) -> Callable[..., Any]:\n    \"\"\"Rate limit a function.\"\"\"\n    return util.rate_limited(max_per_hour, *args)"
  },
  {
    "id": "train-python-cosqa-train-18251",
    "code": "def pack_bits ( longbits ) : byte = longbits & ( 0x0101010101010101 ) byte = ( byte | ( byte >> 7 ) ) & ( 0x0003000300030003 ) byte = ( byte | ( byte >> 14 ) ) & ( 0x0000000f0000000f ) byte = ( byte | ( byte >> 28 ) ) & ( 0x00000000000000ff ) return byte",
    "text": "extract bits of large numbers python",
    "label": 1,
    "raw": "def pack_bits( longbits ):\n    \"\"\"Crunch a 64-bit int (8 bool bytes) into a bitfield.\"\"\"\n    byte = longbits & (0x0101010101010101)\n    byte = (byte | (byte>>7)) & (0x0003000300030003)\n    byte = (byte | (byte>>14)) & (0x0000000f0000000f)\n    byte = (byte | (byte>>28)) & (0x00000000000000ff)\n    return byte"
  },
  {
    "id": "train-python-cosqa-train-11702",
    "code": "def wr_row_mergeall ( self , worksheet , txtstr , fmt , row_idx ) : hdridxval = len ( self . hdrs ) - 1 worksheet . merge_range ( row_idx , 0 , row_idx , hdridxval , txtstr , fmt ) return row_idx + 1",
    "text": "how to merge cells in python",
    "label": 1,
    "raw": "def wr_row_mergeall(self, worksheet, txtstr, fmt, row_idx):\n        \"\"\"Merge all columns and place text string in widened cell.\"\"\"\n        hdridxval = len(self.hdrs) - 1\n        worksheet.merge_range(row_idx, 0, row_idx, hdridxval, txtstr, fmt)\n        return row_idx + 1"
  },
  {
    "id": "train-python-cosqa-train-9908",
    "code": "def assert_valid_input ( cls , tag ) : # Fail on unexpected types. if not cls . is_tag ( tag ) : raise TypeError ( \"Expected a BeautifulSoup 'Tag', but instead recieved type {}\" . format ( type ( tag ) ) )",
    "text": "python test the type of input",
    "label": 1,
    "raw": "def assert_valid_input(cls, tag):\n        \"\"\"Check if valid input tag or document.\"\"\"\n\n        # Fail on unexpected types.\n        if not cls.is_tag(tag):\n            raise TypeError(\"Expected a BeautifulSoup 'Tag', but instead recieved type {}\".format(type(tag)))"
  },
  {
    "id": "train-python-cosqa-train-12033",
    "code": "def is_identifier ( string ) : matched = PYTHON_IDENTIFIER_RE . match ( string ) return bool ( matched ) and not keyword . iskeyword ( string )",
    "text": "invalid syntax python for a word",
    "label": 1,
    "raw": "def is_identifier(string):\n    \"\"\"Check if string could be a valid python identifier\n\n    :param string: string to be tested\n    :returns: True if string can be a python identifier, False otherwise\n    :rtype: bool\n    \"\"\"\n    matched = PYTHON_IDENTIFIER_RE.match(string)\n    return bool(matched) and not keyword.iskeyword(string)"
  },
  {
    "id": "train-python-cosqa-train-9843",
    "code": "def chunks ( iterable , size = 1 ) : iterator = iter ( iterable ) for element in iterator : yield chain ( [ element ] , islice ( iterator , size - 1 ) )",
    "text": "how to split the iterator object into chunks python",
    "label": 1,
    "raw": "def chunks(iterable, size=1):\n    \"\"\"Splits iterator in chunks.\"\"\"\n    iterator = iter(iterable)\n\n    for element in iterator:\n        yield chain([element], islice(iterator, size - 1))"
  },
  {
    "id": "train-python-cosqa-train-14542",
    "code": "def save_pdf ( path ) : pp = PdfPages ( path ) pp . savefig ( pyplot . gcf ( ) ) pp . close ( )",
    "text": "save figure to pdf python",
    "label": 1,
    "raw": "def save_pdf(path):\n  \"\"\"\n  Saves a pdf of the current matplotlib figure.\n\n  :param path: str, filepath to save to\n  \"\"\"\n\n  pp = PdfPages(path)\n  pp.savefig(pyplot.gcf())\n  pp.close()"
  },
  {
    "id": "train-python-cosqa-train-19351",
    "code": "def proper_round ( n ) : return int ( n ) + ( n / abs ( n ) ) * int ( abs ( n - int ( n ) ) >= 0.5 ) if n != 0 else 0",
    "text": "round to the nearest in python",
    "label": 1,
    "raw": "def proper_round(n):\n    \"\"\"\n    rounds float to closest int\n    :rtype: int\n    :param n: float\n    \"\"\"\n    return int(n) + (n / abs(n)) * int(abs(n - int(n)) >= 0.5) if n != 0 else 0"
  },
  {
    "id": "train-python-cosqa-train-16452",
    "code": "def qsize ( self ) : self . mutex . acquire ( ) n = self . _qsize ( ) self . mutex . release ( ) return n",
    "text": "python, get the size of the queue",
    "label": 1,
    "raw": "def qsize(self):\n        \"\"\"Return the approximate size of the queue (not reliable!).\"\"\"\n        self.mutex.acquire()\n        n = self._qsize()\n        self.mutex.release()\n        return n"
  },
  {
    "id": "train-python-cosqa-train-11106",
    "code": "def static_method ( cls , f ) : setattr ( cls , f . __name__ , staticmethod ( f ) ) return f",
    "text": "from staticmethod get function python",
    "label": 1,
    "raw": "def static_method(cls, f):\n        \"\"\"Decorator which dynamically binds static methods to the model for later use.\"\"\"\n        setattr(cls, f.__name__, staticmethod(f))\n        return f"
  },
  {
    "id": "train-python-cosqa-train-7313",
    "code": "def fix_call ( callable , * args , * * kw ) : try : val = callable ( * args , * * kw ) except TypeError : exc_info = fix_type_error ( None , callable , args , kw ) reraise ( * exc_info ) return val",
    "text": "how to fix python error 'type' object is not subscriptable",
    "label": 1,
    "raw": "def fix_call(callable, *args, **kw):\n    \"\"\"\n    Call ``callable(*args, **kw)`` fixing any type errors that come out.\n    \"\"\"\n    try:\n        val = callable(*args, **kw)\n    except TypeError:\n        exc_info = fix_type_error(None, callable, args, kw)\n        reraise(*exc_info)\n    return val"
  },
  {
    "id": "train-python-cosqa-train-9204",
    "code": "def prefix_list ( self , prefix , values ) : return list ( map ( lambda value : prefix + \" \" + value , values ) )",
    "text": "how to add a prefix to a list of strings in python",
    "label": 1,
    "raw": "def prefix_list(self, prefix, values):\n        \"\"\"\n        Add a prefix to a list of values.\n        \"\"\"\n        return list(map(lambda value: prefix + \" \" + value, values))"
  },
  {
    "id": "train-python-cosqa-train-14256",
    "code": "def _spawn_kafka_consumer_thread ( self ) : self . logger . debug ( \"Spawn kafka consumer thread\" \"\" ) self . _consumer_thread = Thread ( target = self . _consumer_loop ) self . _consumer_thread . setDaemon ( True ) self . _consumer_thread . start ( )",
    "text": "kafka consumer python loop",
    "label": 1,
    "raw": "def _spawn_kafka_consumer_thread(self):\n        \"\"\"Spawns a kafka continuous consumer thread\"\"\"\n        self.logger.debug(\"Spawn kafka consumer thread\"\"\")\n        self._consumer_thread = Thread(target=self._consumer_loop)\n        self._consumer_thread.setDaemon(True)\n        self._consumer_thread.start()"
  },
  {
    "id": "train-python-cosqa-train-13029",
    "code": "def zeros ( self , name , * * kwargs ) : return self . _write_op ( self . _zeros_nosync , name , * * kwargs )",
    "text": "python generate numpy array of zeros",
    "label": 1,
    "raw": "def zeros(self, name, **kwargs):\n        \"\"\"Create an array. Keyword arguments as per\n        :func:`zarr.creation.zeros`.\"\"\"\n        return self._write_op(self._zeros_nosync, name, **kwargs)"
  },
  {
    "id": "train-python-cosqa-train-17056",
    "code": "def most_significant_bit ( lst : np . ndarray ) -> int : return np . argwhere ( np . asarray ( lst ) == 1 ) [ 0 ] [ 0 ]",
    "text": "python largest index in array true",
    "label": 1,
    "raw": "def most_significant_bit(lst: np.ndarray) -> int:\n    \"\"\"\n    A helper function that finds the position of the most significant bit in a 1darray of 1s and 0s,\n    i.e. the first position where a 1 appears, reading left to right.\n\n    :param lst: a 1d array of 0s and 1s with at least one 1\n    :return: the first position in lst that a 1 appears\n    \"\"\"\n    return np.argwhere(np.asarray(lst) == 1)[0][0]"
  },
  {
    "id": "train-python-cosqa-train-10025",
    "code": "def _match_space_at_line ( line ) : regex = re . compile ( r\"^{0}$\" . format ( _MDL_COMMENT ) ) return regex . match ( line )",
    "text": "lines that start with exactly 7 spaces are treated as comments python",
    "label": 1,
    "raw": "def _match_space_at_line(line):\n    \"\"\"Return a re.match object if an empty comment was found on line.\"\"\"\n    regex = re.compile(r\"^{0}$\".format(_MDL_COMMENT))\n    return regex.match(line)"
  },
  {
    "id": "train-python-cosqa-train-16123",
    "code": "def adapt_array ( arr ) : out = io . BytesIO ( ) np . save ( out , arr ) , out . seek ( 0 ) return buffer ( out . read ( ) )",
    "text": "python serialize and save a numpy array",
    "label": 1,
    "raw": "def adapt_array(arr):\n    \"\"\"\n    Adapts a Numpy array into an ARRAY string to put into the database.\n\n    Parameters\n    ----------\n    arr: array\n        The Numpy array to be adapted into an ARRAY type that can be inserted into a SQL file.\n\n    Returns\n    -------\n    ARRAY\n            The adapted array object\n\n    \"\"\"\n    out = io.BytesIO()\n    np.save(out, arr), out.seek(0)\n    return buffer(out.read())"
  },
  {
    "id": "train-python-cosqa-train-684",
    "code": "def datatype ( dbtype , description , cursor ) : dt = cursor . db . introspection . get_field_type ( dbtype , description ) if type ( dt ) is tuple : return dt [ 0 ] else : return dt",
    "text": "get the data type in python code",
    "label": 1,
    "raw": "def datatype(dbtype, description, cursor):\n    \"\"\"Google AppEngine Helper to convert a data type into a string.\"\"\"\n    dt = cursor.db.introspection.get_field_type(dbtype, description)\n    if type(dt) is tuple:\n        return dt[0]\n    else:\n        return dt"
  },
  {
    "id": "train-python-cosqa-train-9020",
    "code": "def user_exists ( username ) : try : pwd . getpwnam ( username ) user_exists = True except KeyError : user_exists = False return user_exists",
    "text": "function to to check if user exist in python",
    "label": 1,
    "raw": "def user_exists(username):\n    \"\"\"Check if a user exists\"\"\"\n    try:\n        pwd.getpwnam(username)\n        user_exists = True\n    except KeyError:\n        user_exists = False\n    return user_exists"
  },
  {
    "id": "train-python-cosqa-train-7301",
    "code": "def extract_table_names ( query ) : # a good old fashioned regex. turns out this worked better than actually parsing the code tables_blocks = re . findall ( r'(?:FROM|JOIN)\\s+(\\w+(?:\\s*,\\s*\\w+)*)' , query , re . IGNORECASE ) tables = [ tbl for block in tables_blocks for tbl in re . findall ( r'\\w+' , block ) ] return set ( tables )",
    "text": "how to extract tables of a database in python",
    "label": 1,
    "raw": "def extract_table_names(query):\n    \"\"\" Extract table names from an SQL query. \"\"\"\n    # a good old fashioned regex. turns out this worked better than actually parsing the code\n    tables_blocks = re.findall(r'(?:FROM|JOIN)\\s+(\\w+(?:\\s*,\\s*\\w+)*)', query, re.IGNORECASE)\n    tables = [tbl\n              for block in tables_blocks\n              for tbl in re.findall(r'\\w+', block)]\n    return set(tables)"
  },
  {
    "id": "train-python-cosqa-train-5121",
    "code": "def line_count ( fn ) : with open ( fn ) as f : for i , l in enumerate ( f ) : pass return i + 1",
    "text": "how to count number of lines in a file in python\\",
    "label": 1,
    "raw": "def line_count(fn):\n    \"\"\" Get line count of file\n\n    Args:\n        fn (str): Path to file\n\n    Return:\n          Number of lines in file (int)\n    \"\"\"\n\n    with open(fn) as f:\n        for i, l in enumerate(f):\n            pass\n    return i + 1"
  },
  {
    "id": "train-python-cosqa-train-18810",
    "code": "def encode_list ( key , list_ ) : # type: (str, Iterable) -> Dict[str, str] if not list_ : return { } return { key : \" \" . join ( str ( i ) for i in list_ ) }",
    "text": "python creating dictionary from list of lists",
    "label": 1,
    "raw": "def encode_list(key, list_):\n    # type: (str, Iterable) -> Dict[str, str]\n    \"\"\"\n    Converts a list into a space-separated string and puts it in a dictionary\n\n    :param key: Dictionary key to store the list\n    :param list_: A list of objects\n    :return: A dictionary key->string or an empty dictionary\n    \"\"\"\n    if not list_:\n        return {}\n    return {key: \" \".join(str(i) for i in list_)}"
  },
  {
    "id": "train-python-cosqa-train-10733",
    "code": "def shape_list ( l , shape , dtype ) : return np . array ( l , dtype = dtype ) . reshape ( shape )",
    "text": "can you change the data type of an entire list in python",
    "label": 1,
    "raw": "def shape_list(l,shape,dtype):\n    \"\"\" Shape a list of lists into the appropriate shape and data type \"\"\"\n    return np.array(l, dtype=dtype).reshape(shape)"
  },
  {
    "id": "train-python-cosqa-dev-177",
    "code": "def _check_elements_equal ( lst ) : assert isinstance ( lst , list ) , \"Input value must be a list.\" return not lst or lst . count ( lst [ 0 ] ) == len ( lst )",
    "text": "python check if all elements in a list are equal",
    "label": 1,
    "raw": "def _check_elements_equal(lst):\n    \"\"\"\n    Returns true if all of the elements in the list are equal.\n    \"\"\"\n    assert isinstance(lst, list), \"Input value must be a list.\"\n    return not lst or lst.count(lst[0]) == len(lst)"
  },
  {
    "id": "train-python-cosqa-train-13733",
    "code": "def help_for_command ( command ) : help_text = pydoc . text . document ( command ) # remove backspaces return re . subn ( '.\\\\x08' , '' , help_text ) [ 0 ]",
    "text": "how to get help function in python",
    "label": 1,
    "raw": "def help_for_command(command):\n    \"\"\"Get the help text (signature + docstring) for a command (function).\"\"\"\n    help_text = pydoc.text.document(command)\n    # remove backspaces\n    return re.subn('.\\\\x08', '', help_text)[0]"
  },
  {
    "id": "train-python-cosqa-train-7504",
    "code": "def unescape_all ( string ) : def escape_single ( matchobj ) : return _unicode_for_entity_with_name ( matchobj . group ( 1 ) ) return entities . sub ( escape_single , string )",
    "text": "python replace html entities",
    "label": 1,
    "raw": "def unescape_all(string):\n    \"\"\"Resolve all html entities to their corresponding unicode character\"\"\"\n    def escape_single(matchobj):\n        return _unicode_for_entity_with_name(matchobj.group(1))\n    return entities.sub(escape_single, string)"
  },
  {
    "id": "train-python-cosqa-train-10285",
    "code": "def get_uniques ( l ) : result = [ ] for i in l : if i not in result : result . append ( i ) return result",
    "text": "return unique list vlaues python",
    "label": 1,
    "raw": "def get_uniques(l):\n    \"\"\" Returns a list with no repeated elements.\n    \"\"\"\n    result = []\n\n    for i in l:\n        if i not in result:\n            result.append(i)\n\n    return result"
  },
  {
    "id": "train-python-cosqa-train-10152",
    "code": "def check_str ( obj ) : if isinstance ( obj , str ) : return obj if isinstance ( obj , float ) : return str ( int ( obj ) ) else : return str ( obj )",
    "text": "pythonconvert any type to string",
    "label": 1,
    "raw": "def check_str(obj):\n        \"\"\" Returns a string for various input types \"\"\"\n        if isinstance(obj, str):\n            return obj\n        if isinstance(obj, float):\n            return str(int(obj))\n        else:\n            return str(obj)"
  },
  {
    "id": "train-python-cosqa-train-7933",
    "code": "def batch ( items , size ) : return [ items [ x : x + size ] for x in xrange ( 0 , len ( items ) , size ) ]",
    "text": "making a list of a specific size in python",
    "label": 1,
    "raw": "def batch(items, size):\n    \"\"\"Batches a list into a list of lists, with sub-lists sized by a specified\n    batch size.\"\"\"\n    return [items[x:x + size] for x in xrange(0, len(items), size)]"
  },
  {
    "id": "train-python-cosqa-train-13003",
    "code": "def parameter_vector ( self ) : return np . array ( [ getattr ( self , k ) for k in self . parameter_names ] )",
    "text": "python function array type",
    "label": 1,
    "raw": "def parameter_vector(self):\n        \"\"\"An array of all parameters (including frozen parameters)\"\"\"\n        return np.array([getattr(self, k) for k in self.parameter_names])"
  },
  {
    "id": "train-python-cosqa-train-11409",
    "code": "def merge_pdfs ( pdf_filepaths , out_filepath ) : merger = PdfFileMerger ( ) for pdf in pdf_filepaths : merger . append ( PdfFileReader ( open ( pdf , 'rb' ) ) ) merger . write ( out_filepath ) return out_filepath",
    "text": "python merge pdf files free",
    "label": 1,
    "raw": "def merge_pdfs(pdf_filepaths, out_filepath):\n    \"\"\" Merge all the PDF files in `pdf_filepaths` in a new PDF file `out_filepath`.\n\n    Parameters\n    ----------\n    pdf_filepaths: list of str\n        Paths to PDF files.\n\n    out_filepath: str\n        Path to the result PDF file.\n\n    Returns\n    -------\n    path: str\n        The output file path.\n    \"\"\"\n    merger = PdfFileMerger()\n    for pdf in pdf_filepaths:\n        merger.append(PdfFileReader(open(pdf, 'rb')))\n\n    merger.write(out_filepath)\n\n    return out_filepath"
  },
  {
    "id": "train-python-cosqa-train-15798",
    "code": "def compute_number_edges ( function ) : n = 0 for node in function . nodes : n += len ( node . sons ) return n",
    "text": "python number of edges in a set of nodes",
    "label": 1,
    "raw": "def compute_number_edges(function):\n    \"\"\"\n    Compute the number of edges of the CFG\n    Args:\n        function (core.declarations.function.Function)\n    Returns:\n        int\n    \"\"\"\n    n = 0\n    for node in function.nodes:\n        n += len(node.sons)\n    return n"
  },
  {
    "id": "train-python-cosqa-dev-343",
    "code": "def get_hline ( ) : return Window ( width = LayoutDimension . exact ( 1 ) , height = LayoutDimension . exact ( 1 ) , content = FillControl ( '-' , token = Token . Line ) )",
    "text": "how do you make a horizontal line in python",
    "label": 1,
    "raw": "def get_hline():\n    \"\"\" gets a horiztonal line \"\"\"\n    return Window(\n        width=LayoutDimension.exact(1),\n        height=LayoutDimension.exact(1),\n        content=FillControl('-', token=Token.Line))"
  },
  {
    "id": "train-python-cosqa-train-15588",
    "code": "def flatten_dict_join_keys ( dct , join_symbol = \" \" ) : return dict ( flatten_dict ( dct , join = lambda a , b : a + join_symbol + b ) )",
    "text": "python join items in dict",
    "label": 1,
    "raw": "def flatten_dict_join_keys(dct, join_symbol=\" \"):\n    \"\"\" Flatten dict with defined key join symbol.\n\n    :param dct: dict to flatten\n    :param join_symbol: default value is \" \"\n    :return:\n    \"\"\"\n    return dict( flatten_dict(dct, join=lambda a,b:a+join_symbol+b) )"
  },
  {
    "id": "train-python-cosqa-train-18308",
    "code": "def is_unicode ( string ) : str_type = str ( type ( string ) ) if str_type . find ( 'str' ) > 0 or str_type . find ( 'unicode' ) > 0 : return True return False",
    "text": "python verify if type is string",
    "label": 1,
    "raw": "def is_unicode(string):\n    \"\"\"Validates that the object itself is some kinda string\"\"\"\n    str_type = str(type(string))\n\n    if str_type.find('str') > 0 or str_type.find('unicode') > 0:\n        return True\n\n    return False"
  },
  {
    "id": "train-python-cosqa-train-13093",
    "code": "def on_press_key ( key , callback , suppress = False ) : return hook_key ( key , lambda e : e . event_type == KEY_UP or callback ( e ) , suppress = suppress )",
    "text": "detect any key press python",
    "label": 1,
    "raw": "def on_press_key(key, callback, suppress=False):\n    \"\"\"\n    Invokes `callback` for KEY_DOWN event related to the given key. For details see `hook`.\n    \"\"\"\n    return hook_key(key, lambda e: e.event_type == KEY_UP or callback(e), suppress=suppress)"
  },
  {
    "id": "train-python-cosqa-train-14011",
    "code": "def uniq ( seq ) : seen = set ( ) return [ x for x in seq if str ( x ) not in seen and not seen . add ( str ( x ) ) ]",
    "text": "python show all the uniques",
    "label": 1,
    "raw": "def uniq(seq):\n    \"\"\" Return a copy of seq without duplicates. \"\"\"\n    seen = set()\n    return [x for x in seq if str(x) not in seen and not seen.add(str(x))]"
  },
  {
    "id": "train-python-cosqa-train-18907",
    "code": "def memory_full ( ) : current_process = psutil . Process ( os . getpid ( ) ) return ( current_process . memory_percent ( ) > config . MAXIMUM_CACHE_MEMORY_PERCENTAGE )",
    "text": "how to make sure python stay in memory limit",
    "label": 1,
    "raw": "def memory_full():\n    \"\"\"Check if the memory is too full for further caching.\"\"\"\n    current_process = psutil.Process(os.getpid())\n    return (current_process.memory_percent() >\n            config.MAXIMUM_CACHE_MEMORY_PERCENTAGE)"
  },
  {
    "id": "train-python-cosqa-train-12416",
    "code": "def getbyteslice ( self , start , end ) : c = self . _rawarray [ start : end ] return c",
    "text": "python array slice end",
    "label": 1,
    "raw": "def getbyteslice(self, start, end):\n        \"\"\"Direct access to byte data.\"\"\"\n        c = self._rawarray[start:end]\n        return c"
  },
  {
    "id": "train-python-cosqa-train-11335",
    "code": "def comma_converter ( float_string ) : trans_table = maketrans ( b',' , b'.' ) return float ( float_string . translate ( trans_table ) )",
    "text": "how to cast a float in python",
    "label": 1,
    "raw": "def comma_converter(float_string):\n    \"\"\"Convert numbers to floats whether the decimal point is '.' or ','\"\"\"\n    trans_table = maketrans(b',', b'.')\n    return float(float_string.translate(trans_table))"
  },
  {
    "id": "train-python-cosqa-train-7609",
    "code": "def wordify ( text ) : stopset = set ( nltk . corpus . stopwords . words ( 'english' ) ) tokens = nltk . WordPunctTokenizer ( ) . tokenize ( text ) return [ w for w in tokens if w not in stopset ]",
    "text": "how to remove stopwords python without nltk",
    "label": 1,
    "raw": "def wordify(text):\n    \"\"\"Generate a list of words given text, removing punctuation.\n\n    Parameters\n    ----------\n    text : unicode\n        A piece of english text.\n\n    Returns\n    -------\n    words : list\n        List of words.\n    \"\"\"\n    stopset = set(nltk.corpus.stopwords.words('english'))\n    tokens = nltk.WordPunctTokenizer().tokenize(text)\n    return [w for w in tokens if w not in stopset]"
  },
  {
    "id": "train-python-cosqa-train-14543",
    "code": "def creation_time ( self ) : timestamp = self . _fsntfs_attribute . get_creation_time_as_integer ( ) return dfdatetime_filetime . Filetime ( timestamp = timestamp )",
    "text": "python attribute for file date created",
    "label": 1,
    "raw": "def creation_time(self):\n    \"\"\"dfdatetime.Filetime: creation time or None if not set.\"\"\"\n    timestamp = self._fsntfs_attribute.get_creation_time_as_integer()\n    return dfdatetime_filetime.Filetime(timestamp=timestamp)"
  },
  {
    "id": "train-python-cosqa-train-5647",
    "code": "def getEventTypeNameFromEnum ( self , eType ) : fn = self . function_table . getEventTypeNameFromEnum result = fn ( eType ) return result",
    "text": "python string to enum name",
    "label": 1,
    "raw": "def getEventTypeNameFromEnum(self, eType):\n        \"\"\"returns the name of an EVREvent enum value\"\"\"\n\n        fn = self.function_table.getEventTypeNameFromEnum\n        result = fn(eType)\n        return result"
  },
  {
    "id": "train-python-cosqa-train-16603",
    "code": "def shape_list ( l , shape , dtype ) : return np . array ( l , dtype = dtype ) . reshape ( shape )",
    "text": "reshape a list as an array in python",
    "label": 1,
    "raw": "def shape_list(l,shape,dtype):\n    \"\"\" Shape a list of lists into the appropriate shape and data type \"\"\"\n    return np.array(l, dtype=dtype).reshape(shape)"
  },
  {
    "id": "train-python-cosqa-train-14107",
    "code": "def stop ( self ) : if self . _progressing : self . _progressing = False self . _thread . join ( )",
    "text": "how to stop a runaway thread in python",
    "label": 1,
    "raw": "def stop(self):\n        \"\"\"Stop the progress bar.\"\"\"\n        if self._progressing:\n            self._progressing = False\n            self._thread.join()"
  },
  {
    "id": "train-python-cosqa-train-15270",
    "code": "def get_flat_size ( self ) : return sum ( np . prod ( v . get_shape ( ) . as_list ( ) ) for v in self . variables . values ( ) )",
    "text": "dimensions of a variable in python",
    "label": 1,
    "raw": "def get_flat_size(self):\n        \"\"\"Returns the total length of all of the flattened variables.\n\n        Returns:\n            The length of all flattened variables concatenated.\n        \"\"\"\n        return sum(\n            np.prod(v.get_shape().as_list()) for v in self.variables.values())"
  },
  {
    "id": "train-python-cosqa-train-18577",
    "code": "def chars ( string : any ) -> str : return '' . join ( [ c if c . isalpha ( ) else '' for c in str ( string ) ] )",
    "text": "how to check if any char in a string is alpha python",
    "label": 1,
    "raw": "def chars(string: any) -> str:\n        \"\"\"Return all (and only) the chars in the given string.\"\"\"\n        return ''.join([c if c.isalpha() else '' for c in str(string)])"
  },
  {
    "id": "train-python-cosqa-train-15864",
    "code": "def unpickle_file ( picklefile , * * kwargs ) : with open ( picklefile , 'rb' ) as f : return pickle . load ( f , * * kwargs )",
    "text": "python pickle load return value",
    "label": 1,
    "raw": "def unpickle_file(picklefile, **kwargs):\n    \"\"\"Helper function to unpickle data from `picklefile`.\"\"\"\n    with open(picklefile, 'rb') as f:\n        return pickle.load(f, **kwargs)"
  },
  {
    "id": "train-python-cosqa-train-19464",
    "code": "def string ( value ) -> str : return system_json . dumps ( Json ( value ) . safe_object ( ) , ensure_ascii = False )",
    "text": "json to pure string python",
    "label": 1,
    "raw": "def string(value) -> str:\n        \"\"\" string dict/object/value to JSON \"\"\"\n        return system_json.dumps(Json(value).safe_object(), ensure_ascii=False)"
  },
  {
    "id": "train-python-cosqa-train-8803",
    "code": "def closing_plugin ( self , cancelable = False ) : self . dialog_manager . close_all ( ) self . shell . exit_interpreter ( ) return True",
    "text": "python for window to popup before main window closes",
    "label": 1,
    "raw": "def closing_plugin(self, cancelable=False):\n        \"\"\"Perform actions before parent main window is closed\"\"\"\n        self.dialog_manager.close_all()\n        self.shell.exit_interpreter()\n        return True"
  },
  {
    "id": "train-python-cosqa-train-17244",
    "code": "def get_column_names ( engine : Engine , tablename : str ) -> List [ str ] : return [ info . name for info in gen_columns_info ( engine , tablename ) ]",
    "text": "python return all column names",
    "label": 1,
    "raw": "def get_column_names(engine: Engine, tablename: str) -> List[str]:\n    \"\"\"\n    Get all the database column names for the specified table.\n    \"\"\"\n    return [info.name for info in gen_columns_info(engine, tablename)]"
  },
  {
    "id": "train-python-cosqa-train-18282",
    "code": "def is_prime ( n ) : if n % 2 == 0 and n > 2 : return False return all ( n % i for i in range ( 3 , int ( math . sqrt ( n ) ) + 1 , 2 ) )",
    "text": "determine if a number is a prime factor python",
    "label": 1,
    "raw": "def is_prime(n):\n    \"\"\"\n    Check if n is a prime number\n    \"\"\"\n    if n % 2 == 0 and n > 2:\n        return False\n    return all(n % i for i in range(3, int(math.sqrt(n)) + 1, 2))"
  },
  {
    "id": "train-python-cosqa-train-9649",
    "code": "def set_json_item ( key , value ) : data = get_json ( ) data [ key ] = value request = get_request ( ) request [ \"BODY\" ] = json . dumps ( data )",
    "text": "how to pass json in body in http post request from python",
    "label": 1,
    "raw": "def set_json_item(key, value):\n    \"\"\" manipulate json data on the fly\n    \"\"\"\n    data = get_json()\n    data[key] = value\n\n    request = get_request()\n    request[\"BODY\"] = json.dumps(data)"
  },
  {
    "id": "train-python-cosqa-train-14897",
    "code": "def rgba_bytes_tuple ( self , x ) : return tuple ( int ( u * 255.9999 ) for u in self . rgba_floats_tuple ( x ) )",
    "text": "python color not in tuple",
    "label": 1,
    "raw": "def rgba_bytes_tuple(self, x):\n        \"\"\"Provides the color corresponding to value `x` in the\n        form of a tuple (R,G,B,A) with int values between 0 and 255.\n        \"\"\"\n        return tuple(int(u*255.9999) for u in self.rgba_floats_tuple(x))"
  },
  {
    "id": "train-python-cosqa-train-8892",
    "code": "def get_idx_rect ( index_list ) : rows , cols = list ( zip ( * [ ( i . row ( ) , i . column ( ) ) for i in index_list ] ) ) return ( min ( rows ) , max ( rows ) , min ( cols ) , max ( cols ) )",
    "text": "python get maximum and minimum index list",
    "label": 1,
    "raw": "def get_idx_rect(index_list):\n    \"\"\"Extract the boundaries from a list of indexes\"\"\"\n    rows, cols = list(zip(*[(i.row(), i.column()) for i in index_list]))\n    return ( min(rows), max(rows), min(cols), max(cols) )"
  },
  {
    "id": "train-python-cosqa-train-18307",
    "code": "def stretch ( iterable , n = 2 ) : times = range ( n ) for item in iterable : for i in times : yield item",
    "text": "python for n in arange loop numper of times",
    "label": 1,
    "raw": "def stretch(iterable, n=2):\n    r\"\"\"Repeat each item in `iterable` `n` times.\n\n    Example:\n\n    >>> list(stretch(range(3), 2))\n    [0, 0, 1, 1, 2, 2]\n    \"\"\"\n    times = range(n)\n    for item in iterable:\n        for i in times: yield item"
  },
  {
    "id": "train-python-cosqa-train-2592",
    "code": "def get_file_size ( filename ) : if os . path . isfile ( filename ) : return convert_size ( os . path . getsize ( filename ) ) return None",
    "text": "python how to check file size",
    "label": 1,
    "raw": "def get_file_size(filename):\n    \"\"\"\n    Get the file size of a given file\n\n    :param filename: string: pathname of a file\n    :return: human readable filesize\n    \"\"\"\n    if os.path.isfile(filename):\n        return convert_size(os.path.getsize(filename))\n    return None"
  },
  {
    "id": "train-python-cosqa-train-7570",
    "code": "def get_randomized_guid_sample ( self , item_count ) : dataset = self . get_whitelist ( ) random . shuffle ( dataset ) return dataset [ : item_count ]",
    "text": "how to randomize a select list in python",
    "label": 1,
    "raw": "def get_randomized_guid_sample(self, item_count):\n        \"\"\" Fetch a subset of randomzied GUIDs from the whitelist \"\"\"\n        dataset = self.get_whitelist()\n        random.shuffle(dataset)\n        return dataset[:item_count]"
  },
  {
    "id": "train-python-cosqa-train-10166",
    "code": "def gen_random_string ( str_len ) : return '' . join ( random . choice ( string . ascii_letters + string . digits ) for _ in range ( str_len ) )",
    "text": "random string of 5 characters inn python",
    "label": 1,
    "raw": "def gen_random_string(str_len):\n    \"\"\" generate random string with specified length\n    \"\"\"\n    return ''.join(\n        random.choice(string.ascii_letters + string.digits) for _ in range(str_len))"
  },
  {
    "id": "train-python-cosqa-train-12823",
    "code": "async def join ( self , ctx , * , channel : discord . VoiceChannel ) : if ctx . voice_client is not None : return await ctx . voice_client . move_to ( channel ) await channel . connect ( )",
    "text": "python discord join voice channel bot",
    "label": 1,
    "raw": "async def join(self, ctx, *, channel: discord.VoiceChannel):\n        \"\"\"Joins a voice channel\"\"\"\n\n        if ctx.voice_client is not None:\n            return await ctx.voice_client.move_to(channel)\n\n        await channel.connect()"
  },
  {
    "id": "train-python-cosqa-train-14501",
    "code": "def replaceNewlines ( string , newlineChar ) : if newlineChar in string : segments = string . split ( newlineChar ) string = \"\" for segment in segments : string += segment return string",
    "text": "replacing new line from string in python",
    "label": 1,
    "raw": "def replaceNewlines(string, newlineChar):\n\t\"\"\"There's probably a way to do this with string functions but I was lazy.\n\t\tReplace all instances of \\r or \\n in a string with something else.\"\"\"\n\tif newlineChar in string:\n\t\tsegments = string.split(newlineChar)\n\t\tstring = \"\"\n\t\tfor segment in segments:\n\t\t\tstring += segment\n\treturn string"
  },
  {
    "id": "train-python-cosqa-train-10493",
    "code": "def is_file ( path ) : try : return path . expanduser ( ) . absolute ( ) . is_file ( ) except AttributeError : return os . path . isfile ( os . path . abspath ( os . path . expanduser ( str ( path ) ) ) )",
    "text": "python check if a path is a file",
    "label": 1,
    "raw": "def is_file(path):\n    \"\"\"Determine if a Path or string is a file on the file system.\"\"\"\n    try:\n        return path.expanduser().absolute().is_file()\n    except AttributeError:\n        return os.path.isfile(os.path.abspath(os.path.expanduser(str(path))))"
  },
  {
    "id": "train-python-cosqa-train-13998",
    "code": "def mock_decorator ( * args , * * kwargs ) : def _called_decorator ( dec_func ) : @ wraps ( dec_func ) def _decorator ( * args , * * kwargs ) : return dec_func ( ) return _decorator return _called_decorator",
    "text": "how to replace database call of a function in python mock",
    "label": 1,
    "raw": "def mock_decorator(*args, **kwargs):\n    \"\"\"Mocked decorator, needed in the case we need to mock a decorator\"\"\"\n    def _called_decorator(dec_func):\n        @wraps(dec_func)\n        def _decorator(*args, **kwargs):\n            return dec_func()\n        return _decorator\n    return _called_decorator"
  },
  {
    "id": "train-python-cosqa-train-9838",
    "code": "def _serialize_json ( obj , fp ) : json . dump ( obj , fp , indent = 4 , default = serialize )",
    "text": "python stream json to a file",
    "label": 1,
    "raw": "def _serialize_json(obj, fp):\n    \"\"\" Serialize ``obj`` as a JSON formatted stream to ``fp`` \"\"\"\n    json.dump(obj, fp, indent=4, default=serialize)"
  },
  {
    "id": "train-python-cosqa-train-7136",
    "code": "def to_camel_case ( text ) : split = text . split ( '_' ) return split [ 0 ] + \"\" . join ( x . title ( ) for x in split [ 1 : ] )",
    "text": "how to capitalize some letters in python",
    "label": 1,
    "raw": "def to_camel_case(text):\n    \"\"\"Convert to camel case.\n\n    :param str text:\n    :rtype: str\n    :return:\n    \"\"\"\n    split = text.split('_')\n    return split[0] + \"\".join(x.title() for x in split[1:])"
  },
  {
    "id": "train-python-cosqa-train-16189",
    "code": "def parse_code ( url ) : result = urlparse ( url ) query = parse_qs ( result . query ) return query [ 'code' ]",
    "text": "how to retrieve pieces of an http code in python",
    "label": 1,
    "raw": "def parse_code(url):\n    \"\"\"\n    Parse the code parameter from the a URL\n\n    :param str url: URL to parse\n    :return: code query parameter\n    :rtype: str\n    \"\"\"\n    result = urlparse(url)\n    query = parse_qs(result.query)\n    return query['code']"
  },
  {
    "id": "train-python-cosqa-train-8312",
    "code": "def get_decimal_quantum ( precision ) : assert isinstance ( precision , ( int , decimal . Decimal ) ) return decimal . Decimal ( 10 ) ** ( - precision )",
    "text": "tell python to treat decimals as floating decimal points",
    "label": 1,
    "raw": "def get_decimal_quantum(precision):\n    \"\"\"Return minimal quantum of a number, as defined by precision.\"\"\"\n    assert isinstance(precision, (int, decimal.Decimal))\n    return decimal.Decimal(10) ** (-precision)"
  },
  {
    "id": "train-python-cosqa-train-6807",
    "code": "def get_table ( ports ) : table = PrettyTable ( [ \"Name\" , \"Port\" , \"Protocol\" , \"Description\" ] ) table . align [ \"Name\" ] = \"l\" table . align [ \"Description\" ] = \"l\" table . padding_width = 1 for port in ports : table . add_row ( port ) return table",
    "text": "easy was to format a table in python",
    "label": 1,
    "raw": "def get_table(ports):\n    \"\"\"\n    This function returns a pretty table used to display the port results.\n\n    :param ports: list of found ports\n    :return: the table to display\n    \"\"\"\n    table = PrettyTable([\"Name\", \"Port\", \"Protocol\", \"Description\"])\n    table.align[\"Name\"] = \"l\"\n    table.align[\"Description\"] = \"l\"\n    table.padding_width = 1\n\n    for port in ports:\n        table.add_row(port)\n\n    return table"
  },
  {
    "id": "train-python-cosqa-train-14875",
    "code": "def mag ( z ) : if isinstance ( z [ 0 ] , np . ndarray ) : return np . array ( list ( map ( np . linalg . norm , z ) ) ) else : return np . linalg . norm ( z )",
    "text": "python code for finding magnitude of a vector",
    "label": 1,
    "raw": "def mag(z):\n    \"\"\"Get the magnitude of a vector.\"\"\"\n    if isinstance(z[0], np.ndarray):\n        return np.array(list(map(np.linalg.norm, z)))\n    else:\n        return np.linalg.norm(z)"
  },
  {
    "id": "train-python-cosqa-train-15434",
    "code": "def get_var ( self , name ) : for var in self . vars : if var . name == name : return var else : raise ValueError",
    "text": "python how to get a variable's name",
    "label": 1,
    "raw": "def get_var(self, name):\n        \"\"\" Returns the variable set with the given name.\n        \"\"\"\n        for var in self.vars:\n            if var.name == name:\n                return var\n        else:\n            raise ValueError"
  },
  {
    "id": "train-python-cosqa-train-9924",
    "code": "def current_offset ( local_tz = None ) : if local_tz is None : local_tz = DEFAULT_LOCAL_TZ dt = local_tz . localize ( datetime . now ( ) ) return dt . utcoffset ( )",
    "text": "python timezone no utcoffset",
    "label": 1,
    "raw": "def current_offset(local_tz=None):\n    \"\"\"\n    Returns current utcoffset for a timezone. Uses\n    DEFAULT_LOCAL_TZ by default. That value can be\n    changed at runtime using the func below.\n    \"\"\"\n    if local_tz is None:\n        local_tz = DEFAULT_LOCAL_TZ\n    dt = local_tz.localize(datetime.now())\n    return dt.utcoffset()"
  },
  {
    "id": "train-python-cosqa-train-8018",
    "code": "def unpickle ( pickle_file ) : pickle = None with open ( pickle_file , \"rb\" ) as pickle_f : pickle = dill . load ( pickle_f ) if not pickle : LOG . error ( \"Could not load python object from file\" ) return pickle",
    "text": "quickest way to read pickle python",
    "label": 1,
    "raw": "def unpickle(pickle_file):\n    \"\"\"Unpickle a python object from the given path.\"\"\"\n    pickle = None\n    with open(pickle_file, \"rb\") as pickle_f:\n        pickle = dill.load(pickle_f)\n    if not pickle:\n        LOG.error(\"Could not load python object from file\")\n    return pickle"
  },
  {
    "id": "train-python-cosqa-train-7920",
    "code": "def _eq ( self , other ) : return ( self . type , self . value ) == ( other . type , other . value )",
    "text": "python variables equals to the value of other variable",
    "label": 1,
    "raw": "def _eq(self, other):\n        \"\"\"Compare two nodes for equality.\"\"\"\n        return (self.type, self.value) == (other.type, other.value)"
  },
  {
    "id": "train-python-cosqa-train-15955",
    "code": "def add_range ( self , sequence , begin , end ) : sequence . parser_tree = parsing . Range ( self . value ( begin ) . strip ( \"'\" ) , self . value ( end ) . strip ( \"'\" ) ) return True",
    "text": "python range on a string",
    "label": 1,
    "raw": "def add_range(self, sequence, begin, end):\n    \"\"\"Add a read_range primitive\"\"\"\n    sequence.parser_tree = parsing.Range(self.value(begin).strip(\"'\"),\n                                         self.value(end).strip(\"'\"))\n    return True"
  },
  {
    "id": "train-python-cosqa-train-9956",
    "code": "def binSearch ( arr , val ) : i = bisect_left ( arr , val ) if i != len ( arr ) and arr [ i ] == val : return i return - 1",
    "text": "index of an element in a list in python",
    "label": 1,
    "raw": "def binSearch(arr, val):\n  \"\"\" \n  Function for running binary search on a sorted list.\n\n  :param arr: (list) a sorted list of integers to search\n  :param val: (int)  a integer to search for in the sorted array\n  :returns: (int) the index of the element if it is found and -1 otherwise.\n  \"\"\"\n  i = bisect_left(arr, val)\n  if i != len(arr) and arr[i] == val:\n    return i\n  return -1"
  },
  {
    "id": "train-python-cosqa-train-6771",
    "code": "def max ( self ) : if len ( self . regions ) != 1 : raise ClaripyVSAOperationError ( \"'max()' onlly works on single-region value-sets.\" ) return self . get_si ( next ( iter ( self . regions ) ) ) . max",
    "text": "python get skimage coordinate of max value",
    "label": 1,
    "raw": "def max(self):\n        \"\"\"\n        The maximum integer value of a value-set. It is only defined when there is exactly one region.\n\n        :return: A integer that represents the maximum integer value of this value-set.\n        :rtype:  int\n        \"\"\"\n\n        if len(self.regions) != 1:\n            raise ClaripyVSAOperationError(\"'max()' onlly works on single-region value-sets.\")\n\n        return self.get_si(next(iter(self.regions))).max"
  },
  {
    "id": "train-python-cosqa-train-3734",
    "code": "def write_line ( self , line , count = 1 ) : self . write ( line ) self . write_newlines ( count )",
    "text": "python write one line last line",
    "label": 1,
    "raw": "def write_line(self, line, count=1):\n        \"\"\"writes the line and count newlines after the line\"\"\"\n        self.write(line)\n        self.write_newlines(count)"
  },
  {
    "id": "train-python-cosqa-train-14582",
    "code": "def add_xlabel ( self , text = None ) : x = self . fit . meta [ 'independent' ] if not text : text = '$' + x [ 'tex_symbol' ] + r'$ $(\\si{' + x [ 'siunitx' ] + r'})$' self . plt . set_xlabel ( text )",
    "text": "set xtick label incline python",
    "label": 1,
    "raw": "def add_xlabel(self, text=None):\n        \"\"\"\n        Add a label to the x-axis.\n        \"\"\"\n        x = self.fit.meta['independent']\n        if not text:\n            text = '$' + x['tex_symbol'] + r'$ $(\\si{' + x['siunitx'] +  r'})$'\n        self.plt.set_xlabel(text)"
  },
  {
    "id": "train-python-cosqa-train-10470",
    "code": "def impute_data ( self , x ) : imp = Imputer ( missing_values = 'NaN' , strategy = 'mean' , axis = 0 ) return imp . fit_transform ( x )",
    "text": "to impute missing values in python",
    "label": 1,
    "raw": "def impute_data(self,x):\n        \"\"\"Imputes data set containing Nan values\"\"\"\n        imp = Imputer(missing_values='NaN', strategy='mean', axis=0)\n        return imp.fit_transform(x)"
  },
  {
    "id": "train-python-cosqa-train-8175",
    "code": "def on_pause ( self ) : self . engine . commit ( ) self . strings . save ( ) self . funcs . save ( ) self . config . write ( )",
    "text": "saved a python script and is now empty",
    "label": 1,
    "raw": "def on_pause(self):\n        \"\"\"Sync the database with the current state of the game.\"\"\"\n        self.engine.commit()\n        self.strings.save()\n        self.funcs.save()\n        self.config.write()"
  },
  {
    "id": "train-python-cosqa-train-11629",
    "code": "def _help ( ) : statement = '%s%s' % ( shelp , phelp % ', ' . join ( cntx_ . keys ( ) ) ) print statement . strip ( )",
    "text": "python print help message",
    "label": 1,
    "raw": "def _help():\n    \"\"\" Display both SQLAlchemy and Python help statements \"\"\"\n\n    statement = '%s%s' % (shelp, phelp % ', '.join(cntx_.keys()))\n    print statement.strip()"
  },
  {
    "id": "train-python-cosqa-train-17401",
    "code": "def calculate_dimensions ( image , long_side , short_side ) : if image . width >= image . height : return '{0}x{1}' . format ( long_side , short_side ) return '{0}x{1}' . format ( short_side , long_side )",
    "text": "how i check dimensions image python",
    "label": 1,
    "raw": "def calculate_dimensions(image, long_side, short_side):\n    \"\"\"Returns the thumbnail dimensions depending on the images format.\"\"\"\n    if image.width >= image.height:\n        return '{0}x{1}'.format(long_side, short_side)\n    return '{0}x{1}'.format(short_side, long_side)"
  },
  {
    "id": "train-python-cosqa-train-11791",
    "code": "def strip_accents ( text ) : normalized_str = unicodedata . normalize ( 'NFD' , text ) return '' . join ( [ c for c in normalized_str if unicodedata . category ( c ) != 'Mn' ] )",
    "text": "how to remove spaces between words in python string",
    "label": 1,
    "raw": "def strip_accents(text):\n    \"\"\"\n    Strip agents from a string.\n    \"\"\"\n\n    normalized_str = unicodedata.normalize('NFD', text)\n\n    return ''.join([\n        c for c in normalized_str if unicodedata.category(c) != 'Mn'])"
  },
  {
    "id": "train-python-cosqa-train-2583",
    "code": "def do_serial ( self , p ) : try : self . serial . port = p self . serial . open ( ) print 'Opening serial port: %s' % p except Exception , e : print 'Unable to open serial port: %s' % p",
    "text": "dynamically opening serial ports python",
    "label": 1,
    "raw": "def do_serial(self, p):\n\t\t\"\"\"Set the serial port, e.g.: /dev/tty.usbserial-A4001ib8\"\"\"\n\t\ttry:\n\t\t\tself.serial.port = p\n\t\t\tself.serial.open()\n\t\t\tprint 'Opening serial port: %s' % p\n\t\texcept Exception, e:\n\t\t\tprint 'Unable to open serial port: %s' % p"
  },
  {
    "id": "train-python-cosqa-train-835",
    "code": "def autoconvert ( string ) : for fn in ( boolify , int , float ) : try : return fn ( string ) except ValueError : pass return string",
    "text": "how to check data type of variable in python",
    "label": 1,
    "raw": "def autoconvert(string):\n    \"\"\"Try to convert variables into datatypes.\"\"\"\n    for fn in (boolify, int, float):\n        try:\n            return fn(string)\n        except ValueError:\n            pass\n    return string"
  },
  {
    "id": "train-python-cosqa-train-8427",
    "code": "def query_collision ( collision_object ) : global collidable_objects # Note that we use a Brute Force approach for the time being. # It performs horribly under heavy loads, but it meets # our needs for the time being. for obj in collidable_objects : # Make sure we don't check ourself against ourself. if obj . obj_id is not collision_object . obj_id : if collision_object . is_colliding ( obj ) : # A collision has been detected. Return the object that we are colliding with. return obj # No collision was noticed. Return None. return None",
    "text": "python code for elastic collision of objects",
    "label": 1,
    "raw": "def query_collision(collision_object):\n        \"\"\"\n        Check to see if the specified object is colliding with any of the objects currently in the Collision Manager\n        Returns the first object we are colliding with if there was a collision and None if no collisions was found\n        \"\"\"\n        global collidable_objects\n        # Note that we use a Brute Force approach for the time being.\n        # It performs horribly under heavy loads, but it meets\n        # our needs for the time being.\n        for obj in collidable_objects:\n            # Make sure we don't check ourself against ourself.\n            if obj.obj_id is not collision_object.obj_id:\n                if collision_object.is_colliding(obj):\n                    # A collision has been detected. Return the object that we are colliding with.\n                    return obj\n\n        # No collision was noticed. Return None.\n        return None"
  },
  {
    "id": "train-python-cosqa-train-11397",
    "code": "def raise_figure_window ( f = 0 ) : if _fun . is_a_number ( f ) : f = _pylab . figure ( f ) f . canvas . manager . window . raise_ ( )",
    "text": "python matplotlib prevent figure window take focus",
    "label": 1,
    "raw": "def raise_figure_window(f=0):\n    \"\"\"\n    Raises the supplied figure number or figure window.\n    \"\"\"\n    if _fun.is_a_number(f): f = _pylab.figure(f)\n    f.canvas.manager.window.raise_()"
  },
  {
    "id": "train-python-cosqa-train-17424",
    "code": "def _isint ( string ) : return type ( string ) is int or ( isinstance ( string , _binary_type ) or isinstance ( string , _text_type ) ) and _isconvertible ( int , string )",
    "text": "python 3 check if string is int",
    "label": 1,
    "raw": "def _isint(string):\n    \"\"\"\n    >>> _isint(\"123\")\n    True\n    >>> _isint(\"123.45\")\n    False\n    \"\"\"\n    return type(string) is int or \\\n           (isinstance(string, _binary_type) or isinstance(string, _text_type)) and \\\n           _isconvertible(int, string)"
  },
  {
    "id": "train-python-cosqa-train-18138",
    "code": "def uppercase_chars ( string : any ) -> str : return '' . join ( [ c if c . isupper ( ) else '' for c in str ( string ) ] )",
    "text": "way to change the string \"python\" to have all uppercase letters",
    "label": 1,
    "raw": "def uppercase_chars(string: any) -> str:\n        \"\"\"Return all (and only) the uppercase chars in the given string.\"\"\"\n        return ''.join([c if c.isupper() else '' for c in str(string)])"
  },
  {
    "id": "train-python-cosqa-train-15874",
    "code": "def multi_pop ( d , * args ) : retval = { } for key in args : if key in d : retval [ key ] = d . pop ( key ) return retval",
    "text": "python pop dictionary iteration",
    "label": 1,
    "raw": "def multi_pop(d, *args):\n    \"\"\" pops multiple keys off a dict like object \"\"\"\n    retval = {}\n    for key in args:\n        if key in d:\n            retval[key] = d.pop(key)\n    return retval"
  },
  {
    "id": "train-python-cosqa-train-8439",
    "code": "def reprkwargs ( kwargs , sep = ', ' , fmt = \"{0!s}={1!r}\" ) : return sep . join ( fmt . format ( k , v ) for k , v in kwargs . iteritems ( ) )",
    "text": "python code to format multiple *args",
    "label": 1,
    "raw": "def reprkwargs(kwargs, sep=', ', fmt=\"{0!s}={1!r}\"):\n    \"\"\"Display kwargs.\"\"\"\n    return sep.join(fmt.format(k, v) for k, v in kwargs.iteritems())"
  },
  {
    "id": "train-python-cosqa-train-11026",
    "code": "def convert_2_utc ( self , datetime_ , timezone ) : datetime_ = self . tz_mapper [ timezone ] . localize ( datetime_ ) return datetime_ . astimezone ( pytz . UTC )",
    "text": "python get utc offset datetime",
    "label": 1,
    "raw": "def convert_2_utc(self, datetime_, timezone):\n        \"\"\"convert to datetime to UTC offset.\"\"\"\n\n        datetime_ = self.tz_mapper[timezone].localize(datetime_)\n        return datetime_.astimezone(pytz.UTC)"
  },
  {
    "id": "train-python-cosqa-train-12512",
    "code": "def inc_date ( date_obj , num , date_fmt ) : return ( date_obj + timedelta ( days = num ) ) . strftime ( date_fmt )",
    "text": "python change date format of variable",
    "label": 1,
    "raw": "def inc_date(date_obj, num, date_fmt):\n    \"\"\"Increment the date by a certain number and return date object.\n    as the specific string format.\n    \"\"\"\n    return (date_obj + timedelta(days=num)).strftime(date_fmt)"
  },
  {
    "id": "train-python-cosqa-train-11939",
    "code": "def copy_and_update ( dictionary , update ) : newdict = dictionary . copy ( ) newdict . update ( update ) return newdict",
    "text": "how to use dictionary funtion to replace in python",
    "label": 1,
    "raw": "def copy_and_update(dictionary, update):\n    \"\"\"Returns an updated copy of the dictionary without modifying the original\"\"\"\n    newdict = dictionary.copy()\n    newdict.update(update)\n    return newdict"
  },
  {
    "id": "train-python-cosqa-train-6217",
    "code": "def is_numeric_dtype ( dtype ) : dtype = np . dtype ( dtype ) return np . issubsctype ( getattr ( dtype , 'base' , None ) , np . number )",
    "text": "python check if numerical type",
    "label": 1,
    "raw": "def is_numeric_dtype(dtype):\n    \"\"\"Return ``True`` if ``dtype`` is a numeric type.\"\"\"\n    dtype = np.dtype(dtype)\n    return np.issubsctype(getattr(dtype, 'base', None), np.number)"
  },
  {
    "id": "train-python-cosqa-train-10691",
    "code": "def kill_mprocess ( process ) : if process and proc_alive ( process ) : process . terminate ( ) process . communicate ( ) return not proc_alive ( process )",
    "text": "python detect parent process exit",
    "label": 1,
    "raw": "def kill_mprocess(process):\n    \"\"\"kill process\n    Args:\n        process - Popen object for process\n    \"\"\"\n    if process and proc_alive(process):\n        process.terminate()\n        process.communicate()\n    return not proc_alive(process)"
  },
  {
    "id": "train-python-cosqa-train-14431",
    "code": "def head_and_tail_print ( self , n = 5 ) : from IPython import display display . display ( display . HTML ( self . _head_and_tail_table ( n ) ) )",
    "text": "printing the tail of a data frame python",
    "label": 1,
    "raw": "def head_and_tail_print(self, n=5):\n        \"\"\"Display the first and last n elements of a DataFrame.\"\"\"\n        from IPython import display\n        display.display(display.HTML(self._head_and_tail_table(n)))"
  },
  {
    "id": "train-python-cosqa-train-12373",
    "code": "def batchify ( data , batch_size ) : nbatch = data . shape [ 0 ] // batch_size data = data [ : nbatch * batch_size ] data = data . reshape ( ( batch_size , nbatch ) ) . T return data",
    "text": "reshape to wide in python",
    "label": 1,
    "raw": "def batchify(data, batch_size):\n    \"\"\"Reshape data into (num_example, batch_size)\"\"\"\n    nbatch = data.shape[0] // batch_size\n    data = data[:nbatch * batch_size]\n    data = data.reshape((batch_size, nbatch)).T\n    return data"
  },
  {
    "id": "train-python-cosqa-train-14559",
    "code": "def compute_boxplot ( self , series ) : from matplotlib . cbook import boxplot_stats series = series [ series . notnull ( ) ] if len ( series . values ) == 0 : return { } elif not is_numeric_dtype ( series ) : return self . non_numeric_stats ( series ) stats = boxplot_stats ( list ( series . values ) ) [ 0 ] stats [ 'count' ] = len ( series . values ) stats [ 'fliers' ] = \"|\" . join ( map ( str , stats [ 'fliers' ] ) ) return stats",
    "text": "python boxplot not working",
    "label": 1,
    "raw": "def compute_boxplot(self, series):\n        \"\"\"\n        Compute boxplot for given pandas Series.\n        \"\"\"\n        from matplotlib.cbook import boxplot_stats\n        series = series[series.notnull()]\n        if len(series.values) == 0:\n            return {}\n        elif not is_numeric_dtype(series):\n            return self.non_numeric_stats(series)\n        stats = boxplot_stats(list(series.values))[0]\n        stats['count'] = len(series.values)\n        stats['fliers'] = \"|\".join(map(str, stats['fliers']))\n        return stats"
  },
  {
    "id": "train-python-cosqa-train-11391",
    "code": "def read_image ( filepath ) : im_bytes = tf . io . read_file ( filepath ) im = tf . image . decode_image ( im_bytes , channels = CHANNELS ) im = tf . image . convert_image_dtype ( im , tf . float32 ) return im",
    "text": "how to check image format in tensorflow or python",
    "label": 1,
    "raw": "def read_image(filepath):\n  \"\"\"Returns an image tensor.\"\"\"\n  im_bytes = tf.io.read_file(filepath)\n  im = tf.image.decode_image(im_bytes, channels=CHANNELS)\n  im = tf.image.convert_image_dtype(im, tf.float32)\n  return im"
  },
  {
    "id": "train-python-cosqa-train-6237",
    "code": "def is_executable ( path ) : return os . path . isfile ( path ) and os . access ( path , os . X_OK )",
    "text": "python check is file executable",
    "label": 1,
    "raw": "def is_executable(path):\n  \"\"\"Returns whether a path names an existing executable file.\"\"\"\n  return os.path.isfile(path) and os.access(path, os.X_OK)"
  },
  {
    "id": "train-python-cosqa-train-11531",
    "code": "def wordfreq ( text , is_filename = False ) : if is_filename : with open ( text ) as f : text = f . read ( ) freqs = { } for word in text . split ( ) : lword = word . lower ( ) freqs [ lword ] = freqs . get ( lword , 0 ) + 1 return freqs",
    "text": "how to get a frequency of a word in python",
    "label": 1,
    "raw": "def wordfreq(text, is_filename=False):\n    \"\"\"Return a dictionary of words and word counts in a string.\"\"\"\n    if is_filename:\n        with open(text) as f:\n            text = f.read()\n    freqs = {}\n    for word in text.split():\n        lword = word.lower()\n        freqs[lword] = freqs.get(lword, 0) + 1\n    return freqs"
  },
  {
    "id": "train-python-cosqa-train-7290",
    "code": "def clean_markdown ( text ) : result = text if isinstance ( text , str ) : result = '' . join ( BeautifulSoup ( markdown ( text ) , 'lxml' ) . findAll ( text = True ) ) return result",
    "text": "python parse markdown into elements",
    "label": 1,
    "raw": "def clean_markdown(text):\n    \"\"\"\n    Parse markdown sintaxt to html.\n    \"\"\"\n    result = text\n\n    if isinstance(text, str):\n        result = ''.join(\n            BeautifulSoup(markdown(text), 'lxml').findAll(text=True))\n\n    return result"
  },
  {
    "id": "train-python-cosqa-train-12012",
    "code": "def fmt_duration ( secs ) : return ' ' . join ( fmt . human_duration ( secs , 0 , precision = 2 , short = True ) . strip ( ) . split ( ) )",
    "text": "python strftime miliseconds fixed width",
    "label": 1,
    "raw": "def fmt_duration(secs):\n    \"\"\"Format a duration in seconds.\"\"\"\n    return ' '.join(fmt.human_duration(secs, 0, precision=2, short=True).strip().split())"
  },
  {
    "id": "train-python-cosqa-train-2870",
    "code": "def _get_loggers ( ) : from . . import loader modules = loader . get_package_modules ( 'logger' ) return list ( loader . get_plugins ( modules , [ _Logger ] ) )",
    "text": "python logging get all loggers",
    "label": 1,
    "raw": "def _get_loggers():\n    \"\"\"Return list of Logger classes.\"\"\"\n    from .. import loader\n    modules = loader.get_package_modules('logger')\n    return list(loader.get_plugins(modules, [_Logger]))"
  },
  {
    "id": "train-python-cosqa-train-6782",
    "code": "def one_hot ( x , size , dtype = np . float32 ) : return np . array ( x [ ... , np . newaxis ] == np . arange ( size ) , dtype )",
    "text": "do you use onehotencoder on categorical variables in python",
    "label": 1,
    "raw": "def one_hot(x, size, dtype=np.float32):\n  \"\"\"Make a n+1 dim one-hot array from n dim int-categorical array.\"\"\"\n  return np.array(x[..., np.newaxis] == np.arange(size), dtype)"
  },
  {
    "id": "train-python-cosqa-train-12062",
    "code": "def encode_to_shape ( inputs , shape , scope ) : with tf . variable_scope ( scope , reuse = tf . AUTO_REUSE ) : w , h = shape [ 1 ] , shape [ 2 ] x = inputs x = tfl . flatten ( x ) x = tfl . dense ( x , w * h , activation = None , name = \"enc_dense\" ) x = tf . reshape ( x , ( - 1 , w , h , 1 ) ) return x",
    "text": "python tensorflow input shape",
    "label": 1,
    "raw": "def encode_to_shape(inputs, shape, scope):\n  \"\"\"Encode the given tensor to given image shape.\"\"\"\n  with tf.variable_scope(scope, reuse=tf.AUTO_REUSE):\n    w, h = shape[1], shape[2]\n    x = inputs\n    x = tfl.flatten(x)\n    x = tfl.dense(x, w * h, activation=None, name=\"enc_dense\")\n    x = tf.reshape(x, (-1, w, h, 1))\n    return x"
  },
  {
    "id": "train-python-cosqa-train-15023",
    "code": "def is_date ( thing ) : # known date types date_types = ( datetime . datetime , datetime . date , DateTime ) return isinstance ( thing , date_types )",
    "text": "check date type in python",
    "label": 1,
    "raw": "def is_date(thing):\n    \"\"\"Checks if the given thing represents a date\n\n    :param thing: The object to check if it is a date\n    :type thing: arbitrary object\n    :returns: True if we have a date object\n    :rtype: bool\n    \"\"\"\n    # known date types\n    date_types = (datetime.datetime,\n                  datetime.date,\n                  DateTime)\n    return isinstance(thing, date_types)"
  },
  {
    "id": "train-python-cosqa-train-9725",
    "code": "def remove_item ( self , item ) : self . unindex_item ( item ) self . items . pop ( item . uuid , None )",
    "text": "how to remove something from an item python",
    "label": 1,
    "raw": "def remove_item(self, item):\n        \"\"\"\n        Remove (and un-index) an object\n\n        :param item: object to remove\n        :type item: alignak.objects.item.Item\n        :return: None\n        \"\"\"\n        self.unindex_item(item)\n        self.items.pop(item.uuid, None)"
  },
  {
    "id": "train-python-cosqa-train-13674",
    "code": "def fn_min ( self , a , axis = None ) : return numpy . nanmin ( self . _to_ndarray ( a ) , axis = axis )",
    "text": "python numpy minimum value of array",
    "label": 1,
    "raw": "def fn_min(self, a, axis=None):\n        \"\"\"\n        Return the minimum of an array, ignoring any NaNs.\n\n        :param a: The array.\n        :return: The minimum value of the array.\n        \"\"\"\n\n        return numpy.nanmin(self._to_ndarray(a), axis=axis)"
  },
  {
    "id": "train-python-cosqa-train-13483",
    "code": "def bash ( filename ) : sys . stdout . flush ( ) subprocess . call ( \"bash {}\" . format ( filename ) , shell = True )",
    "text": "how to call a bash script from within python",
    "label": 1,
    "raw": "def bash(filename):\n    \"\"\"Runs a bash script in the local directory\"\"\"\n    sys.stdout.flush()\n    subprocess.call(\"bash {}\".format(filename), shell=True)"
  },
  {
    "id": "train-python-cosqa-train-10839",
    "code": "def flatten ( nested ) : flat_return = list ( ) def __inner_flat ( nested , flat ) : for i in nested : __inner_flat ( i , flat ) if isinstance ( i , list ) else flat . append ( i ) return flat __inner_flat ( nested , flat_return ) return flat_return",
    "text": "python flat nested lists",
    "label": 1,
    "raw": "def flatten(nested):\n    \"\"\" Return a flatten version of the nested argument \"\"\"\n    flat_return = list()\n\n    def __inner_flat(nested,flat):\n        for i in nested:\n            __inner_flat(i, flat) if isinstance(i, list) else flat.append(i)\n        return flat\n\n    __inner_flat(nested,flat_return)\n\n    return flat_return"
  },
  {
    "id": "train-python-cosqa-train-14945",
    "code": "def pause ( self ) : mixer . music . pause ( ) self . pause_time = self . get_time ( ) self . paused = True",
    "text": "can python play sounds",
    "label": 1,
    "raw": "def pause(self):\n        \"\"\"Pause the music\"\"\"\n        mixer.music.pause()\n        self.pause_time = self.get_time()\n        self.paused = True"
  },
  {
    "id": "train-python-cosqa-train-13694",
    "code": "def filter_list_by_indices ( lst , indices ) : return [ x for i , x in enumerate ( lst ) if i in indices ]",
    "text": "how to filter numbers based on list of indices in python",
    "label": 1,
    "raw": "def filter_list_by_indices(lst, indices):\n    \"\"\"Return a modified list containing only the indices indicated.\n\n    Args:\n        lst: Original list of values\n        indices: List of indices to keep from the original list\n\n    Returns:\n        list: Filtered list of values\n\n    \"\"\"\n    return [x for i, x in enumerate(lst) if i in indices]"
  },
  {
    "id": "train-python-cosqa-train-7191",
    "code": "def allsame ( list_ , strict = True ) : if len ( list_ ) == 0 : return True first_item = list_ [ 0 ] return list_all_eq_to ( list_ , first_item , strict )",
    "text": "how to check if all elements in a list are the same python",
    "label": 1,
    "raw": "def allsame(list_, strict=True):\n    \"\"\"\n    checks to see if list is equal everywhere\n\n    Args:\n        list_ (list):\n\n    Returns:\n        True if all items in the list are equal\n    \"\"\"\n    if len(list_) == 0:\n        return True\n    first_item = list_[0]\n    return list_all_eq_to(list_, first_item, strict)"
  },
  {
    "id": "train-python-cosqa-train-11002",
    "code": "def clean_axis ( axis ) : axis . get_xaxis ( ) . set_ticks ( [ ] ) axis . get_yaxis ( ) . set_ticks ( [ ] ) for spine in list ( axis . spines . values ( ) ) : spine . set_visible ( False )",
    "text": "python get rid of axis points on graph",
    "label": 1,
    "raw": "def clean_axis(axis):\n    \"\"\"Remove ticks, tick labels, and frame from axis\"\"\"\n    axis.get_xaxis().set_ticks([])\n    axis.get_yaxis().set_ticks([])\n    for spine in list(axis.spines.values()):\n        spine.set_visible(False)"
  },
  {
    "id": "train-python-cosqa-train-13760",
    "code": "def debug_on_error ( type , value , tb ) : traceback . print_exc ( type , value , tb ) print ( ) pdb . pm ( )",
    "text": "how to get stack trace in python pdb",
    "label": 1,
    "raw": "def debug_on_error(type, value, tb):\n    \"\"\"Code due to Thomas Heller - published in Python Cookbook (O'Reilley)\"\"\"\n    traceback.print_exc(type, value, tb)\n    print()\n    pdb.pm()"
  },
  {
    "id": "train-python-cosqa-train-12876",
    "code": "def SegmentMin ( a , ids ) : func = lambda idxs : np . amin ( a [ idxs ] , axis = 0 ) return seg_map ( func , a , ids ) ,",
    "text": "python element wise min",
    "label": 1,
    "raw": "def SegmentMin(a, ids):\n    \"\"\"\n    Segmented min op.\n    \"\"\"\n    func = lambda idxs: np.amin(a[idxs], axis=0)\n    return seg_map(func, a, ids),"
  },
  {
    "id": "train-python-cosqa-train-8961",
    "code": "def fill_nulls ( self , col : str ) : n = [ None , \"\" ] try : self . df [ col ] = self . df [ col ] . replace ( n , nan ) except Exception as e : self . err ( e )",
    "text": "fill a column with null in python",
    "label": 1,
    "raw": "def fill_nulls(self, col: str):\n        \"\"\"\n        Fill all null values with NaN values in a column.\n        Null values are ``None`` or en empty string\n\n        :param col: column name\n        :type col: str\n\n        :example: ``ds.fill_nulls(\"mycol\")``\n        \"\"\"\n        n = [None, \"\"]\n        try:\n            self.df[col] = self.df[col].replace(n, nan)\n        except Exception as e:\n            self.err(e)"
  },
  {
    "id": "train-python-cosqa-train-13601",
    "code": "def generic_add ( a , b ) : logger . debug ( 'Called generic_add({}, {})' . format ( a , b ) ) return a + b",
    "text": "how to correctly add two functions in python",
    "label": 1,
    "raw": "def generic_add(a, b):\n    \"\"\"Simple function to add two numbers\"\"\"\n    logger.debug('Called generic_add({}, {})'.format(a, b))\n    return a + b"
  },
  {
    "id": "train-python-cosqa-train-8985",
    "code": "def has_attribute ( module_name , attribute_name ) : init_file = '%s/__init__.py' % module_name return any ( [ attribute_name in init_line for init_line in open ( init_file ) . readlines ( ) ] )",
    "text": "python how to check if an attribute exist",
    "label": 1,
    "raw": "def has_attribute(module_name, attribute_name):\n    \"\"\"Is this attribute present?\"\"\"\n    init_file = '%s/__init__.py' % module_name\n    return any(\n        [attribute_name in init_line for init_line in open(init_file).readlines()]\n    )"
  },
  {
    "id": "train-python-cosqa-train-13980",
    "code": "def strip_html ( string , keep_tag_content = False ) : r = HTML_TAG_ONLY_RE if keep_tag_content else HTML_RE return r . sub ( '' , string )",
    "text": "how to remove all html tags from text in [python",
    "label": 1,
    "raw": "def strip_html(string, keep_tag_content=False):\n    \"\"\"\n    Remove html code contained into the given string.\n\n    :param string: String to manipulate.\n    :type string: str\n    :param keep_tag_content: True to preserve tag content, False to remove tag and its content too (default).\n    :type keep_tag_content: bool\n    :return: String with html removed.\n    :rtype: str\n    \"\"\"\n    r = HTML_TAG_ONLY_RE if keep_tag_content else HTML_RE\n    return r.sub('', string)"
  },
  {
    "id": "train-python-cosqa-train-11216",
    "code": "def getChildElementsByTagName ( self , tagName ) : result = [ ] for child in self . childNodes : if isinstance ( child , Element ) : if child . tagName == tagName : result . append ( child ) return result",
    "text": "getelementsbytagname python get all child",
    "label": 1,
    "raw": "def getChildElementsByTagName(self, tagName):\n    \"\"\" Return child elements of type tagName if found, else [] \"\"\"\n    result = []\n    for child in self.childNodes:\n        if isinstance(child, Element):\n            if child.tagName == tagName:\n                result.append(child)\n    return result"
  },
  {
    "id": "train-python-cosqa-train-8223",
    "code": "def torecarray ( * args , * * kwargs ) : import numpy as np return toarray ( * args , * * kwargs ) . view ( np . recarray )",
    "text": "shortcut for making arrays python",
    "label": 1,
    "raw": "def torecarray(*args, **kwargs):\n    \"\"\"\n    Convenient shorthand for ``toarray(*args, **kwargs).view(np.recarray)``.\n\n    \"\"\"\n\n    import numpy as np\n    return toarray(*args, **kwargs).view(np.recarray)"
  },
  {
    "id": "train-python-cosqa-train-7946",
    "code": "def _write_json ( file , contents ) : with open ( file , 'w' ) as f : return json . dump ( contents , f , indent = 2 , sort_keys = True )",
    "text": "python write json to file format",
    "label": 1,
    "raw": "def _write_json(file, contents):\n    \"\"\"Write a dict to a JSON file.\"\"\"\n    with open(file, 'w') as f:\n        return json.dump(contents, f, indent=2, sort_keys=True)"
  },
  {
    "id": "train-python-cosqa-train-7721",
    "code": "def setdefault ( obj , field , default ) : setattr ( obj , field , getattr ( obj , field , default ) )",
    "text": "how to store a default value in python",
    "label": 1,
    "raw": "def setdefault(obj, field, default):\n    \"\"\"Set an object's field to default if it doesn't have a value\"\"\"\n    setattr(obj, field, getattr(obj, field, default))"
  },
  {
    "id": "train-python-cosqa-train-7314",
    "code": "def cor ( y_true , y_pred ) : y_true , y_pred = _mask_nan ( y_true , y_pred ) return np . corrcoef ( y_true , y_pred ) [ 0 , 1 ]",
    "text": "python pearson corr between 2 columns",
    "label": 1,
    "raw": "def cor(y_true, y_pred):\n    \"\"\"Compute Pearson correlation coefficient.\n    \"\"\"\n    y_true, y_pred = _mask_nan(y_true, y_pred)\n    return np.corrcoef(y_true, y_pred)[0, 1]"
  },
  {
    "id": "train-python-cosqa-train-9809",
    "code": "def createdb ( ) : manager . db . engine . echo = True manager . db . create_all ( ) set_alembic_revision ( )",
    "text": "python sqlalchemy create database and tables",
    "label": 1,
    "raw": "def createdb():\n    \"\"\"Create database tables from sqlalchemy models\"\"\"\n    manager.db.engine.echo = True\n    manager.db.create_all()\n    set_alembic_revision()"
  },
  {
    "id": "train-python-cosqa-train-10394",
    "code": "def init_db ( ) : db . drop_all ( ) db . configure_mappers ( ) db . create_all ( ) db . session . commit ( )",
    "text": "stack overflow python databases in c",
    "label": 1,
    "raw": "def init_db():\n    \"\"\"\n    Drops and re-creates the SQL schema\n    \"\"\"\n    db.drop_all()\n    db.configure_mappers()\n    db.create_all()\n    db.session.commit()"
  },
  {
    "id": "train-python-cosqa-train-6290",
    "code": "def sprint ( text , * colors ) : return \"\\33[{}m{content}\\33[{}m\" . format ( \";\" . join ( [ str ( color ) for color in colors ] ) , RESET , content = text ) if IS_ANSI_TERMINAL and colors else text",
    "text": "python color text content contained within brackets",
    "label": 1,
    "raw": "def sprint(text, *colors):\n    \"\"\"Format text with color or other effects into ANSI escaped string.\"\"\"\n    return \"\\33[{}m{content}\\33[{}m\".format(\";\".join([str(color) for color in colors]), RESET, content=text) if IS_ANSI_TERMINAL and colors else text"
  },
  {
    "id": "train-python-cosqa-train-15070",
    "code": "def multidict_to_dict ( d ) : return dict ( ( k , v [ 0 ] if len ( v ) == 1 else v ) for k , v in iterlists ( d ) )",
    "text": "python dictionary example with multiple objects",
    "label": 1,
    "raw": "def multidict_to_dict(d):\n    \"\"\"\n    Turns a werkzeug.MultiDict or django.MultiValueDict into a dict with\n    list values\n    :param d: a MultiDict or MultiValueDict instance\n    :return: a dict instance\n    \"\"\"\n    return dict((k, v[0] if len(v) == 1 else v) for k, v in iterlists(d))"
  },
  {
    "id": "train-python-cosqa-train-8147",
    "code": "def rotateImage ( img , angle ) : imgR = scipy . ndimage . rotate ( img , angle , reshape = False ) return imgR",
    "text": "rotate image python ndimage",
    "label": 1,
    "raw": "def rotateImage(img, angle):\n    \"\"\"\n\n    querries scipy.ndimage.rotate routine\n    :param img: image to be rotated\n    :param angle: angle to be rotated (radian)\n    :return: rotated image\n    \"\"\"\n    imgR = scipy.ndimage.rotate(img, angle, reshape=False)\n    return imgR"
  },
  {
    "id": "train-python-cosqa-train-16577",
    "code": "def sanitize_word ( s ) : s = re . sub ( '[^\\w-]+' , '_' , s ) s = re . sub ( '__+' , '_' , s ) return s . strip ( '_' )",
    "text": "removing a symbol from a string in python",
    "label": 1,
    "raw": "def sanitize_word(s):\n    \"\"\"Remove non-alphanumerical characters from metric word.\n    And trim excessive underscores.\n    \"\"\"\n    s = re.sub('[^\\w-]+', '_', s)\n    s = re.sub('__+', '_', s)\n    return s.strip('_')"
  },
  {
    "id": "train-python-cosqa-train-12757",
    "code": "def update ( packages , env = None , user = None ) : packages = ' ' . join ( packages . split ( ',' ) ) cmd = _create_conda_cmd ( 'update' , args = [ packages , '--yes' , '-q' ] , env = env , user = user ) return _execcmd ( cmd , user = user )",
    "text": "adding python and conda to anaconda",
    "label": 1,
    "raw": "def update(packages, env=None, user=None):\n    \"\"\"\n    Update conda packages in a conda env\n\n    Attributes\n    ----------\n        packages: list of packages comma delimited\n    \"\"\"\n    packages = ' '.join(packages.split(','))\n    cmd = _create_conda_cmd('update', args=[packages, '--yes', '-q'], env=env, user=user)\n    return _execcmd(cmd, user=user)"
  },
  {
    "id": "train-python-cosqa-train-12923",
    "code": "def open ( name = None , fileobj = None , closefd = True ) : return Guesser ( ) . open ( name = name , fileobj = fileobj , closefd = closefd )",
    "text": "python fastest way to decompress",
    "label": 1,
    "raw": "def open(name=None, fileobj=None, closefd=True):\n    \"\"\"\n    Use all decompressor possible to make the stream\n    \"\"\"\n    return Guesser().open(name=name, fileobj=fileobj, closefd=closefd)"
  },
  {
    "id": "train-python-cosqa-train-10943",
    "code": "def get_parent_folder_name ( file_path ) : return os . path . split ( os . path . split ( os . path . abspath ( file_path ) ) [ 0 ] ) [ - 1 ]",
    "text": "python get file parent folder name",
    "label": 1,
    "raw": "def get_parent_folder_name(file_path):\n    \"\"\"Finds parent folder of file\n\n    :param file_path: path\n    :return: Name of folder container\n    \"\"\"\n    return os.path.split(os.path.split(os.path.abspath(file_path))[0])[-1]"
  },
  {
    "id": "train-python-cosqa-train-8521",
    "code": "def mouse_out ( self ) : self . scroll_to ( ) ActionChains ( self . parent . driver ) . move_by_offset ( 0 , 0 ) . click ( ) . perform ( )",
    "text": "appium python spinner scroll to",
    "label": 1,
    "raw": "def mouse_out(self):\n        \"\"\"\n        Performs a mouse out the element.\n\n        Currently works only on Chrome driver.\n        \"\"\"\n        self.scroll_to()\n        ActionChains(self.parent.driver).move_by_offset(0, 0).click().perform()"
  },
  {
    "id": "train-python-cosqa-train-18195",
    "code": "def __remove_trailing_zeros ( self , collection ) : index = len ( collection ) - 1 while index >= 0 and collection [ index ] == 0 : index -= 1 return collection [ : index + 1 ]",
    "text": "python how to trim trailing zeroes",
    "label": 1,
    "raw": "def __remove_trailing_zeros(self, collection):\n        \"\"\"Removes trailing zeroes from indexable collection of numbers\"\"\"\n        index = len(collection) - 1\n        while index >= 0 and collection[index] == 0:\n            index -= 1\n\n        return collection[:index + 1]"
  },
  {
    "id": "train-python-cosqa-train-12956",
    "code": "def check_by_selector ( self , selector ) : elem = find_element_by_jquery ( world . browser , selector ) if not elem . is_selected ( ) : elem . click ( )",
    "text": "click a checkbox in webpage python",
    "label": 1,
    "raw": "def check_by_selector(self, selector):\n    \"\"\"Check the checkbox matching the CSS selector.\"\"\"\n    elem = find_element_by_jquery(world.browser, selector)\n    if not elem.is_selected():\n        elem.click()"
  },
  {
    "id": "train-python-cosqa-train-13840",
    "code": "def _crop_list_to_size ( l , size ) : for x in range ( size - len ( l ) ) : l . append ( False ) for x in range ( len ( l ) - size ) : l . pop ( ) return l",
    "text": "how to limit size of a list in python",
    "label": 1,
    "raw": "def _crop_list_to_size(l, size):\n    \"\"\"Make a list a certain size\"\"\"\n    for x in range(size - len(l)):\n        l.append(False)\n    for x in range(len(l) - size):\n        l.pop()\n    return l"
  },
  {
    "id": "train-python-cosqa-train-14930",
    "code": "def stddev ( values , meanval = None ) : #from AI: A Modern Appproach if meanval == None : meanval = mean ( values ) return math . sqrt ( sum ( [ ( x - meanval ) ** 2 for x in values ] ) / ( len ( values ) - 1 ) )",
    "text": "calculate standard deviation in python ignoring null",
    "label": 1,
    "raw": "def stddev(values, meanval=None):  #from AI: A Modern Appproach\n    \"\"\"The standard deviation of a set of values.\n    Pass in the mean if you already know it.\"\"\"\n    if meanval == None: meanval = mean(values)\n    return math.sqrt( sum([(x - meanval)**2 for x in values]) / (len(values)-1) )"
  },
  {
    "id": "train-python-cosqa-train-12404",
    "code": "def help ( self , level = 0 ) : self . cmdline_parser . formatter . output_level = level with _patch_optparse ( ) : return self . cmdline_parser . format_help ( )",
    "text": "python argparse set default help message",
    "label": 1,
    "raw": "def help(self, level=0):\n        \"\"\"return the usage string for available options \"\"\"\n        self.cmdline_parser.formatter.output_level = level\n        with _patch_optparse():\n            return self.cmdline_parser.format_help()"
  },
  {
    "id": "train-python-cosqa-train-12337",
    "code": "def timed_rotating_file_handler ( name , logname , filename , when = 'h' , interval = 1 , backupCount = 0 , encoding = None , delay = False , utc = False ) : return wrap_log_handler ( logging . handlers . TimedRotatingFileHandler ( filename , when = when , interval = interval , backupCount = backupCount , encoding = encoding , delay = delay , utc = utc ) )",
    "text": "python 3 logging rotatingfilehandler",
    "label": 1,
    "raw": "def timed_rotating_file_handler(name, logname, filename, when='h',\n                                interval=1, backupCount=0,\n                                encoding=None, delay=False, utc=False):\n    \"\"\"\n    A Bark logging handler logging output to a named file.  At\n    intervals specified by the 'when', the file will be rotated, under\n    control of 'backupCount'.\n\n    Similar to logging.handlers.TimedRotatingFileHandler.\n    \"\"\"\n\n    return wrap_log_handler(logging.handlers.TimedRotatingFileHandler(\n        filename, when=when, interval=interval, backupCount=backupCount,\n        encoding=encoding, delay=delay, utc=utc))"
  },
  {
    "id": "train-python-cosqa-train-7044",
    "code": "def get_extract_value_function ( column_identifier ) : def extract_value ( run_result ) : pos = None for i , column in enumerate ( run_result . columns ) : if column . title == column_identifier : pos = i break if pos is None : sys . exit ( 'CPU time missing for task {0}.' . format ( run_result . task_id [ 0 ] ) ) return Util . to_decimal ( run_result . values [ pos ] ) return extract_value",
    "text": "how do i check for a value in a column for executing tasks in python",
    "label": 1,
    "raw": "def get_extract_value_function(column_identifier):\n    \"\"\"\n    returns a function that extracts the value for a column.\n    \"\"\"\n    def extract_value(run_result):\n        pos = None\n        for i, column in enumerate(run_result.columns):\n            if column.title == column_identifier:\n                pos = i\n                break\n        if pos is None:\n            sys.exit('CPU time missing for task {0}.'.format(run_result.task_id[0]))\n        return Util.to_decimal(run_result.values[pos])\n    return extract_value"
  },
  {
    "id": "train-python-cosqa-train-13827",
    "code": "def _read_date_from_string ( str1 ) : full_date = [ int ( x ) for x in str1 . split ( '/' ) ] return datetime . date ( full_date [ 0 ] , full_date [ 1 ] , full_date [ 2 ] )",
    "text": "python read xx/xx/xxxx datetime from string",
    "label": 1,
    "raw": "def _read_date_from_string(str1):\n    \"\"\"\n    Reads the date from a string in the format YYYY/MM/DD and returns\n    :class: datetime.date\n    \"\"\"\n    full_date = [int(x) for x in str1.split('/')]\n    return datetime.date(full_date[0], full_date[1], full_date[2])"
  },
  {
    "id": "train-python-cosqa-train-14604",
    "code": "def force_stop ( self ) : r = self . local_renderer with self . settings ( warn_only = True ) : r . sudo ( 'pkill -9 -f celery' ) r . sudo ( 'rm -f /tmp/celery*.pid' )",
    "text": "python celery worker stop",
    "label": 1,
    "raw": "def force_stop(self):\n        \"\"\"\n        Forcibly terminates all Celery processes.\n        \"\"\"\n        r = self.local_renderer\n        with self.settings(warn_only=True):\n            r.sudo('pkill -9 -f celery')\n        r.sudo('rm -f /tmp/celery*.pid')"
  },
  {
    "id": "train-python-cosqa-train-14201",
    "code": "def closeEvent ( self , e ) : self . emit ( 'close_widget' ) super ( DockWidget , self ) . closeEvent ( e )",
    "text": "python tkinter on close window",
    "label": 1,
    "raw": "def closeEvent(self, e):\n        \"\"\"Qt slot when the window is closed.\"\"\"\n        self.emit('close_widget')\n        super(DockWidget, self).closeEvent(e)"
  },
  {
    "id": "train-python-cosqa-train-18130",
    "code": "def year ( date ) : try : fmt = '%m/%d/%Y' return datetime . strptime ( date , fmt ) . timetuple ( ) . tm_year except ValueError : return 0",
    "text": "get year from string date python",
    "label": 1,
    "raw": "def year(date):\n    \"\"\" Returns the year.\n\n    :param date:\n        The string date with this format %m/%d/%Y\n    :type date:\n        String\n\n    :returns:\n        int\n\n    :example:\n        >>> year('05/1/2015')\n        2015\n    \"\"\"\n    try:\n        fmt = '%m/%d/%Y'\n        return datetime.strptime(date, fmt).timetuple().tm_year\n    except ValueError:\n        return 0"
  },
  {
    "id": "train-python-cosqa-train-11666",
    "code": "def update_one ( self , query , doc ) : if self . table is None : self . build_table ( ) if u\"$set\" in doc : doc = doc [ u\"$set\" ] allcond = self . parse_query ( query ) try : result = self . table . update ( doc , allcond ) except : # TODO: check table.update result # check what pymongo does in that case result = None return UpdateResult ( raw_result = result )",
    "text": "python pymongo change field value",
    "label": 1,
    "raw": "def update_one(self, query, doc):\n        \"\"\"\n        Updates one element of the collection\n\n        :param query: dictionary representing the mongo query\n        :param doc: dictionary representing the item to be updated\n        :return: UpdateResult\n        \"\"\"\n        if self.table is None:\n            self.build_table()\n\n        if u\"$set\" in doc:\n            doc = doc[u\"$set\"]\n\n        allcond = self.parse_query(query)\n\n        try:\n            result = self.table.update(doc, allcond)\n        except:\n            # TODO: check table.update result\n            # check what pymongo does in that case\n            result = None\n\n        return UpdateResult(raw_result=result)"
  },
  {
    "id": "train-python-cosqa-train-7060",
    "code": "def __deepcopy__ ( self , memo ) : # noinspection PyArgumentList return self . __class__ ( * * { key : deepcopy ( getattr ( self , key ) , memo ) for key in self . keys } )",
    "text": "how do you do deepcopy in python",
    "label": 1,
    "raw": "def __deepcopy__(self, memo):\n        \"\"\"Create a deep copy of the node\"\"\"\n        # noinspection PyArgumentList\n        return self.__class__(\n            **{key: deepcopy(getattr(self, key), memo) for key in self.keys}\n        )"
  },
  {
    "id": "train-python-cosqa-train-9648",
    "code": "def set_basic_auth ( self , username , password ) : from requests . auth import HTTPBasicAuth self . auth = HTTPBasicAuth ( username , password ) return self",
    "text": "python requests add basic auth",
    "label": 1,
    "raw": "def set_basic_auth(self, username, password):\n        \"\"\"\n        Set authenatication.\n        \"\"\"\n        from requests.auth import HTTPBasicAuth\n        self.auth = HTTPBasicAuth(username, password)\n        return self"
  },
  {
    "id": "train-python-cosqa-train-12275",
    "code": "def format_screen ( strng ) : # Paragraph continue par_re = re . compile ( r'\\\\$' , re . MULTILINE ) strng = par_re . sub ( '' , strng ) return strng",
    "text": "ppython insert an space between a character and a number regex",
    "label": 1,
    "raw": "def format_screen(strng):\n    \"\"\"Format a string for screen printing.\n\n    This removes some latex-type format codes.\"\"\"\n    # Paragraph continue\n    par_re = re.compile(r'\\\\$',re.MULTILINE)\n    strng = par_re.sub('',strng)\n    return strng"
  },
  {
    "id": "train-python-cosqa-train-6590",
    "code": "def match ( string , patterns ) : if patterns is None : return True else : return any ( re . match ( pattern , string ) for pattern in patterns )",
    "text": "check whether a string match a regex in python",
    "label": 1,
    "raw": "def match(string, patterns):\n    \"\"\"Given a string return true if it matches the supplied list of\n    patterns.\n\n    Parameters\n    ----------\n    string : str\n        The string to be matched.\n    patterns : None or [pattern, ...]\n        The series of regular expressions to attempt to match.\n    \"\"\"\n    if patterns is None:\n        return True\n    else:\n        return any(re.match(pattern, string)\n                   for pattern in patterns)"
  },
  {
    "id": "train-python-cosqa-train-8137",
    "code": "def make_unique_ngrams ( s , n ) : return set ( s [ i : i + n ] for i in range ( len ( s ) - n + 1 ) )",
    "text": "return unique substrings given a number python",
    "label": 1,
    "raw": "def make_unique_ngrams(s, n):\n    \"\"\"Make a set of unique n-grams from a string.\"\"\"\n    return set(s[i:i + n] for i in range(len(s) - n + 1))"
  },
  {
    "id": "train-python-cosqa-train-11246",
    "code": "def isdir ( s ) : try : st = os . stat ( s ) except os . error : return False return stat . S_ISDIR ( st . st_mode )",
    "text": "how do i know if a folder exits in python",
    "label": 1,
    "raw": "def isdir(s):\n    \"\"\"Return true if the pathname refers to an existing directory.\"\"\"\n    try:\n        st = os.stat(s)\n    except os.error:\n        return False\n    return stat.S_ISDIR(st.st_mode)"
  },
  {
    "id": "train-python-cosqa-train-8264",
    "code": "def get_previous_month ( self ) : end = utils . get_month_start ( ) - relativedelta ( days = 1 ) end = utils . to_datetime ( end ) start = utils . get_month_start ( end ) return start , end",
    "text": "stackoverflow how to get previous end of month date in python",
    "label": 1,
    "raw": "def get_previous_month(self):\n        \"\"\"Returns date range for the previous full month.\"\"\"\n        end = utils.get_month_start() - relativedelta(days=1)\n        end = utils.to_datetime(end)\n        start = utils.get_month_start(end)\n        return start, end"
  },
  {
    "id": "train-python-cosqa-train-10917",
    "code": "def generate_random_id ( size = 6 , chars = string . ascii_uppercase + string . digits ) : return \"\" . join ( random . choice ( chars ) for x in range ( size ) )",
    "text": "python generate randoms strings",
    "label": 1,
    "raw": "def generate_random_id(size=6, chars=string.ascii_uppercase + string.digits):\n    \"\"\"Generate random id numbers.\"\"\"\n    return \"\".join(random.choice(chars) for x in range(size))"
  },
  {
    "id": "train-python-cosqa-train-8958",
    "code": "def url_to_image ( url ) : r = requests . get ( url ) image = StringIO ( r . content ) return image",
    "text": "python grab image from url",
    "label": 1,
    "raw": "def url_to_image(url):\n    \"\"\"\n    Fetch an image from url and convert it into a Pillow Image object\n    \"\"\"\n    r = requests.get(url)\n    image = StringIO(r.content)\n    return image"
  },
  {
    "id": "train-python-cosqa-train-9791",
    "code": "def visit_Str ( self , node ) : self . result [ node ] = self . builder . NamedType ( pytype_to_ctype ( str ) )",
    "text": "python specify a type literal",
    "label": 1,
    "raw": "def visit_Str(self, node):\n        \"\"\" Set the pythonic string type. \"\"\"\n        self.result[node] = self.builder.NamedType(pytype_to_ctype(str))"
  },
  {
    "id": "train-python-cosqa-train-18358",
    "code": "def url_host ( url : str ) -> str : from urllib . parse import urlparse res = urlparse ( url ) return res . netloc . split ( ':' ) [ 0 ] if res . netloc else ''",
    "text": "parse a url in python and get the hostname",
    "label": 1,
    "raw": "def url_host(url: str) -> str:\n    \"\"\"\n    Parses hostname from URL.\n    :param url: URL\n    :return: hostname\n    \"\"\"\n    from urllib.parse import urlparse\n    res = urlparse(url)\n    return res.netloc.split(':')[0] if res.netloc else ''"
  },
  {
    "id": "train-python-cosqa-train-18501",
    "code": "async def executemany ( self , sql : str , parameters : Iterable [ Iterable [ Any ] ] ) -> None : await self . _execute ( self . _cursor . executemany , sql , parameters )",
    "text": "python mssql send query that uses in tuple",
    "label": 1,
    "raw": "async def executemany(self, sql: str, parameters: Iterable[Iterable[Any]]) -> None:\n        \"\"\"Execute the given multiquery.\"\"\"\n        await self._execute(self._cursor.executemany, sql, parameters)"
  },
  {
    "id": "train-python-cosqa-train-19436",
    "code": "def _get_latest_version ( ) : url = 'https://api.github.com/repos/{}/releases/latest' . format ( constants . DUSTY_GITHUB_PATH ) conn = urllib . urlopen ( url ) if conn . getcode ( ) >= 300 : raise RuntimeError ( 'GitHub api returned code {}; can\\'t determine latest version.  Aborting' . format ( conn . getcode ( ) ) ) json_data = conn . read ( ) return json . loads ( json_data ) [ 'tag_name' ]",
    "text": "python github store the latest tag",
    "label": 1,
    "raw": "def _get_latest_version():\n    \"\"\"Gets latest Dusty binary version using the GitHub api\"\"\"\n    url = 'https://api.github.com/repos/{}/releases/latest'.format(constants.DUSTY_GITHUB_PATH)\n    conn = urllib.urlopen(url)\n    if conn.getcode() >= 300:\n        raise RuntimeError('GitHub api returned code {}; can\\'t determine latest version.  Aborting'.format(conn.getcode()))\n    json_data = conn.read()\n    return json.loads(json_data)['tag_name']"
  },
  {
    "id": "train-python-cosqa-train-13321",
    "code": "def list_files ( directory ) : return [ f for f in pathlib . Path ( directory ) . iterdir ( ) if f . is_file ( ) and not f . name . startswith ( '.' ) ]",
    "text": "get list of files from a folder in python",
    "label": 1,
    "raw": "def list_files(directory):\n    \"\"\"Returns all files in a given directory\n    \"\"\"\n    return [f for f in pathlib.Path(directory).iterdir() if f.is_file() and not f.name.startswith('.')]"
  },
  {
    "id": "train-python-cosqa-train-14069",
    "code": "def _set_axis_limits ( self , which , lims , d , scale , reverse = False ) : setattr ( self . limits , which + 'lims' , lims ) setattr ( self . limits , 'd' + which , d ) setattr ( self . limits , which + 'scale' , scale ) if reverse : setattr ( self . limits , 'reverse_' + which + '_axis' , True ) return",
    "text": "how to set axis limits python",
    "label": 1,
    "raw": "def _set_axis_limits(self, which, lims, d, scale, reverse=False):\n        \"\"\"Private method for setting axis limits.\n\n        Sets the axis limits on each axis for an individual plot.\n\n        Args:\n            which (str): The indicator of which part of the plots\n                to adjust. This currently handles `x` and `y`.\n            lims (len-2 list of floats): The limits for the axis.\n            d (float): Amount to increment by between the limits.\n            scale (str): Scale of the axis. Either `log` or `lin`.\n            reverse (bool, optional): If True, reverse the axis tick marks. Default is False.\n\n        \"\"\"\n        setattr(self.limits, which + 'lims', lims)\n        setattr(self.limits, 'd' + which, d)\n        setattr(self.limits, which + 'scale', scale)\n\n        if reverse:\n            setattr(self.limits, 'reverse_' + which + '_axis', True)\n        return"
  },
  {
    "id": "train-python-cosqa-train-13982",
    "code": "def dedupe_list ( seq ) : seen = set ( ) return [ x for x in seq if not ( x in seen or seen . add ( x ) ) ]",
    "text": "how to remove all repetition in list python",
    "label": 1,
    "raw": "def dedupe_list(seq):\n    \"\"\"\n    Utility function to remove duplicates from a list\n    :param seq: The sequence (list) to deduplicate\n    :return: A list with original duplicates removed\n    \"\"\"\n    seen = set()\n    return [x for x in seq if not (x in seen or seen.add(x))]"
  },
  {
    "id": "train-python-cosqa-train-9891",
    "code": "def from_array ( cls , arr ) : return cls ( ) . with_columns ( [ ( f , arr [ f ] ) for f in arr . dtype . names ] )",
    "text": "how to turn array into a table python",
    "label": 1,
    "raw": "def from_array(cls, arr):\n        \"\"\"Convert a structured NumPy array into a Table.\"\"\"\n        return cls().with_columns([(f, arr[f]) for f in arr.dtype.names])"
  },
  {
    "id": "train-python-cosqa-train-12429",
    "code": "def dispatch ( self ) : try : webapp2 . RequestHandler . dispatch ( self ) finally : self . session_store . save_sessions ( self . response )",
    "text": "session cookies save python request",
    "label": 1,
    "raw": "def dispatch(self):\n    \"\"\"Wraps the dispatch method to add session support.\"\"\"\n    try:\n      webapp2.RequestHandler.dispatch(self)\n    finally:\n      self.session_store.save_sessions(self.response)"
  },
  {
    "id": "train-python-cosqa-train-14391",
    "code": "def tab ( self , output ) : import csv csvwriter = csv . writer ( self . outfile , dialect = csv . excel_tab ) csvwriter . writerows ( output )",
    "text": "output the query to a excel file python",
    "label": 1,
    "raw": "def tab(self, output):\n        \"\"\"Output data in excel-compatible tab-delimited format\"\"\"\n        import csv\n        csvwriter = csv.writer(self.outfile, dialect=csv.excel_tab)\n        csvwriter.writerows(output)"
  },
  {
    "id": "train-python-cosqa-train-8106",
    "code": "def __grid_widgets ( self ) : scrollbar_column = 0 if self . __compound is tk . LEFT else 2 self . _canvas . grid ( row = 0 , column = 1 , sticky = \"nswe\" ) self . _scrollbar . grid ( row = 0 , column = scrollbar_column , sticky = \"ns\" )",
    "text": "python 3 a list of widgets with scroll bar",
    "label": 1,
    "raw": "def __grid_widgets(self):\n        \"\"\"Places all the child widgets in the appropriate positions.\"\"\"\n        scrollbar_column = 0 if self.__compound is tk.LEFT else 2\n        self._canvas.grid(row=0, column=1, sticky=\"nswe\")\n        self._scrollbar.grid(row=0, column=scrollbar_column, sticky=\"ns\")"
  },
  {
    "id": "train-python-cosqa-train-14214",
    "code": "def rstjinja ( app , docname , source ) : # Make sure we're outputting HTML if app . builder . format != 'html' : return src = source [ 0 ] rendered = app . builder . templates . render_string ( src , app . config . html_context ) source [ 0 ] = rendered",
    "text": "incoporating html jsscript with python project",
    "label": 1,
    "raw": "def rstjinja(app, docname, source):\n    \"\"\"\n    Render our pages as a jinja template for fancy templating goodness.\n    \"\"\"\n    # Make sure we're outputting HTML\n    if app.builder.format != 'html':\n        return\n    src = source[0]\n    rendered = app.builder.templates.render_string(\n        src, app.config.html_context\n    )\n    source[0] = rendered"
  },
  {
    "id": "train-python-cosqa-train-7646",
    "code": "def resetScale ( self ) : self . img . scale ( 1. / self . imgScale [ 0 ] , 1. / self . imgScale [ 1 ] ) self . imgScale = ( 1. , 1. )",
    "text": "how to scale a image in pil python",
    "label": 1,
    "raw": "def resetScale(self):\n        \"\"\"Resets the scale on this image. Correctly aligns time scale, undoes manual scaling\"\"\"\n        self.img.scale(1./self.imgScale[0], 1./self.imgScale[1])\n        self.imgScale = (1.,1.)"
  },
  {
    "id": "train-python-cosqa-train-10242",
    "code": "def dashrepl ( value ) : patt = re . compile ( r'\\W' , re . UNICODE ) return re . sub ( patt , '-' , value )",
    "text": "replace all non alpha in python",
    "label": 1,
    "raw": "def dashrepl(value):\n    \"\"\"\n    Replace any non-word characters with a dash.\n    \"\"\"\n    patt = re.compile(r'\\W', re.UNICODE)\n    return re.sub(patt, '-', value)"
  },
  {
    "id": "train-python-cosqa-train-13566",
    "code": "def md5_hash_file ( fh ) : md5 = hashlib . md5 ( ) while True : data = fh . read ( 8192 ) if not data : break md5 . update ( data ) return md5 . hexdigest ( )",
    "text": "python md5 file contents",
    "label": 1,
    "raw": "def md5_hash_file(fh):\n    \"\"\"Return the md5 hash of the given file-object\"\"\"\n    md5 = hashlib.md5()\n    while True:\n        data = fh.read(8192)\n        if not data:\n            break\n        md5.update(data)\n    return md5.hexdigest()"
  },
  {
    "id": "train-python-cosqa-train-7606",
    "code": "def _indexes ( arr ) : myarr = np . array ( arr ) if myarr . ndim == 1 : return list ( range ( len ( myarr ) ) ) elif myarr . ndim == 2 : return tuple ( itertools . product ( list ( range ( arr . shape [ 0 ] ) ) , list ( range ( arr . shape [ 1 ] ) ) ) ) else : raise NotImplementedError ( 'Only supporting arrays of dimension 1 and 2 as yet.' )",
    "text": "python selecting from different dimensions of an array",
    "label": 1,
    "raw": "def _indexes(arr):\n    \"\"\" Returns the list of all indexes of the given array.\n\n    Currently works for one and two-dimensional arrays\n\n    \"\"\"\n    myarr = np.array(arr)\n    if myarr.ndim == 1:\n        return list(range(len(myarr)))\n    elif myarr.ndim == 2:\n        return tuple(itertools.product(list(range(arr.shape[0])),\n                                       list(range(arr.shape[1]))))\n    else:\n        raise NotImplementedError('Only supporting arrays of dimension 1 and 2 as yet.')"
  },
  {
    "id": "train-python-cosqa-train-13682",
    "code": "def _replace_file ( path , content ) : if os . path . exists ( path ) : with open ( path , 'r' ) as f : if content == f . read ( ) : print ( \"Not overwriting {} because it is unchanged\" . format ( path ) , file = sys . stderr ) return with open ( path , 'w' ) as f : f . write ( content )",
    "text": "python only write file if doesn't already have contents",
    "label": 1,
    "raw": "def _replace_file(path, content):\n  \"\"\"Writes a file if it doesn't already exist with the same content.\n\n  This is useful because cargo uses timestamps to decide whether to compile things.\"\"\"\n  if os.path.exists(path):\n    with open(path, 'r') as f:\n      if content == f.read():\n        print(\"Not overwriting {} because it is unchanged\".format(path), file=sys.stderr)\n        return\n\n  with open(path, 'w') as f:\n    f.write(content)"
  },
  {
    "id": "train-python-cosqa-train-10481",
    "code": "def any_of ( value , * args ) : if len ( args ) : value = ( value , ) + args return ExpectationAny ( value )",
    "text": "python check exact one parametars",
    "label": 1,
    "raw": "def any_of(value, *args):\n    \"\"\" At least one of the items in value should match \"\"\"\n\n    if len(args):\n        value = (value,) + args\n\n    return ExpectationAny(value)"
  },
  {
    "id": "train-python-cosqa-train-13134",
    "code": "def security ( self ) : return { k : v for i in self . pdf . resolvedObjects . items ( ) for k , v in i [ 1 ] . items ( ) }",
    "text": "python get properties of pdf file",
    "label": 1,
    "raw": "def security(self):\n        \"\"\"Print security object information for a pdf document\"\"\"\n        return {k: v for i in self.pdf.resolvedObjects.items() for k, v in i[1].items()}"
  },
  {
    "id": "train-python-cosqa-train-312",
    "code": "def exp_fit_fun ( x , a , tau , c ) : # pylint: disable=invalid-name return a * np . exp ( - x / tau ) + c",
    "text": "python fit to exponential function",
    "label": 1,
    "raw": "def exp_fit_fun(x, a, tau, c):\n    \"\"\"Function used to fit the exponential decay.\"\"\"\n    # pylint: disable=invalid-name\n    return a * np.exp(-x / tau) + c"
  },
  {
    "id": "train-python-cosqa-train-17538",
    "code": "def remove_blank_lines ( string ) : return \"\\n\" . join ( line for line in string . split ( \"\\n\" ) if len ( line . strip ( ) ) )",
    "text": "python strip if stirng is not empty",
    "label": 1,
    "raw": "def remove_blank_lines(string):\n    \"\"\" Removes all blank lines in @string\n\n        -> #str without blank lines\n    \"\"\"\n    return \"\\n\".join(line\n                     for line in string.split(\"\\n\")\n                     if len(line.strip()))"
  },
  {
    "id": "train-python-cosqa-train-15306",
    "code": "def _intermediary_to_dot ( tables , relationships ) : t = '\\n' . join ( t . to_dot ( ) for t in tables ) r = '\\n' . join ( r . to_dot ( ) for r in relationships ) return '{}\\n{}\\n{}\\n}}' . format ( GRAPH_BEGINNING , t , r )",
    "text": "dot structure for python",
    "label": 1,
    "raw": "def _intermediary_to_dot(tables, relationships):\n    \"\"\" Returns the dot source representing the database in a string. \"\"\"\n    t = '\\n'.join(t.to_dot() for t in tables)\n    r = '\\n'.join(r.to_dot() for r in relationships)\n    return '{}\\n{}\\n{}\\n}}'.format(GRAPH_BEGINNING, t, r)"
  },
  {
    "id": "train-python-cosqa-train-9404",
    "code": "def iterlists ( self ) : for key , values in dict . iteritems ( self ) : yield key , list ( values )",
    "text": "python object has no attribute 'iteritems'",
    "label": 1,
    "raw": "def iterlists(self):\n        \"\"\"Like :meth:`items` but returns an iterator.\"\"\"\n        for key, values in dict.iteritems(self):\n            yield key, list(values)"
  },
  {
    "id": "train-python-cosqa-train-1622",
    "code": "def _write_color_colorama ( fp , text , color ) : foreground , background , style = get_win_color ( color ) colorama . set_console ( foreground = foreground , background = background , style = style ) fp . write ( text ) colorama . reset_console ( )",
    "text": "python write text to file with different color",
    "label": 1,
    "raw": "def _write_color_colorama (fp, text, color):\n    \"\"\"Colorize text with given color.\"\"\"\n    foreground, background, style = get_win_color(color)\n    colorama.set_console(foreground=foreground, background=background,\n      style=style)\n    fp.write(text)\n    colorama.reset_console()"
  },
  {
    "id": "train-python-cosqa-train-8989",
    "code": "def check_if_branch_exist ( db , root_hash , key_prefix ) : validate_is_bytes ( key_prefix ) return _check_if_branch_exist ( db , root_hash , encode_to_bin ( key_prefix ) )",
    "text": "python how to check if key exists before key error",
    "label": 1,
    "raw": "def check_if_branch_exist(db, root_hash, key_prefix):\n    \"\"\"\n    Given a key prefix, return whether this prefix is\n    the prefix of an existing key in the trie.\n    \"\"\"\n    validate_is_bytes(key_prefix)\n\n    return _check_if_branch_exist(db, root_hash, encode_to_bin(key_prefix))"
  },
  {
    "id": "train-python-cosqa-train-14426",
    "code": "def ReadManyFromPath ( filepath ) : with io . open ( filepath , mode = \"r\" , encoding = \"utf-8\" ) as filedesc : return ReadManyFromFile ( filedesc )",
    "text": "reading multilayered json in python",
    "label": 1,
    "raw": "def ReadManyFromPath(filepath):\n  \"\"\"Reads a Python object stored in a specified YAML file.\n\n  Args:\n    filepath: A filepath to the YAML file.\n\n  Returns:\n    A Python data structure corresponding to the YAML in the given file.\n  \"\"\"\n  with io.open(filepath, mode=\"r\", encoding=\"utf-8\") as filedesc:\n    return ReadManyFromFile(filedesc)"
  },
  {
    "id": "train-python-cosqa-train-19082",
    "code": "def _extension ( modpath : str ) -> setuptools . Extension : return setuptools . Extension ( modpath , [ modpath . replace ( \".\" , \"/\" ) + \".py\" ] )",
    "text": "python setuptools extension output dir",
    "label": 1,
    "raw": "def _extension(modpath: str) -> setuptools.Extension:\n    \"\"\"Make setuptools.Extension.\"\"\"\n    return setuptools.Extension(modpath, [modpath.replace(\".\", \"/\") + \".py\"])"
  },
  {
    "id": "train-python-cosqa-train-18896",
    "code": "def name_is_valid ( name ) : # The name can only be 80 characters long. if len ( name ) > MAX_NAME_LENGTH : return False return bool ( NAME_VALID_CHARS_REGEX . match ( name ) )",
    "text": "how to check if a variable name is valid in python",
    "label": 1,
    "raw": "def name_is_valid(name):\n    \"\"\"Return True if the dataset name is valid.\n\n    The name can only be 80 characters long.\n    Valid characters: Alpha numeric characters [0-9a-zA-Z]\n    Valid special characters: - _ .\n    \"\"\"\n    # The name can only be 80 characters long.\n    if len(name) > MAX_NAME_LENGTH:\n        return False\n    return bool(NAME_VALID_CHARS_REGEX.match(name))"
  },
  {
    "id": "train-python-cosqa-train-12260",
    "code": "def cor ( y_true , y_pred ) : y_true , y_pred = _mask_nan ( y_true , y_pred ) return np . corrcoef ( y_true , y_pred ) [ 0 , 1 ]",
    "text": "pearson correlation with nan python",
    "label": 1,
    "raw": "def cor(y_true, y_pred):\n    \"\"\"Compute Pearson correlation coefficient.\n    \"\"\"\n    y_true, y_pred = _mask_nan(y_true, y_pred)\n    return np.corrcoef(y_true, y_pred)[0, 1]"
  },
  {
    "id": "train-python-cosqa-train-9708",
    "code": "def delete_all_eggs ( self ) : path_to_delete = os . path . join ( self . egg_directory , \"lib\" , \"python\" ) if os . path . exists ( path_to_delete ) : shutil . rmtree ( path_to_delete )",
    "text": "how to remove all python environment",
    "label": 1,
    "raw": "def delete_all_eggs(self):\n        \"\"\" delete all the eggs in the directory specified \"\"\"\n        path_to_delete = os.path.join(self.egg_directory, \"lib\", \"python\")\n        if os.path.exists(path_to_delete):\n            shutil.rmtree(path_to_delete)"
  },
  {
    "id": "train-python-cosqa-train-11674",
    "code": "def parse_querystring ( self , req , name , field ) : return core . get_value ( req . args , name , field )",
    "text": "python querystring value not there",
    "label": 1,
    "raw": "def parse_querystring(self, req, name, field):\n        \"\"\"Pull a querystring value from the request.\"\"\"\n        return core.get_value(req.args, name, field)"
  },
  {
    "id": "train-python-cosqa-train-13349",
    "code": "def is_iterable ( value ) : return isinstance ( value , np . ndarray ) or isinstance ( value , list ) or isinstance ( value , tuple ) , value",
    "text": "python if in array object not iterable",
    "label": 1,
    "raw": "def is_iterable(value):\n    \"\"\"must be an iterable (list, array, tuple)\"\"\"\n    return isinstance(value, np.ndarray) or isinstance(value, list) or isinstance(value, tuple), value"
  },
  {
    "id": "train-python-cosqa-train-9257",
    "code": "def paste ( cmd = paste_cmd , stdout = PIPE ) : return Popen ( cmd , stdout = stdout ) . communicate ( ) [ 0 ] . decode ( 'utf-8' )",
    "text": "python mac clipboard contents",
    "label": 1,
    "raw": "def paste(cmd=paste_cmd, stdout=PIPE):\n    \"\"\"Returns system clipboard contents.\n    \"\"\"\n    return Popen(cmd, stdout=stdout).communicate()[0].decode('utf-8')"
  },
  {
    "id": "train-python-cosqa-train-8070",
    "code": "def parse_json ( filename ) : # Regular expression for comments comment_re = re . compile ( '(^)?[^\\S\\n]*/(?:\\*(.*?)\\*/[^\\S\\n]*|/[^\\n]*)($)?' , re . DOTALL | re . MULTILINE ) with open ( filename ) as f : content = '' . join ( f . readlines ( ) ) ## Looking for comments match = comment_re . search ( content ) while match : # single line comment content = content [ : match . start ( ) ] + content [ match . end ( ) : ] match = comment_re . search ( content ) # Return json file return json . loads ( content )",
    "text": "remove comments in json file using python",
    "label": 1,
    "raw": "def parse_json(filename):\n    \"\"\" Parse a JSON file\n        First remove comments and then use the json module package\n        Comments look like :\n            // ...\n        or\n            /*\n            ...\n            */\n    \"\"\"\n    # Regular expression for comments\n    comment_re = re.compile(\n        '(^)?[^\\S\\n]*/(?:\\*(.*?)\\*/[^\\S\\n]*|/[^\\n]*)($)?',\n        re.DOTALL | re.MULTILINE\n    )\n\n    with open(filename) as f:\n        content = ''.join(f.readlines())\n\n        ## Looking for comments\n        match = comment_re.search(content)\n        while match:\n            # single line comment\n            content = content[:match.start()] + content[match.end():]\n            match = comment_re.search(content)\n\n        # Return json file\n        return json.loads(content)"
  },
  {
    "id": "train-python-cosqa-train-11299",
    "code": "def downsample ( array , k ) : length = array . shape [ 0 ] indices = random . sample ( xrange ( length ) , k ) return array [ indices ]",
    "text": "python k random element from array",
    "label": 1,
    "raw": "def downsample(array, k):\n    \"\"\"Choose k random elements of array.\"\"\"\n    length = array.shape[0]\n    indices = random.sample(xrange(length), k)\n    return array[indices]"
  },
  {
    "id": "train-python-cosqa-train-7072",
    "code": "def length ( self ) : return np . sqrt ( np . sum ( self ** 2 , axis = 1 ) ) . view ( np . ndarray )",
    "text": "how to access 2d array python diagonally",
    "label": 1,
    "raw": "def length(self):\n        \"\"\"Array of vector lengths\"\"\"\n        return np.sqrt(np.sum(self**2, axis=1)).view(np.ndarray)"
  },
  {
    "id": "train-python-cosqa-train-5070",
    "code": "def is_callable ( * p ) : import symbols return all ( isinstance ( x , symbols . FUNCTION ) for x in p )",
    "text": "how to check if function is defined in python",
    "label": 1,
    "raw": "def is_callable(*p):\n    \"\"\" True if all the args are functions and / or subroutines\n    \"\"\"\n    import symbols\n    return all(isinstance(x, symbols.FUNCTION) for x in p)"
  },
  {
    "id": "train-python-cosqa-train-11874",
    "code": "def _chunks ( l , n ) : for i in xrange ( 0 , len ( l ) , n ) : yield l [ i : i + n ]",
    "text": "how to split a list into unequal size chunks python",
    "label": 1,
    "raw": "def _chunks(l, n):\n    \"\"\" Yield successive n-sized chunks from l.\n\n    http://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks-in-python\n    \"\"\"\n    for i in xrange(0, len(l), n):\n        yield l[i:i+n]"
  },
  {
    "id": "train-python-cosqa-train-16852",
    "code": "def min_or_none ( val1 , val2 ) : return min ( val1 , val2 , key = lambda x : sys . maxint if x is None else x )",
    "text": "python can none value be used outside variables",
    "label": 1,
    "raw": "def min_or_none(val1, val2):\n    \"\"\"Returns min(val1, val2) returning None only if both values are None\"\"\"\n    return min(val1, val2, key=lambda x: sys.maxint if x is None else x)"
  },
  {
    "id": "train-python-cosqa-train-8441",
    "code": "def _stop_instance ( self ) : instance = self . _get_instance ( ) instance . stop ( ) self . _wait_on_instance ( 'stopped' , self . timeout )",
    "text": "python code to stop an instance",
    "label": 1,
    "raw": "def _stop_instance(self):\n        \"\"\"Stop the instance.\"\"\"\n        instance = self._get_instance()\n        instance.stop()\n        self._wait_on_instance('stopped', self.timeout)"
  },
  {
    "id": "train-python-cosqa-train-19465",
    "code": "def __replace_all ( repls : dict , input : str ) -> str : return re . sub ( '|' . join ( re . escape ( key ) for key in repls . keys ( ) ) , lambda k : repls [ k . group ( 0 ) ] , input )",
    "text": "python string replace a certain character",
    "label": 1,
    "raw": "def __replace_all(repls: dict, input: str) -> str:\n    \"\"\" Replaces from a string **input** all the occurrences of some\n    symbols according to mapping **repls**.\n\n    :param dict repls: where #key is the old character and\n    #value is the one to substitute with;\n    :param str input: original string where to apply the\n    replacements;\n    :return: *(str)* the string with the desired characters replaced\n    \"\"\"\n    return re.sub('|'.join(re.escape(key) for key in repls.keys()),\n                  lambda k: repls[k.group(0)], input)"
  },
  {
    "id": "train-python-cosqa-train-7146",
    "code": "def as_tuple ( self , value ) : if isinstance ( value , list ) : value = tuple ( value ) return value",
    "text": "how to change an list into a tuple in python",
    "label": 1,
    "raw": "def as_tuple(self, value):\n        \"\"\"Utility function which converts lists to tuples.\"\"\"\n        if isinstance(value, list):\n            value = tuple(value)\n        return value"
  },
  {
    "id": "train-python-cosqa-train-14315",
    "code": "def save_dict_to_file ( filename , dictionary ) : with open ( filename , 'w' ) as f : writer = csv . writer ( f ) for k , v in iteritems ( dictionary ) : writer . writerow ( [ str ( k ) , str ( v ) ] )",
    "text": "python write a dictionary to file",
    "label": 1,
    "raw": "def save_dict_to_file(filename, dictionary):\n  \"\"\"Saves dictionary as CSV file.\"\"\"\n  with open(filename, 'w') as f:\n    writer = csv.writer(f)\n    for k, v in iteritems(dictionary):\n      writer.writerow([str(k), str(v)])"
  },
  {
    "id": "train-python-cosqa-train-9777",
    "code": "def is_full_slice ( obj , l ) : return ( isinstance ( obj , slice ) and obj . start == 0 and obj . stop == l and obj . step is None )",
    "text": "python slice notation same as golang",
    "label": 1,
    "raw": "def is_full_slice(obj, l):\n    \"\"\"\n    We have a full length slice.\n    \"\"\"\n    return (isinstance(obj, slice) and obj.start == 0 and obj.stop == l and\n            obj.step is None)"
  },
  {
    "id": "train-python-cosqa-train-12938",
    "code": "def filter_list_by_indices ( lst , indices ) : return [ x for i , x in enumerate ( lst ) if i in indices ]",
    "text": "python filter based on list index",
    "label": 1,
    "raw": "def filter_list_by_indices(lst, indices):\n    \"\"\"Return a modified list containing only the indices indicated.\n\n    Args:\n        lst: Original list of values\n        indices: List of indices to keep from the original list\n\n    Returns:\n        list: Filtered list of values\n\n    \"\"\"\n    return [x for i, x in enumerate(lst) if i in indices]"
  },
  {
    "id": "train-python-cosqa-train-14784",
    "code": "def prettyprint ( d ) : print ( json . dumps ( d , sort_keys = True , indent = 4 , separators = ( \",\" , \": \" ) ) )",
    "text": "visualize json nest tree in python",
    "label": 1,
    "raw": "def prettyprint(d):\n        \"\"\"Print dicttree in Json-like format. keys are sorted\n        \"\"\"\n        print(json.dumps(d, sort_keys=True, \n                         indent=4, separators=(\",\" , \": \")))"
  },
  {
    "id": "train-python-cosqa-train-11421",
    "code": "def stringc ( text , color ) : if has_colors : text = str ( text ) return \"\\033[\" + codeCodes [ color ] + \"m\" + text + \"\\033[0m\" else : return text",
    "text": "how to code change text color in python",
    "label": 1,
    "raw": "def stringc(text, color):\n    \"\"\"\n    Return a string with terminal colors.\n    \"\"\"\n    if has_colors:\n        text = str(text)\n\n        return \"\\033[\"+codeCodes[color]+\"m\"+text+\"\\033[0m\"\n    else:\n        return text"
  },
  {
    "id": "train-python-cosqa-train-292",
    "code": "def guess_file_type ( kind , filepath = None , youtube_id = None , web_url = None , encoding = None ) : if youtube_id : return FileTypes . YOUTUBE_VIDEO_FILE elif web_url : return FileTypes . WEB_VIDEO_FILE elif encoding : return FileTypes . BASE64_FILE else : ext = os . path . splitext ( filepath ) [ 1 ] [ 1 : ] . lower ( ) if kind in FILE_TYPE_MAPPING and ext in FILE_TYPE_MAPPING [ kind ] : return FILE_TYPE_MAPPING [ kind ] [ ext ] return None",
    "text": "python file chooser restrict file types",
    "label": 1,
    "raw": "def guess_file_type(kind, filepath=None, youtube_id=None, web_url=None, encoding=None):\n    \"\"\" guess_file_class: determines what file the content is\n        Args:\n            filepath (str): filepath of file to check\n        Returns: string indicating file's class\n    \"\"\"\n    if youtube_id:\n        return FileTypes.YOUTUBE_VIDEO_FILE\n    elif web_url:\n        return FileTypes.WEB_VIDEO_FILE\n    elif encoding:\n        return FileTypes.BASE64_FILE\n    else:\n        ext = os.path.splitext(filepath)[1][1:].lower()\n        if kind in FILE_TYPE_MAPPING and ext in FILE_TYPE_MAPPING[kind]:\n            return FILE_TYPE_MAPPING[kind][ext]\n    return None"
  },
  {
    "id": "train-python-cosqa-train-12134",
    "code": "def keys_to_snake_case ( camel_case_dict ) : return dict ( ( to_snake_case ( key ) , value ) for ( key , value ) in camel_case_dict . items ( ) )",
    "text": "make values uppercase in dictionary python",
    "label": 1,
    "raw": "def keys_to_snake_case(camel_case_dict):\n    \"\"\"\n    Make a copy of a dictionary with all keys converted to snake case. This is just calls to_snake_case on\n    each of the keys in the dictionary and returns a new dictionary.\n\n    :param camel_case_dict: Dictionary with the keys to convert.\n    :type camel_case_dict: Dictionary.\n\n    :return: Dictionary with the keys converted to snake case.\n    \"\"\"\n    return dict((to_snake_case(key), value) for (key, value) in camel_case_dict.items())"
  },
  {
    "id": "train-python-cosqa-train-15269",
    "code": "def __dir__ ( self ) : return sorted ( self . keys ( ) | { m for m in dir ( self . __class__ ) if m . startswith ( 'to_' ) } )",
    "text": "python get all staticmethod",
    "label": 1,
    "raw": "def __dir__(self):\n        u\"\"\"Returns a list of children and available helper methods.\"\"\"\n        return sorted(self.keys() | {m for m in dir(self.__class__) if m.startswith('to_')})"
  },
  {
    "id": "train-python-cosqa-train-12315",
    "code": "def nb_to_python ( nb_path ) : exporter = python . PythonExporter ( ) output , resources = exporter . from_filename ( nb_path ) return output",
    "text": "pynb export to python script",
    "label": 1,
    "raw": "def nb_to_python(nb_path):\n    \"\"\"convert notebook to python script\"\"\"\n    exporter = python.PythonExporter()\n    output, resources = exporter.from_filename(nb_path)\n    return output"
  },
  {
    "id": "train-python-cosqa-train-15849",
    "code": "def xml_str_to_dict ( s ) : xml = minidom . parseString ( s ) return pythonzimbra . tools . xmlserializer . dom_to_dict ( xml . firstChild )",
    "text": "python parse xml string to dict",
    "label": 1,
    "raw": "def xml_str_to_dict(s):\n    \"\"\" Transforms an XML string it to python-zimbra dict format\n\n    For format, see:\n      https://github.com/Zimbra-Community/python-zimbra/blob/master/README.md\n\n    :param: a string, containing XML\n    :returns: a dict, with python-zimbra format\n    \"\"\"\n    xml = minidom.parseString(s)\n    return pythonzimbra.tools.xmlserializer.dom_to_dict(xml.firstChild)"
  },
  {
    "id": "train-python-cosqa-train-12041",
    "code": "def correspond ( text ) : subproc . stdin . write ( text ) subproc . stdin . flush ( ) return drain ( )",
    "text": "python subprocess write to stdin",
    "label": 1,
    "raw": "def correspond(text):\n    \"\"\"Communicate with the child process without closing stdin.\"\"\"\n    subproc.stdin.write(text)\n    subproc.stdin.flush()\n    return drain()"
  },
  {
    "id": "train-python-cosqa-train-17787",
    "code": "def after_epoch ( self , * * _ ) -> None : SaveEvery . save_model ( model = self . _model , name_suffix = self . _OUTPUT_NAME , on_failure = self . _on_save_failure )",
    "text": "how to sav model after epoch python",
    "label": 1,
    "raw": "def after_epoch(self, **_) -> None:\n        \"\"\"Save/override the latest model after every epoch.\"\"\"\n        SaveEvery.save_model(model=self._model, name_suffix=self._OUTPUT_NAME, on_failure=self._on_save_failure)"
  },
  {
    "id": "train-python-cosqa-train-11846",
    "code": "def norm_vec ( vector ) : assert len ( vector ) == 3 v = np . array ( vector ) return v / np . sqrt ( np . sum ( v ** 2 ) )",
    "text": "how to singularize vector python",
    "label": 1,
    "raw": "def norm_vec(vector):\n    \"\"\"Normalize the length of a vector to one\"\"\"\n    assert len(vector) == 3\n    v = np.array(vector)\n    return v/np.sqrt(np.sum(v**2))"
  },
  {
    "id": "train-python-cosqa-train-19896",
    "code": "def _kbhit_unix ( ) -> bool : dr , dw , de = select . select ( [ sys . stdin ] , [ ] , [ ] , 0 ) return dr != [ ]",
    "text": "python simulate keyboard events linux",
    "label": 1,
    "raw": "def _kbhit_unix() -> bool:\n    \"\"\"\n    Under UNIX: is a keystroke available?\n    \"\"\"\n    dr, dw, de = select.select([sys.stdin], [], [], 0)\n    return dr != []"
  },
  {
    "id": "train-python-cosqa-dev-583",
    "code": "def get_column_keys_and_names ( table ) : ins = inspect ( table ) return ( ( k , c . name ) for k , c in ins . mapper . c . items ( ) )",
    "text": "collecting the column names in python",
    "label": 1,
    "raw": "def get_column_keys_and_names(table):\n    \"\"\"\n    Return a generator of tuples k, c such that k is the name of the python attribute for\n    the column and c is the name of the column in the sql table.\n    \"\"\"\n    ins = inspect(table)\n    return ((k, c.name) for k, c in ins.mapper.c.items())"
  },
  {
    "id": "train-python-cosqa-train-973",
    "code": "def A ( * a ) : return np . array ( a [ 0 ] ) if len ( a ) == 1 else [ np . array ( o ) for o in a ]",
    "text": "python numpy array iterable",
    "label": 1,
    "raw": "def A(*a):\n    \"\"\"convert iterable object into numpy array\"\"\"\n    return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]"
  },
  {
    "id": "train-python-cosqa-train-13886",
    "code": "def align_file_position ( f , size ) : align = ( size - 1 ) - ( f . tell ( ) % size ) f . seek ( align , 1 )",
    "text": "how to move file pointer to specific offset after a line in python",
    "label": 1,
    "raw": "def align_file_position(f, size):\n    \"\"\" Align the position in the file to the next block of specified size \"\"\"\n    align = (size - 1) - (f.tell() % size)\n    f.seek(align, 1)"
  },
  {
    "id": "train-python-cosqa-train-16580",
    "code": "def phase_correct_first ( spec , freq , k ) : c_factor = np . exp ( - 1j * k * freq ) c_factor = c_factor . reshape ( ( len ( spec . shape ) - 1 ) * ( 1 , ) + c_factor . shape ) return spec * c_factor",
    "text": "npss signal auto correction python",
    "label": 1,
    "raw": "def phase_correct_first(spec, freq, k):\n    \"\"\"\n    First order phase correction.\n\n    Parameters\n    ----------\n    spec : float array\n        The spectrum to be corrected.\n\n    freq : float array\n        The frequency axis.\n\n    k : float\n        The slope of the phase correction as a function of frequency.\n\n    Returns\n    -------\n    The phase-corrected spectrum.\n\n    Notes\n    -----\n    [Keeler2005] Keeler, J (2005). Understanding NMR Spectroscopy, 2nd\n        edition. Wiley. Page 88\n\n    \"\"\"\n    c_factor = np.exp(-1j * k * freq)\n    c_factor = c_factor.reshape((len(spec.shape) -1) * (1,) + c_factor.shape)\n    return spec * c_factor"
  },
  {
    "id": "train-python-cosqa-train-12450",
    "code": "def get_as_bytes ( self , s3_path ) : ( bucket , key ) = self . _path_to_bucket_and_key ( s3_path ) obj = self . s3 . Object ( bucket , key ) contents = obj . get ( ) [ 'Body' ] . read ( ) return contents",
    "text": "python boto get contents of s3 file",
    "label": 1,
    "raw": "def get_as_bytes(self, s3_path):\n        \"\"\"\n        Get the contents of an object stored in S3 as bytes\n\n        :param s3_path: URL for target S3 location\n        :return: File contents as pure bytes\n        \"\"\"\n        (bucket, key) = self._path_to_bucket_and_key(s3_path)\n        obj = self.s3.Object(bucket, key)\n        contents = obj.get()['Body'].read()\n        return contents"
  },
  {
    "id": "train-python-cosqa-train-8024",
    "code": "def indent ( block , spaces ) : new_block = '' for line in block . split ( '\\n' ) : new_block += spaces + line + '\\n' return new_block",
    "text": "paragraph spacing code python",
    "label": 1,
    "raw": "def indent(block, spaces):\n    \"\"\" indents paragraphs of text for rst formatting \"\"\"\n    new_block = ''\n    for line in block.split('\\n'):\n        new_block += spaces + line + '\\n'\n    return new_block"
  },
  {
    "id": "train-python-cosqa-train-19613",
    "code": "def _parse_tuple_string ( argument ) : if isinstance ( argument , str ) : return tuple ( int ( p . strip ( ) ) for p in argument . split ( ',' ) ) return argument",
    "text": "python parse tuple rest",
    "label": 1,
    "raw": "def _parse_tuple_string(argument):\n        \"\"\" Return a tuple from parsing 'a,b,c,d' -> (a,b,c,d) \"\"\"\n        if isinstance(argument, str):\n            return tuple(int(p.strip()) for p in argument.split(','))\n        return argument"
  },
  {
    "id": "train-python-cosqa-train-18493",
    "code": "def valid_file ( path : str ) -> bool : path = Path ( path ) . expanduser ( ) log . debug ( \"checking if %s is a valid file\" , path ) return path . exists ( ) and path . is_file ( )",
    "text": "python detect if path is valid",
    "label": 1,
    "raw": "def valid_file(path: str) -> bool:\n    \"\"\"\n    Verifies that a string path actually exists and is a file\n\n    :param path: The path to verify\n    :return: **True** if path exist and is a file\n    \"\"\"\n    path = Path(path).expanduser()\n    log.debug(\"checking if %s is a valid file\", path)\n    return path.exists() and path.is_file()"
  },
  {
    "id": "train-python-cosqa-train-10828",
    "code": "def handleFlaskPostRequest ( flaskRequest , endpoint ) : if flaskRequest . method == \"POST\" : return handleHttpPost ( flaskRequest , endpoint ) elif flaskRequest . method == \"OPTIONS\" : return handleHttpOptions ( ) else : raise exceptions . MethodNotAllowedException ( )",
    "text": "python flask if requests is post",
    "label": 1,
    "raw": "def handleFlaskPostRequest(flaskRequest, endpoint):\n    \"\"\"\n    Handles the specified flask request for one of the POST URLS\n    Invokes the specified endpoint to generate a response.\n    \"\"\"\n    if flaskRequest.method == \"POST\":\n        return handleHttpPost(flaskRequest, endpoint)\n    elif flaskRequest.method == \"OPTIONS\":\n        return handleHttpOptions()\n    else:\n        raise exceptions.MethodNotAllowedException()"
  },
  {
    "id": "train-python-cosqa-train-10392",
    "code": "def init_db ( ) : db . drop_all ( ) db . configure_mappers ( ) db . create_all ( ) db . session . commit ( )",
    "text": "stack overflow python databases i",
    "label": 1,
    "raw": "def init_db():\n    \"\"\"\n    Drops and re-creates the SQL schema\n    \"\"\"\n    db.drop_all()\n    db.configure_mappers()\n    db.create_all()\n    db.session.commit()"
  },
  {
    "id": "train-python-cosqa-train-15749",
    "code": "def moving_average ( array , n = 3 ) : ret = _np . cumsum ( array , dtype = float ) ret [ n : ] = ret [ n : ] - ret [ : - n ] return ret [ n - 1 : ] / n",
    "text": "python moving average of a series",
    "label": 1,
    "raw": "def moving_average(array, n=3):\n    \"\"\"\n    Calculates the moving average of an array.\n\n    Parameters\n    ----------\n    array : array\n        The array to have the moving average taken of\n    n : int\n        The number of points of moving average to take\n    \n    Returns\n    -------\n    MovingAverageArray : array\n        The n-point moving average of the input array\n    \"\"\"\n    ret = _np.cumsum(array, dtype=float)\n    ret[n:] = ret[n:] - ret[:-n]\n    return ret[n - 1:] / n"
  },
  {
    "id": "train-python-cosqa-train-10774",
    "code": "def full ( self ) : if not self . size : return False return len ( self . pq ) == ( self . size + self . removed_count )",
    "text": "check if a queue is empty in python",
    "label": 1,
    "raw": "def full(self):\n        \"\"\"Return True if the queue is full\"\"\"\n        if not self.size: return False\n        return len(self.pq) == (self.size + self.removed_count)"
  },
  {
    "id": "train-python-cosqa-train-4705",
    "code": "def remove_duplicates ( lst ) : dset = set ( ) return [ l for l in lst if l not in dset and not dset . add ( l ) ]",
    "text": "eliminate duplicates in a list in python",
    "label": 1,
    "raw": "def remove_duplicates(lst):\n    \"\"\"\n    Emulate what a Python ``set()`` does, but keeping the element's order.\n    \"\"\"\n    dset = set()\n    return [l for l in lst if l not in dset and not dset.add(l)]"
  },
  {
    "id": "train-python-cosqa-dev-329",
    "code": "def fn_abs ( self , value ) : if is_ndarray ( value ) : return numpy . absolute ( value ) else : return abs ( value )",
    "text": "python take absolute value of array",
    "label": 1,
    "raw": "def fn_abs(self, value):\n        \"\"\"\n        Return the absolute value of a number.\n\n        :param value: The number.\n        :return: The absolute value of the number.\n        \"\"\"\n\n        if is_ndarray(value):\n            return numpy.absolute(value)\n        else:\n            return abs(value)"
  },
  {
    "id": "train-python-cosqa-train-16539",
    "code": "def IsBinary ( self , filename ) : mimetype = mimetypes . guess_type ( filename ) [ 0 ] if not mimetype : return False # e.g. README, \"real\" binaries usually have an extension # special case for text files which don't start with text/ if mimetype in TEXT_MIMETYPES : return False return not mimetype . startswith ( \"text/\" )",
    "text": "mimetext is not defined python examples",
    "label": 1,
    "raw": "def IsBinary(self, filename):\n\t\t\"\"\"Returns true if the guessed mimetyped isnt't in text group.\"\"\"\n\t\tmimetype = mimetypes.guess_type(filename)[0]\n\t\tif not mimetype:\n\t\t\treturn False  # e.g. README, \"real\" binaries usually have an extension\n\t\t# special case for text files which don't start with text/\n\t\tif mimetype in TEXT_MIMETYPES:\n\t\t\treturn False\n\t\treturn not mimetype.startswith(\"text/\")"
  },
  {
    "id": "train-python-cosqa-train-10190",
    "code": "def _load_data ( filepath ) : with h5py . File ( filepath , \"r\" ) as h5dataset : image_array = np . array ( h5dataset [ \"images\" ] ) # The 'label' data set in the hdf5 file actually contains the float values # and not the class labels. values_array = np . array ( h5dataset [ \"labels\" ] ) return image_array , values_array",
    "text": "reading data out of hdf5 matlab files python",
    "label": 1,
    "raw": "def _load_data(filepath):\n  \"\"\"Loads the images and latent values into Numpy arrays.\"\"\"\n  with h5py.File(filepath, \"r\") as h5dataset:\n    image_array = np.array(h5dataset[\"images\"])\n    # The 'label' data set in the hdf5 file actually contains the float values\n    # and not the class labels.\n    values_array = np.array(h5dataset[\"labels\"])\n  return image_array, values_array"
  },
  {
    "id": "train-python-cosqa-train-19013",
    "code": "def is_not_null ( df : DataFrame , col_name : str ) -> bool : if ( isinstance ( df , pd . DataFrame ) and col_name in df . columns and df [ col_name ] . notnull ( ) . any ( ) ) : return True else : return False",
    "text": "check if column value is null python",
    "label": 1,
    "raw": "def is_not_null(df: DataFrame, col_name: str) -> bool:\n    \"\"\"\n    Return ``True`` if the given DataFrame has a column of the given\n    name (string), and there exists at least one non-NaN value in that\n    column; return ``False`` otherwise.\n    \"\"\"\n    if (\n        isinstance(df, pd.DataFrame)\n        and col_name in df.columns\n        and df[col_name].notnull().any()\n    ):\n        return True\n    else:\n        return False"
  },
  {
    "id": "train-python-cosqa-train-18132",
    "code": "def valid_file ( path : str ) -> bool : path = Path ( path ) . expanduser ( ) log . debug ( \"checking if %s is a valid file\" , path ) return path . exists ( ) and path . is_file ( )",
    "text": "python how to verify file locaiton",
    "label": 1,
    "raw": "def valid_file(path: str) -> bool:\n    \"\"\"\n    Verifies that a string path actually exists and is a file\n\n    :param path: The path to verify\n    :return: **True** if path exist and is a file\n    \"\"\"\n    path = Path(path).expanduser()\n    log.debug(\"checking if %s is a valid file\", path)\n    return path.exists() and path.is_file()"
  },
  {
    "id": "train-python-cosqa-train-14777",
    "code": "def is_valid_file ( parser , arg ) : if not os . path . exists ( arg ) : parser . error ( \"File %s not found\" % arg ) else : return arg",
    "text": "validate file name not working in python",
    "label": 1,
    "raw": "def is_valid_file(parser,arg):\n\t\"\"\"verify the validity of the given file. Never trust the End-User\"\"\"\n\tif not os.path.exists(arg):\n       \t\tparser.error(\"File %s not found\"%arg)\n\telse:\n\t       \treturn arg"
  },
  {
    "id": "train-python-cosqa-train-9470",
    "code": "def accuracy ( self ) : true_pos = self . matrix [ 0 ] [ 0 ] false_pos = self . matrix [ 1 ] [ 0 ] false_neg = self . matrix [ 0 ] [ 1 ] true_neg = self . matrix [ 1 ] [ 1 ] num = 1.0 * ( true_pos + true_neg ) den = true_pos + true_neg + false_pos + false_neg return divide ( num , den )",
    "text": "how to get the accuracy score in python",
    "label": 1,
    "raw": "def accuracy(self):\n        \"\"\"Calculates accuracy\n\n        :return: Accuracy\n        \"\"\"\n        true_pos = self.matrix[0][0]\n        false_pos = self.matrix[1][0]\n        false_neg = self.matrix[0][1]\n        true_neg = self.matrix[1][1]\n\n        num = 1.0 * (true_pos + true_neg)\n        den = true_pos + true_neg + false_pos + false_neg\n\n        return divide(num, den)"
  },
  {
    "id": "train-python-cosqa-train-14547",
    "code": "def safe_rmtree ( directory ) : if os . path . exists ( directory ) : shutil . rmtree ( directory , True )",
    "text": "python best way to delete directory",
    "label": 1,
    "raw": "def safe_rmtree(directory):\n  \"\"\"Delete a directory if it's present. If it's not present, no-op.\"\"\"\n  if os.path.exists(directory):\n    shutil.rmtree(directory, True)"
  },
  {
    "id": "train-python-cosqa-train-17923",
    "code": "def uppercase_chars ( string : any ) -> str : return '' . join ( [ c if c . isupper ( ) else '' for c in str ( string ) ] )",
    "text": "who check upper case in python",
    "label": 1,
    "raw": "def uppercase_chars(string: any) -> str:\n        \"\"\"Return all (and only) the uppercase chars in the given string.\"\"\"\n        return ''.join([c if c.isupper() else '' for c in str(string)])"
  },
  {
    "id": "train-python-cosqa-train-6893",
    "code": "def slugify ( string ) : string = re . sub ( '[^\\w .-]' , '' , string ) string = string . replace ( \" \" , \"-\" ) return string",
    "text": "python how to remove dublicate letters from a string",
    "label": 1,
    "raw": "def slugify(string):\n    \"\"\"\n    Removes non-alpha characters, and converts spaces to hyphens. Useful for making file names.\n\n\n    Source: http://stackoverflow.com/questions/5574042/string-slugification-in-python\n    \"\"\"\n    string = re.sub('[^\\w .-]', '', string)\n    string = string.replace(\" \", \"-\")\n    return string"
  },
  {
    "id": "train-python-cosqa-train-6480",
    "code": "def _split ( string , splitters ) : part = '' for character in string : if character in splitters : yield part part = '' else : part += character yield part",
    "text": "can you split parts of a string in python",
    "label": 1,
    "raw": "def _split(string, splitters):\n    \"\"\"Splits a string into parts at multiple characters\"\"\"\n    part = ''\n    for character in string:\n        if character in splitters:\n            yield part\n            part = ''\n        else:\n            part += character\n    yield part"
  },
  {
    "id": "train-python-cosqa-train-17316",
    "code": "def pack_bits ( longbits ) : byte = longbits & ( 0x0101010101010101 ) byte = ( byte | ( byte >> 7 ) ) & ( 0x0003000300030003 ) byte = ( byte | ( byte >> 14 ) ) & ( 0x0000000f0000000f ) byte = ( byte | ( byte >> 28 ) ) & ( 0x00000000000000ff ) return byte",
    "text": "long number of bits python",
    "label": 1,
    "raw": "def pack_bits( longbits ):\n    \"\"\"Crunch a 64-bit int (8 bool bytes) into a bitfield.\"\"\"\n    byte = longbits & (0x0101010101010101)\n    byte = (byte | (byte>>7)) & (0x0003000300030003)\n    byte = (byte | (byte>>14)) & (0x0000000f0000000f)\n    byte = (byte | (byte>>28)) & (0x00000000000000ff)\n    return byte"
  },
  {
    "id": "train-python-cosqa-train-5170",
    "code": "def get_adjacent_matrix ( self ) : edges = self . edges num_edges = len ( edges ) + 1 adj = np . zeros ( [ num_edges , num_edges ] ) for k in range ( num_edges - 1 ) : adj [ edges [ k ] . L , edges [ k ] . R ] = 1 adj [ edges [ k ] . R , edges [ k ] . L ] = 1 return adj",
    "text": "how to do adjacency matrix in python and compute matrix",
    "label": 1,
    "raw": "def get_adjacent_matrix(self):\n        \"\"\"Get adjacency matrix.\n\n        Returns:\n            :param adj: adjacency matrix\n            :type adj: np.ndarray\n        \"\"\"\n        edges = self.edges\n        num_edges = len(edges) + 1\n        adj = np.zeros([num_edges, num_edges])\n\n        for k in range(num_edges - 1):\n            adj[edges[k].L, edges[k].R] = 1\n            adj[edges[k].R, edges[k].L] = 1\n\n        return adj"
  },
  {
    "id": "train-python-cosqa-train-9499",
    "code": "def empty_tree ( input_list ) : for item in input_list : if not isinstance ( item , list ) or not empty_tree ( item ) : return False return True",
    "text": "how to go through every element if a tree structure in python",
    "label": 1,
    "raw": "def empty_tree(input_list):\n    \"\"\"Recursively iterate through values in nested lists.\"\"\"\n    for item in input_list:\n        if not isinstance(item, list) or not empty_tree(item):\n            return False\n    return True"
  },
  {
    "id": "train-python-cosqa-train-18464",
    "code": "def getIndex ( predicateFn : Callable [ [ T ] , bool ] , items : List [ T ] ) -> int : try : return next ( i for i , v in enumerate ( items ) if predicateFn ( v ) ) except StopIteration : return - 1",
    "text": "python first index of a list that validates a condition",
    "label": 1,
    "raw": "def getIndex(predicateFn: Callable[[T], bool], items: List[T]) -> int:\n    \"\"\"\n    Finds the index of an item in list, which satisfies predicate\n    :param predicateFn: predicate function to run on items of list\n    :param items: list of tuples\n    :return: first index for which predicate function returns True\n    \"\"\"\n    try:\n        return next(i for i, v in enumerate(items) if predicateFn(v))\n    except StopIteration:\n        return -1"
  },
  {
    "id": "train-python-cosqa-train-13667",
    "code": "def filter_symlog ( y , base = 10.0 ) : log_base = np . log ( base ) sign = np . sign ( y ) logs = np . log ( np . abs ( y ) / log_base ) return sign * logs",
    "text": "how to do a logriithmic scale graph in python",
    "label": 1,
    "raw": "def filter_symlog(y, base=10.0):\n    \"\"\"Symmetrical logarithmic scale.\n\n    Optional arguments:\n\n    *base*:\n        The base of the logarithm.\n    \"\"\"\n    log_base = np.log(base)\n    sign = np.sign(y)\n    logs = np.log(np.abs(y) / log_base)\n    return sign * logs"
  },
  {
    "id": "train-python-cosqa-train-1053",
    "code": "def paint_cube ( self , x , y ) : # get the color color = self . next_color ( ) # calculate the position cube_pos = [ x , y , x + self . cube_size , y + self . cube_size ] # draw the cube draw = ImageDraw . Draw ( im = self . image ) draw . rectangle ( xy = cube_pos , fill = color )",
    "text": "python pos and mat to draw a cube",
    "label": 1,
    "raw": "def paint_cube(self, x, y):\n        \"\"\"\n        Paints a cube at a certain position a color.\n\n        Parameters\n        ----------\n        x: int\n            Horizontal position of the upper left corner of the cube.\n        y: int\n            Vertical position of the upper left corner of the cube.\n\n        \"\"\"\n        # get the color\n        color = self.next_color()\n        # calculate the position\n        cube_pos = [x, y, x + self.cube_size, y + self.cube_size]\n        # draw the cube\n        draw = ImageDraw.Draw(im=self.image)\n        draw.rectangle(xy=cube_pos, fill=color)"
  },
  {
    "id": "train-python-cosqa-train-11516",
    "code": "def values ( self ) : lower = float ( self . lowerSpnbx . value ( ) ) upper = float ( self . upperSpnbx . value ( ) ) return ( lower , upper )",
    "text": "how to figure out min and max in python",
    "label": 1,
    "raw": "def values(self):\n        \"\"\"Gets the user enter max and min values of where the \n        raster points should appear on the y-axis\n\n        :returns: (float, float) -- (min, max) y-values to bound the raster plot by\n        \"\"\"\n        lower = float(self.lowerSpnbx.value())\n        upper = float(self.upperSpnbx.value())\n        return (lower, upper)"
  },
  {
    "id": "train-python-cosqa-train-6559",
    "code": "def is_non_empty_string ( input_string ) : try : if not input_string . strip ( ) : raise ValueError ( ) except AttributeError as error : raise TypeError ( error ) return True",
    "text": "python empty string check nothing",
    "label": 1,
    "raw": "def is_non_empty_string(input_string):\n    \"\"\"\n    Validate if non empty string\n\n    :param input_string: Input is a *str*.\n    :return: True if input is string and non empty.\n       Raise :exc:`Exception` otherwise.\n    \"\"\"\n    try:\n        if not input_string.strip():\n            raise ValueError()\n    except AttributeError as error:\n        raise TypeError(error)\n\n    return True"
  },
  {
    "id": "train-python-cosqa-train-4271",
    "code": "def str_to_class ( class_name ) : mod_str , cls_str = class_name . rsplit ( '.' , 1 ) mod = __import__ ( mod_str , globals ( ) , locals ( ) , [ '' ] ) cls = getattr ( mod , cls_str ) return cls",
    "text": "python creating an object based on clas name",
    "label": 1,
    "raw": "def str_to_class(class_name):\n    \"\"\"\n    Returns a class based on class name    \n    \"\"\"\n    mod_str, cls_str = class_name.rsplit('.', 1)\n    mod = __import__(mod_str, globals(), locals(), [''])\n    cls = getattr(mod, cls_str)\n    return cls"
  },
  {
    "id": "train-python-cosqa-train-253",
    "code": "def _valid_other_type ( x , types ) : return all ( any ( isinstance ( el , t ) for t in types ) for el in np . ravel ( x ) )",
    "text": "checking types of elements inside of an 2d array python",
    "label": 1,
    "raw": "def _valid_other_type(x, types):\n    \"\"\"\n    Do all elements of x have a type from types?\n    \"\"\"\n    return all(any(isinstance(el, t) for t in types) for el in np.ravel(x))"
  },
  {
    "id": "train-python-cosqa-train-15906",
    "code": "def get_key_by_value ( dictionary , search_value ) : for key , value in dictionary . iteritems ( ) : if value == search_value : return ugettext ( key )",
    "text": "how to finda key uisng a vlue in python dict",
    "label": 1,
    "raw": "def get_key_by_value(dictionary, search_value):\n    \"\"\"\n    searchs a value in a dicionary and returns the key of the first occurrence\n\n    :param dictionary: dictionary to search in\n    :param search_value: value to search for\n    \"\"\"\n    for key, value in dictionary.iteritems():\n        if value == search_value:\n            return ugettext(key)"
  },
  {
    "id": "train-python-cosqa-train-12410",
    "code": "def jupytext_cli ( args = None ) : try : jupytext ( args ) except ( ValueError , TypeError , IOError ) as err : sys . stderr . write ( '[jupytext] Error: ' + str ( err ) + '\\n' ) exit ( 1 )",
    "text": "run the python code using jupytor",
    "label": 1,
    "raw": "def jupytext_cli(args=None):\n    \"\"\"Entry point for the jupytext script\"\"\"\n    try:\n        jupytext(args)\n    except (ValueError, TypeError, IOError) as err:\n        sys.stderr.write('[jupytext] Error: ' + str(err) + '\\n')\n        exit(1)"
  },
  {
    "id": "train-python-cosqa-train-14425",
    "code": "def print ( * a ) : try : _print ( * a ) return a [ 0 ] if len ( a ) == 1 else a except : _print ( * a )",
    "text": "printing a def in an if function python",
    "label": 1,
    "raw": "def print(*a):\n    \"\"\" print just one that returns what you give it instead of None \"\"\"\n    try:\n        _print(*a)\n        return a[0] if len(a) == 1 else a\n    except:\n        _print(*a)"
  },
  {
    "id": "train-python-cosqa-train-9885",
    "code": "def walk_tree ( root ) : yield root for child in root . children : for el in walk_tree ( child ) : yield el",
    "text": "how to traverse tree in python",
    "label": 1,
    "raw": "def walk_tree(root):\n    \"\"\"Pre-order depth-first\"\"\"\n    yield root\n\n    for child in root.children:\n        for el in walk_tree(child):\n            yield el"
  },
  {
    "id": "train-python-cosqa-train-19270",
    "code": "def _isbool ( string ) : return isinstance ( string , _bool_type ) or ( isinstance ( string , ( _binary_type , _text_type ) ) and string in ( \"True\" , \"False\" ) )",
    "text": "python boolean and or not",
    "label": 1,
    "raw": "def _isbool(string):\n    \"\"\"\n    >>> _isbool(True)\n    True\n    >>> _isbool(\"False\")\n    True\n    >>> _isbool(1)\n    False\n    \"\"\"\n    return isinstance(string, _bool_type) or\\\n        (isinstance(string, (_binary_type, _text_type))\n         and\n         string in (\"True\", \"False\"))"
  },
  {
    "id": "train-python-cosqa-train-9442",
    "code": "def _get_os_environ_dict ( keys ) : return { k : os . environ . get ( k , _UNDEFINED ) for k in keys }",
    "text": "how to get environment variables and its name in python",
    "label": 1,
    "raw": "def _get_os_environ_dict(keys):\n  \"\"\"Return a dictionary of key/values from os.environ.\"\"\"\n  return {k: os.environ.get(k, _UNDEFINED) for k in keys}"
  },
  {
    "id": "train-python-cosqa-train-6881",
    "code": "def format_exception ( e ) : from . utils . printing import fill return '\\n' . join ( fill ( line ) for line in traceback . format_exception_only ( type ( e ) , e ) )",
    "text": "python how to make a trace back error",
    "label": 1,
    "raw": "def format_exception(e):\n    \"\"\"Returns a string containing the type and text of the exception.\n\n    \"\"\"\n    from .utils.printing import fill\n    return '\\n'.join(fill(line) for line in traceback.format_exception_only(type(e), e))"
  },
  {
    "id": "train-python-cosqa-train-16124",
    "code": "def read_numpy ( fd , byte_order , dtype , count ) : return numpy . fromfile ( fd , byte_order + dtype [ - 1 ] , count )",
    "text": "how to read a binary file into numpy python",
    "label": 1,
    "raw": "def read_numpy(fd, byte_order, dtype, count):\n    \"\"\"Read tag data from file and return as numpy array.\"\"\"\n    return numpy.fromfile(fd, byte_order+dtype[-1], count)"
  },
  {
    "id": "train-python-cosqa-train-12775",
    "code": "def transform ( self , df ) : for name , function in self . outputs : df [ name ] = function ( df )",
    "text": "apply functions to each column python",
    "label": 1,
    "raw": "def transform(self, df):\n        \"\"\"\n        Transforms a DataFrame in place. Computes all outputs of the DataFrame.\n\n        Args:\n            df (pandas.DataFrame): DataFrame to transform.\n        \"\"\"\n        for name, function in self.outputs:\n            df[name] = function(df)"
  },
  {
    "id": "train-python-cosqa-train-2965",
    "code": "def linregress ( x , y , return_stats = False ) : a1 , a0 , r_value , p_value , stderr = scipy . stats . linregress ( x , y ) retval = a1 , a0 if return_stats : retval += r_value , p_value , stderr return retval",
    "text": "python multiple regression scipy",
    "label": 1,
    "raw": "def linregress(x, y, return_stats=False):\n    \"\"\"linear regression calculation\n\n    Parameters\n    ----\n    x :         independent variable (series)\n    y :         dependent variable (series)\n    return_stats : returns statistical values as well if required (bool)\n    \n\n    Returns\n    ----\n    list of parameters (and statistics)\n    \"\"\"\n    a1, a0, r_value, p_value, stderr = scipy.stats.linregress(x, y)\n\n    retval = a1, a0\n    if return_stats:\n        retval += r_value, p_value, stderr\n\n    return retval"
  },
  {
    "id": "train-python-cosqa-dev-581",
    "code": "def get_closest_index ( myList , myNumber ) : closest_values_index = _np . where ( self . time == take_closest ( myList , myNumber ) ) [ 0 ] [ 0 ] return closest_values_index",
    "text": "python function that gives closest whole number",
    "label": 1,
    "raw": "def get_closest_index(myList, myNumber):\n    \"\"\"\n    Assumes myList is sorted. Returns closest value to myNumber.\n    If two numbers are equally close, return the smallest number.\n\n    Parameters\n    ----------\n    myList : array\n        The list in which to find the closest value to myNumber\n    myNumber : float\n        The number to find the closest to in MyList\n\n    Returns\n    -------\n    closest_values_index : int\n        The index in the array of the number closest to myNumber in myList\n    \"\"\"\n    closest_values_index = _np.where(self.time == take_closest(myList, myNumber))[0][0]\n    return closest_values_index"
  },
  {
    "id": "train-python-cosqa-train-13657",
    "code": "def is_numeric_dtype ( dtype ) : dtype = np . dtype ( dtype ) return np . issubsctype ( getattr ( dtype , 'base' , None ) , np . number )",
    "text": "how to determine data types in python",
    "label": 1,
    "raw": "def is_numeric_dtype(dtype):\n    \"\"\"Return ``True`` if ``dtype`` is a numeric type.\"\"\"\n    dtype = np.dtype(dtype)\n    return np.issubsctype(getattr(dtype, 'base', None), np.number)"
  },
  {
    "id": "train-python-cosqa-train-9460",
    "code": "def document ( schema ) : teleport_schema = from_val ( schema ) return json . dumps ( teleport_schema , sort_keys = True , indent = 2 )",
    "text": "how to get schema of json in python",
    "label": 1,
    "raw": "def document(schema):\n    \"\"\"Print a documented teleport version of the schema.\"\"\"\n    teleport_schema = from_val(schema)\n    return json.dumps(teleport_schema, sort_keys=True, indent=2)"
  },
  {
    "id": "train-python-cosqa-train-4309",
    "code": "def triangle_area ( pt1 , pt2 , pt3 ) : a = 0.0 a += pt1 [ 0 ] * pt2 [ 1 ] - pt2 [ 0 ] * pt1 [ 1 ] a += pt2 [ 0 ] * pt3 [ 1 ] - pt3 [ 0 ] * pt2 [ 1 ] a += pt3 [ 0 ] * pt1 [ 1 ] - pt1 [ 0 ] * pt3 [ 1 ] return abs ( a ) / 2",
    "text": "area of triangle cross product in numpy python",
    "label": 1,
    "raw": "def triangle_area(pt1, pt2, pt3):\n    r\"\"\"Return the area of a triangle.\n\n    Parameters\n    ----------\n    pt1: (X,Y) ndarray\n        Starting vertex of a triangle\n    pt2: (X,Y) ndarray\n        Second vertex of a triangle\n    pt3: (X,Y) ndarray\n        Ending vertex of a triangle\n\n    Returns\n    -------\n    area: float\n        Area of the given triangle.\n\n    \"\"\"\n    a = 0.0\n\n    a += pt1[0] * pt2[1] - pt2[0] * pt1[1]\n    a += pt2[0] * pt3[1] - pt3[0] * pt2[1]\n    a += pt3[0] * pt1[1] - pt1[0] * pt3[1]\n\n    return abs(a) / 2"
  },
  {
    "id": "train-python-cosqa-train-7278",
    "code": "def Date ( value ) : from datetime import datetime try : return datetime ( * reversed ( [ int ( val ) for val in value . split ( '/' ) ] ) ) except Exception as err : raise argparse . ArgumentTypeError ( \"invalid date '%s'\" % value )",
    "text": "python optionparser type date",
    "label": 1,
    "raw": "def Date(value):\n    \"\"\"Custom type for managing dates in the command-line.\"\"\"\n    from datetime import datetime\n    try:\n        return datetime(*reversed([int(val) for val in value.split('/')]))\n    except Exception as err:\n        raise argparse.ArgumentTypeError(\"invalid date '%s'\" % value)"
  },
  {
    "id": "train-python-cosqa-train-16199",
    "code": "def rotate_point ( xorigin , yorigin , x , y , angle ) : rotx = ( x - xorigin ) * np . cos ( angle ) - ( y - yorigin ) * np . sin ( angle ) roty = ( x - yorigin ) * np . sin ( angle ) + ( y - yorigin ) * np . cos ( angle ) return rotx , roty",
    "text": "how to rotate a square through its origin in python",
    "label": 1,
    "raw": "def rotate_point(xorigin, yorigin, x, y, angle):\n    \"\"\"Rotate the given point by angle\n    \"\"\"\n    rotx = (x - xorigin) * np.cos(angle) - (y - yorigin) * np.sin(angle)\n    roty = (x - yorigin) * np.sin(angle) + (y - yorigin) * np.cos(angle)\n    return rotx, roty"
  },
  {
    "id": "train-python-cosqa-train-11651",
    "code": "def get_python ( ) : if sys . platform == 'win32' : python = path . join ( VE_ROOT , 'Scripts' , 'python.exe' ) else : python = path . join ( VE_ROOT , 'bin' , 'python' ) return python",
    "text": "how to locate python executable file on windows",
    "label": 1,
    "raw": "def get_python():\n    \"\"\"Determine the path to the virtualenv python\"\"\"\n    if sys.platform == 'win32':\n        python = path.join(VE_ROOT, 'Scripts', 'python.exe')\n    else:\n        python = path.join(VE_ROOT, 'bin', 'python')\n    return python"
  },
  {
    "id": "train-python-cosqa-train-15647",
    "code": "def dot_v3 ( v , w ) : return sum ( [ x * y for x , y in zip ( v , w ) ] )",
    "text": "how to calculate dot product of two vectors in python",
    "label": 1,
    "raw": "def dot_v3(v, w):\n    \"\"\"Return the dotproduct of two vectors.\"\"\"\n\n    return sum([x * y for x, y in zip(v, w)])"
  },
  {
    "id": "train-python-cosqa-train-16332",
    "code": "def uri_to_iri_parts ( path , query , fragment ) : path = url_unquote ( path , '%/;?' ) query = url_unquote ( query , '%;/?:@&=+,$#' ) fragment = url_unquote ( fragment , '%;/?:@&=+,$#' ) return path , query , fragment",
    "text": "python turn string into uri format",
    "label": 1,
    "raw": "def uri_to_iri_parts(path, query, fragment):\n    r\"\"\"\n    Converts a URI parts to corresponding IRI parts in a given charset.\n\n    Examples for URI versus IRI:\n\n    :param path: The path of URI to convert.\n    :param query: The query string of URI to convert.\n    :param fragment: The fragment of URI to convert.\n    \"\"\"\n    path = url_unquote(path, '%/;?')\n    query = url_unquote(query, '%;/?:@&=+,$#')\n    fragment = url_unquote(fragment, '%;/?:@&=+,$#')\n    return path, query, fragment"
  },
  {
    "id": "train-python-cosqa-train-13092",
    "code": "def get_property_by_name ( pif , name ) : return next ( ( x for x in pif . properties if x . name == name ) , None )",
    "text": "python get instance property by name",
    "label": 1,
    "raw": "def get_property_by_name(pif, name):\n    \"\"\"Get a property by name\"\"\"\n    return next((x for x in pif.properties if x.name == name), None)"
  },
  {
    "id": "train-python-cosqa-train-15418",
    "code": "def fixed ( ctx , number , decimals = 2 , no_commas = False ) : value = _round ( ctx , number , decimals ) format_str = '{:f}' if no_commas else '{:,f}' return format_str . format ( value )",
    "text": "format float with two decimals python",
    "label": 1,
    "raw": "def fixed(ctx, number, decimals=2, no_commas=False):\n    \"\"\"\n    Formats the given number in decimal format using a period and commas\n    \"\"\"\n    value = _round(ctx, number, decimals)\n    format_str = '{:f}' if no_commas else '{:,f}'\n    return format_str.format(value)"
  },
  {
    "id": "train-python-cosqa-train-9008",
    "code": "def safe_format ( s , * * kwargs ) : return string . Formatter ( ) . vformat ( s , ( ) , defaultdict ( str , * * kwargs ) )",
    "text": "format string in python to pass a specific string",
    "label": 1,
    "raw": "def safe_format(s, **kwargs):\n  \"\"\"\n  :type s str\n  \"\"\"\n  return string.Formatter().vformat(s, (), defaultdict(str, **kwargs))"
  },
  {
    "id": "train-python-cosqa-train-12306",
    "code": "def is_standalone ( self ) : return ( not self . args . client and not self . args . browser and not self . args . server and not self . args . webserver )",
    "text": "refelect only output only in web page load till analysis ready using python flask",
    "label": 1,
    "raw": "def is_standalone(self):\n        \"\"\"Return True if Glances is running in standalone mode.\"\"\"\n        return (not self.args.client and\n                not self.args.browser and\n                not self.args.server and\n                not self.args.webserver)"
  },
  {
    "id": "train-python-cosqa-train-9595",
    "code": "def parse_path ( path ) : version , project = path [ 1 : ] . split ( '/' ) return dict ( version = int ( version ) , project = project )",
    "text": "how to make dictionary from dynamic path string python3",
    "label": 1,
    "raw": "def parse_path(path):\n    \"\"\"Parse path string.\"\"\"\n    version, project = path[1:].split('/')\n    return dict(version=int(version), project=project)"
  },
  {
    "id": "train-python-cosqa-train-13714",
    "code": "def strip_spaces ( value , sep = None , join = True ) : value = value . strip ( ) value = [ v . strip ( ) for v in value . split ( sep ) ] join_sep = sep or ' ' return join_sep . join ( value ) if join else value",
    "text": "python panda strip white space in list",
    "label": 1,
    "raw": "def strip_spaces(value, sep=None, join=True):\n    \"\"\"Cleans trailing whitespaces and replaces also multiple whitespaces with a single space.\"\"\"\n    value = value.strip()\n    value = [v.strip() for v in value.split(sep)]\n    join_sep = sep or ' '\n    return join_sep.join(value) if join else value"
  },
  {
    "id": "train-python-cosqa-train-3895",
    "code": "def localize ( dt ) : if dt . tzinfo is UTC : return ( dt + LOCAL_UTC_OFFSET ) . replace ( tzinfo = None ) # No TZ info so not going to assume anything, return as-is. return dt",
    "text": "python 3 localize timezone",
    "label": 1,
    "raw": "def localize(dt):\n    \"\"\"Localize a datetime object to local time.\"\"\"\n    if dt.tzinfo is UTC:\n        return (dt + LOCAL_UTC_OFFSET).replace(tzinfo=None)\n    # No TZ info so not going to assume anything, return as-is.\n    return dt"
  },
  {
    "id": "train-python-cosqa-train-12242",
    "code": "def to_dict ( self ) : return { \"name\" : self . table_name , \"kind\" : self . table_kind , \"data\" : [ r . to_dict ( ) for r in self ] }",
    "text": "output of a query to dictionary in python",
    "label": 1,
    "raw": "def to_dict(self):\n        \"\"\"Converts the table to a dict.\"\"\"\n        return {\"name\": self.table_name, \"kind\": self.table_kind, \"data\": [r.to_dict() for r in self]}"
  },
  {
    "id": "train-python-cosqa-train-6483",
    "code": "def makedirs ( path , mode = 0o777 , exist_ok = False ) : os . makedirs ( path , mode , exist_ok )",
    "text": "cant make file with python makedir",
    "label": 1,
    "raw": "def makedirs(path, mode=0o777, exist_ok=False):\n    \"\"\"A wrapper of os.makedirs().\"\"\"\n    os.makedirs(path, mode, exist_ok)"
  },
  {
    "id": "train-python-cosqa-train-10675",
    "code": "def _remove_duplicate_files ( xs ) : seen = set ( [ ] ) out = [ ] for x in xs : if x [ \"path\" ] not in seen : out . append ( x ) seen . add ( x [ \"path\" ] ) return out",
    "text": "python def to remove duplicates from excel file",
    "label": 1,
    "raw": "def _remove_duplicate_files(xs):\n    \"\"\"Remove files specified multiple times in a list.\n    \"\"\"\n    seen = set([])\n    out = []\n    for x in xs:\n        if x[\"path\"] not in seen:\n            out.append(x)\n            seen.add(x[\"path\"])\n    return out"
  },
  {
    "id": "train-python-cosqa-train-13679",
    "code": "def seconds ( num ) : now = pytime . time ( ) end = now + num until ( end )",
    "text": "how to do things after a set amount of time in python",
    "label": 1,
    "raw": "def seconds(num):\n    \"\"\"\n    Pause for this many seconds\n    \"\"\"\n    now = pytime.time()\n    end = now + num\n    until(end)"
  },
  {
    "id": "train-python-cosqa-train-13834",
    "code": "def _get_column_types ( self , data ) : columns = list ( zip_longest ( * data ) ) return [ self . _get_column_type ( column ) for column in columns ]",
    "text": "how to know the data type for each column python",
    "label": 1,
    "raw": "def _get_column_types(self, data):\n        \"\"\"Get a list of the data types for each column in *data*.\"\"\"\n        columns = list(zip_longest(*data))\n        return [self._get_column_type(column) for column in columns]"
  },
  {
    "id": "train-python-cosqa-dev-234",
    "code": "def read_text_from_file ( path : str ) -> str : with open ( path ) as text_file : content = text_file . read ( ) return content",
    "text": "how to call the text file and read it in python",
    "label": 1,
    "raw": "def read_text_from_file(path: str) -> str:\n    \"\"\" Reads text file contents \"\"\"\n    with open(path) as text_file:\n        content = text_file.read()\n\n    return content"
  },
  {
    "id": "train-python-cosqa-train-12160",
    "code": "def get_dict_to_encoded_url ( data ) : unicode_data = dict ( [ ( k , smart_str ( v ) ) for k , v in data . items ( ) ] ) encoded = urllib . urlencode ( unicode_data ) return encoded",
    "text": "python url encode to dict",
    "label": 1,
    "raw": "def get_dict_to_encoded_url(data):\n    \"\"\"\n    Converts a dict to an encoded URL.\n    Example: given  data = {'a': 1, 'b': 2}, it returns 'a=1&b=2'\n    \"\"\"\n    unicode_data = dict([(k, smart_str(v)) for k, v in data.items()])\n    encoded = urllib.urlencode(unicode_data)\n    return encoded"
  },
  {
    "id": "train-python-cosqa-train-10956",
    "code": "def remove_last_entry ( self ) : self . current_beat -= 1.0 / self . bar [ - 1 ] [ 1 ] self . bar = self . bar [ : - 1 ] return self . current_beat",
    "text": "delete last value in array in python",
    "label": 1,
    "raw": "def remove_last_entry(self):\n        \"\"\"Remove the last NoteContainer in the Bar.\"\"\"\n        self.current_beat -= 1.0 / self.bar[-1][1]\n        self.bar = self.bar[:-1]\n        return self.current_beat"
  },
  {
    "id": "train-python-cosqa-train-12803",
    "code": "def val_to_bin ( edges , x ) : ibin = np . digitize ( np . array ( x , ndmin = 1 ) , edges ) - 1 return ibin",
    "text": "bin edges to be integers python",
    "label": 1,
    "raw": "def val_to_bin(edges, x):\n    \"\"\"Convert axis coordinate to bin index.\"\"\"\n    ibin = np.digitize(np.array(x, ndmin=1), edges) - 1\n    return ibin"
  },
  {
    "id": "train-python-cosqa-train-11302",
    "code": "def indent ( txt , spacing = 4 ) : return prefix ( str ( txt ) , '' . join ( [ ' ' for _ in range ( spacing ) ] ) )",
    "text": "how to add custom spacing in python",
    "label": 1,
    "raw": "def indent(txt, spacing=4):\n    \"\"\"\n    Indent given text using custom spacing, default is set to 4.\n    \"\"\"\n    return prefix(str(txt), ''.join([' ' for _ in range(spacing)]))"
  },
  {
    "id": "train-python-cosqa-train-7903",
    "code": "def decode_example ( self , example ) : img = tf . image . decode_image ( example , channels = self . _shape [ - 1 ] , dtype = tf . uint8 ) img . set_shape ( self . _shape ) return img",
    "text": "load image into tensorflow python",
    "label": 1,
    "raw": "def decode_example(self, example):\n    \"\"\"Reconstruct the image from the tf example.\"\"\"\n    img = tf.image.decode_image(\n        example, channels=self._shape[-1], dtype=tf.uint8)\n    img.set_shape(self._shape)\n    return img"
  },
  {
    "id": "train-python-cosqa-train-19989",
    "code": "def camel_to_snake ( s : str ) -> str : return CAMEL_CASE_RE . sub ( r'_\\1' , s ) . strip ( ) . lower ( )",
    "text": "python snake or camel case",
    "label": 1,
    "raw": "def camel_to_snake(s: str) -> str:\n    \"\"\"Convert string from camel case to snake case.\"\"\"\n\n    return CAMEL_CASE_RE.sub(r'_\\1', s).strip().lower()"
  },
  {
    "id": "train-python-cosqa-train-11853",
    "code": "def intround ( value ) : return int ( decimal . Decimal . from_float ( value ) . to_integral_value ( decimal . ROUND_HALF_EVEN ) )",
    "text": "python round down float to integer",
    "label": 1,
    "raw": "def intround(value):\n    \"\"\"Given a float returns a rounded int. Should give the same result on\n    both Py2/3\n    \"\"\"\n\n    return int(decimal.Decimal.from_float(\n        value).to_integral_value(decimal.ROUND_HALF_EVEN))"
  },
  {
    "id": "train-python-cosqa-train-17199",
    "code": "def __rmatmul__ ( self , other ) : return self . T . dot ( np . transpose ( other ) ) . T",
    "text": "python matrix multiplication symbol",
    "label": 1,
    "raw": "def __rmatmul__(self, other):\n        \"\"\"\n        Matrix multiplication using binary `@` operator in Python>=3.5.\n        \"\"\"\n        return self.T.dot(np.transpose(other)).T"
  },
  {
    "id": "train-python-cosqa-train-2205",
    "code": "def img_encode ( arr , * * kwargs ) : sio = BytesIO ( ) imsave ( sio , arr , * * kwargs ) sio . seek ( 0 ) img_format = kwargs [ 'format' ] if kwargs . get ( 'format' ) else 'png' img_str = base64 . b64encode ( sio . getvalue ( ) ) . decode ( ) return 'data:image/{};base64,{}' . format ( img_format , img_str )",
    "text": "base64 encoding image python numpy",
    "label": 1,
    "raw": "def img_encode(arr, **kwargs):\n    \"\"\"Encode ndarray to base64 string image data\n    \n    Parameters\n    ----------\n    arr: ndarray (rows, cols, depth)\n    kwargs: passed directly to matplotlib.image.imsave\n    \"\"\"\n    sio = BytesIO()\n    imsave(sio, arr, **kwargs)\n    sio.seek(0)\n    img_format = kwargs['format'] if kwargs.get('format') else 'png'\n    img_str = base64.b64encode(sio.getvalue()).decode()\n\n    return 'data:image/{};base64,{}'.format(img_format, img_str)"
  },
  {
    "id": "train-python-cosqa-train-10739",
    "code": "def list_string_to_dict ( string ) : dictionary = { } for idx , c in enumerate ( string ) : dictionary . update ( { c : idx } ) return dictionary",
    "text": "can you turn a string into a dictionary python",
    "label": 1,
    "raw": "def list_string_to_dict(string):\n    \"\"\"Inputs ``['a', 'b', 'c']``, returns ``{'a': 0, 'b': 1, 'c': 2}``.\"\"\"\n    dictionary = {}\n    for idx, c in enumerate(string):\n        dictionary.update({c: idx})\n    return dictionary"
  },
  {
    "id": "train-python-cosqa-train-9254",
    "code": "def decamelise ( text ) : s = re . sub ( '(.)([A-Z][a-z]+)' , r'\\1_\\2' , text ) return re . sub ( '([a-z0-9])([A-Z])' , r'\\1_\\2' , s ) . lower ( )",
    "text": "how to change the letter case in python",
    "label": 1,
    "raw": "def decamelise(text):\n    \"\"\"Convert CamelCase to lower_and_underscore.\"\"\"\n    s = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s).lower()"
  },
  {
    "id": "train-python-cosqa-train-9386",
    "code": "def Max ( a , axis , keep_dims ) : return np . amax ( a , axis = axis if not isinstance ( axis , np . ndarray ) else tuple ( axis ) , keepdims = keep_dims ) ,",
    "text": "python numpy arrary max along axis",
    "label": 1,
    "raw": "def Max(a, axis, keep_dims):\n    \"\"\"\n    Max reduction op.\n    \"\"\"\n    return np.amax(a, axis=axis if not isinstance(axis, np.ndarray) else tuple(axis),\n                   keepdims=keep_dims),"
  },
  {
    "id": "train-python-cosqa-train-14109",
    "code": "def do_quit ( self , arg ) : for name , fh in self . _backup : setattr ( sys , name , fh ) self . console . writeline ( '*** Aborting program ***\\n' ) self . console . flush ( ) self . console . close ( ) WebPdb . active_instance = None return Pdb . do_quit ( self , arg )",
    "text": "how to stop pdb python",
    "label": 1,
    "raw": "def do_quit(self, arg):\n        \"\"\"\n        quit || exit || q\n        Stop and quit the current debugging session\n        \"\"\"\n        for name, fh in self._backup:\n            setattr(sys, name, fh)\n        self.console.writeline('*** Aborting program ***\\n')\n        self.console.flush()\n        self.console.close()\n        WebPdb.active_instance = None\n        return Pdb.do_quit(self, arg)"
  },
  {
    "id": "train-python-cosqa-train-8976",
    "code": "def median ( data ) : data . sort ( ) num_values = len ( data ) half = num_values // 2 if num_values % 2 : return data [ half ] return 0.5 * ( data [ half - 1 ] + data [ half ] )",
    "text": "finding the median in python arthimeticallly",
    "label": 1,
    "raw": "def median(data):\n    \"\"\"Calculate the median of a list.\"\"\"\n    data.sort()\n    num_values = len(data)\n    half = num_values // 2\n    if num_values % 2:\n        return data[half]\n    return 0.5 * (data[half-1] + data[half])"
  },
  {
    "id": "train-python-cosqa-train-11366",
    "code": "def add_queue_handler ( queue ) : handler = QueueLogHandler ( queue ) handler . setFormatter ( QueueFormatter ( ) ) handler . setLevel ( DEBUG ) GLOBAL_LOGGER . addHandler ( handler )",
    "text": "python logging with queue",
    "label": 1,
    "raw": "def add_queue_handler(queue):\n    \"\"\"Add a queue log handler to the global logger.\"\"\"\n    handler = QueueLogHandler(queue)\n    handler.setFormatter(QueueFormatter())\n    handler.setLevel(DEBUG)\n    GLOBAL_LOGGER.addHandler(handler)"
  },
  {
    "id": "train-python-cosqa-train-19216",
    "code": "def filter_bool ( n : Node , query : str ) -> bool : return _scalariter2item ( n , query , bool )",
    "text": "python filter function return a series, but expected a scalar bool",
    "label": 1,
    "raw": "def filter_bool(n: Node, query: str) -> bool:\n    \"\"\"\n    Filter and ensure that the returned value is of type bool.\n    \"\"\"\n    return _scalariter2item(n, query, bool)"
  },
  {
    "id": "train-python-cosqa-dev-366",
    "code": "def set_color ( self , fg = None , bg = None , intensify = False , target = sys . stdout ) : raise NotImplementedError",
    "text": "prevent color of white or black using python colorsys",
    "label": 1,
    "raw": "def set_color(self, fg=None, bg=None, intensify=False, target=sys.stdout):\n        \"\"\"Set foreground- and background colors and intensity.\"\"\"\n        raise NotImplementedError"
  },
  {
    "id": "train-python-cosqa-train-12767",
    "code": "def _delete_keys ( dct , keys ) : c = deepcopy ( dct ) assert isinstance ( keys , list ) for k in keys : c . pop ( k ) return c",
    "text": "python delete keys from a dict",
    "label": 1,
    "raw": "def _delete_keys(dct, keys):\n    \"\"\"Returns a copy of dct without `keys` keys\n    \"\"\"\n    c = deepcopy(dct)\n    assert isinstance(keys, list)\n    for k in keys:\n        c.pop(k)\n    return c"
  },
  {
    "id": "train-python-cosqa-train-11443",
    "code": "def _cast_to_type ( self , value ) : if isinstance ( value , str ) or value is None : return value return str ( value )",
    "text": "how to convertt none type to string in python",
    "label": 1,
    "raw": "def _cast_to_type(self, value):\n        \"\"\" Convert the value to its string representation\"\"\"\n        if isinstance(value, str) or value is None:\n            return value\n        return str(value)"
  },
  {
    "id": "train-python-cosqa-train-10227",
    "code": "def strip_spaces ( x ) : x = x . replace ( b' ' , b'' ) x = x . replace ( b'\\t' , b'' ) return x",
    "text": "remove ite spaces python",
    "label": 1,
    "raw": "def strip_spaces(x):\n    \"\"\"\n    Strips spaces\n    :param x:\n    :return:\n    \"\"\"\n    x = x.replace(b' ', b'')\n    x = x.replace(b'\\t', b'')\n    return x"
  },
  {
    "id": "train-python-cosqa-train-11757",
    "code": "def _read_date_from_string ( str1 ) : full_date = [ int ( x ) for x in str1 . split ( '/' ) ] return datetime . date ( full_date [ 0 ] , full_date [ 1 ] , full_date [ 2 ] )",
    "text": "how to read date strings in python",
    "label": 1,
    "raw": "def _read_date_from_string(str1):\n    \"\"\"\n    Reads the date from a string in the format YYYY/MM/DD and returns\n    :class: datetime.date\n    \"\"\"\n    full_date = [int(x) for x in str1.split('/')]\n    return datetime.date(full_date[0], full_date[1], full_date[2])"
  },
  {
    "id": "train-python-cosqa-train-7699",
    "code": "def MatrixSolve ( a , rhs , adj ) : return np . linalg . solve ( a if not adj else _adjoint ( a ) , rhs ) ,",
    "text": "how to solve a matrix by python",
    "label": 1,
    "raw": "def MatrixSolve(a, rhs, adj):\n    \"\"\"\n    Matrix solve op.\n    \"\"\"\n    return np.linalg.solve(a if not adj else _adjoint(a), rhs),"
  },
  {
    "id": "train-python-cosqa-train-122",
    "code": "def sortable_title ( instance ) : title = plone_sortable_title ( instance ) if safe_callable ( title ) : title = title ( ) return title . lower ( )",
    "text": "callable title objects in python",
    "label": 1,
    "raw": "def sortable_title(instance):\n    \"\"\"Uses the default Plone sortable_text index lower-case\n    \"\"\"\n    title = plone_sortable_title(instance)\n    if safe_callable(title):\n        title = title()\n    return title.lower()"
  },
  {
    "id": "train-python-cosqa-train-1628",
    "code": "def add_plot ( x , y , xl , yl , fig , ax , LATEX = False , linestyle = None , * * kwargs ) : if LATEX : xl_data = xl [ 1 ] # NOQA yl_data = yl [ 1 ] else : xl_data = xl [ 0 ] # NOQA yl_data = yl [ 0 ] for idx in range ( len ( y ) ) : ax . plot ( x , y [ idx ] , label = yl_data [ idx ] , linestyle = linestyle ) ax . legend ( loc = 'upper right' ) ax . set_ylim ( auto = True )",
    "text": "making a legend on a line graph subplot python",
    "label": 1,
    "raw": "def add_plot(x, y, xl, yl, fig, ax, LATEX=False, linestyle=None, **kwargs):\n    \"\"\"Add plots to an existing plot\"\"\"\n    if LATEX:\n        xl_data = xl[1]  # NOQA\n        yl_data = yl[1]\n    else:\n        xl_data = xl[0]  # NOQA\n        yl_data = yl[0]\n\n    for idx in range(len(y)):\n        ax.plot(x, y[idx], label=yl_data[idx], linestyle=linestyle)\n\n    ax.legend(loc='upper right')\n    ax.set_ylim(auto=True)"
  },
  {
    "id": "train-python-cosqa-train-12830",
    "code": "def hamming ( s , t ) : if len ( s ) != len ( t ) : raise ValueError ( 'Hamming distance needs strings of equal length.' ) return sum ( s_ != t_ for s_ , t_ in zip ( s , t ) )",
    "text": "python distance similary matrices text",
    "label": 1,
    "raw": "def hamming(s, t):\n    \"\"\"\n    Calculate the Hamming distance between two strings. From Wikipedia article: Iterative with two matrix rows.\n\n    :param s: string 1\n    :type s: str\n    :param t: string 2\n    :type s: str\n    :return: Hamming distance\n    :rtype: float\n    \"\"\"\n    if len(s) != len(t):\n        raise ValueError('Hamming distance needs strings of equal length.')\n    return sum(s_ != t_ for s_, t_ in zip(s, t))"
  },
  {
    "id": "train-python-cosqa-train-7419",
    "code": "def get_as_string ( self , s3_path , encoding = 'utf-8' ) : content = self . get_as_bytes ( s3_path ) return content . decode ( encoding )",
    "text": "python read from s3 to a string",
    "label": 1,
    "raw": "def get_as_string(self, s3_path, encoding='utf-8'):\n        \"\"\"\n        Get the contents of an object stored in S3 as string.\n\n        :param s3_path: URL for target S3 location\n        :param encoding: Encoding to decode bytes to string\n        :return: File contents as a string\n        \"\"\"\n        content = self.get_as_bytes(s3_path)\n        return content.decode(encoding)"
  },
  {
    "id": "train-python-cosqa-train-18494",
    "code": "def _my_hash ( arg_list ) : # type: (List[Any]) -> int res = 0 for arg in arg_list : res = res * 31 + hash ( arg ) return res",
    "text": "python generate hash of list",
    "label": 1,
    "raw": "def _my_hash(arg_list):\n    # type: (List[Any]) -> int\n    \"\"\"Simple helper hash function\"\"\"\n    res = 0\n    for arg in arg_list:\n        res = res * 31 + hash(arg)\n    return res"
  },
  {
    "id": "train-python-cosqa-train-14376",
    "code": "def run ( self ) : try : self . run_checked ( ) except KeyboardInterrupt : thread . interrupt_main ( ) except Exception : self . internal_error ( )",
    "text": "python3 raise keyboard interrupt programatically",
    "label": 1,
    "raw": "def run (self):\n        \"\"\"Handle keyboard interrupt and other errors.\"\"\"\n        try:\n            self.run_checked()\n        except KeyboardInterrupt:\n            thread.interrupt_main()\n        except Exception:\n            self.internal_error()"
  },
  {
    "id": "train-python-cosqa-train-4461",
    "code": "def is_iterable_but_not_string ( obj ) : return hasattr ( obj , '__iter__' ) and not isinstance ( obj , str ) and not isinstance ( obj , bytes )",
    "text": "check if a variable is iterable python",
    "label": 1,
    "raw": "def is_iterable_but_not_string(obj):\n    \"\"\"\n    Determine whether or not obj is iterable but not a string (eg, a list, set, tuple etc).\n    \"\"\"\n    return hasattr(obj, '__iter__') and not isinstance(obj, str) and not isinstance(obj, bytes)"
  },
  {
    "id": "train-python-cosqa-train-15096",
    "code": "def get_closest_index ( myList , myNumber ) : closest_values_index = _np . where ( self . time == take_closest ( myList , myNumber ) ) [ 0 ] [ 0 ] return closest_values_index",
    "text": "closest time value before an index python",
    "label": 1,
    "raw": "def get_closest_index(myList, myNumber):\n    \"\"\"\n    Assumes myList is sorted. Returns closest value to myNumber.\n    If two numbers are equally close, return the smallest number.\n\n    Parameters\n    ----------\n    myList : array\n        The list in which to find the closest value to myNumber\n    myNumber : float\n        The number to find the closest to in MyList\n\n    Returns\n    -------\n    closest_values_index : int\n        The index in the array of the number closest to myNumber in myList\n    \"\"\"\n    closest_values_index = _np.where(self.time == take_closest(myList, myNumber))[0][0]\n    return closest_values_index"
  },
  {
    "id": "train-python-cosqa-train-11577",
    "code": "def rel_path ( filename ) : return os . path . join ( os . getcwd ( ) , os . path . dirname ( __file__ ) , filename )",
    "text": "python path abspath current file",
    "label": 1,
    "raw": "def rel_path(filename):\n    \"\"\"\n    Function that gets relative path to the filename\n    \"\"\"\n    return os.path.join(os.getcwd(), os.path.dirname(__file__), filename)"
  },
  {
    "id": "train-python-cosqa-train-13249",
    "code": "def connect ( ) : ftp_class = ftplib . FTP if not SSL else ftplib . FTP_TLS ftp = ftp_class ( timeout = TIMEOUT ) ftp . connect ( HOST , PORT ) ftp . login ( USER , PASSWORD ) if SSL : ftp . prot_p ( ) # secure data connection return ftp",
    "text": "free servers for testing ftp in python",
    "label": 1,
    "raw": "def connect():\n    \"\"\"Connect to FTP server, login and return an ftplib.FTP instance.\"\"\"\n    ftp_class = ftplib.FTP if not SSL else ftplib.FTP_TLS\n    ftp = ftp_class(timeout=TIMEOUT)\n    ftp.connect(HOST, PORT)\n    ftp.login(USER, PASSWORD)\n    if SSL:\n        ftp.prot_p()  # secure data connection\n    return ftp"
  },
  {
    "id": "train-python-cosqa-train-13949",
    "code": "def aug_sysargv ( cmdstr ) : import shlex argv = shlex . split ( cmdstr ) sys . argv . extend ( argv )",
    "text": "python script arguents in vs",
    "label": 1,
    "raw": "def aug_sysargv(cmdstr):\n    \"\"\" DEBUG FUNC modify argv to look like you ran a command \"\"\"\n    import shlex\n    argv = shlex.split(cmdstr)\n    sys.argv.extend(argv)"
  },
  {
    "id": "train-python-cosqa-train-18600",
    "code": "def replace_in_list ( stringlist : Iterable [ str ] , replacedict : Dict [ str , str ] ) -> List [ str ] : newlist = [ ] for fromstring in stringlist : newlist . append ( multiple_replace ( fromstring , replacedict ) ) return newlist",
    "text": "python modify list of strings while iterating",
    "label": 1,
    "raw": "def replace_in_list(stringlist: Iterable[str],\n                    replacedict: Dict[str, str]) -> List[str]:\n    \"\"\"\n    Returns a list produced by applying :func:`multiple_replace` to every\n    string in ``stringlist``.\n\n    Args:\n        stringlist: list of source strings\n        replacedict: dictionary mapping \"original\" to \"replacement\" strings\n\n    Returns:\n        list of final strings\n\n    \"\"\"\n    newlist = []\n    for fromstring in stringlist:\n        newlist.append(multiple_replace(fromstring, replacedict))\n    return newlist"
  },
  {
    "id": "train-python-cosqa-train-13118",
    "code": "def get_method_name ( method ) : name = get_object_name ( method ) if name . startswith ( \"__\" ) and not name . endswith ( \"__\" ) : name = \"_{0}{1}\" . format ( get_object_name ( method . im_class ) , name ) return name",
    "text": "python get method name as string",
    "label": 1,
    "raw": "def get_method_name(method):\n    \"\"\"\n    Returns given method name.\n\n    :param method: Method to retrieve the name.\n    :type method: object\n    :return: Method name.\n    :rtype: unicode\n    \"\"\"\n\n    name = get_object_name(method)\n    if name.startswith(\"__\") and not name.endswith(\"__\"):\n        name = \"_{0}{1}\".format(get_object_name(method.im_class), name)\n    return name"
  },
  {
    "id": "train-python-cosqa-train-14456",
    "code": "def get ( s , delimiter = '' , format = \"diacritical\" ) : return delimiter . join ( _pinyin_generator ( u ( s ) , format = format ) )",
    "text": "python 3 & distinguishe pinyin and english",
    "label": 1,
    "raw": "def get(s, delimiter='', format=\"diacritical\"):\n    \"\"\"Return pinyin of string, the string must be unicode\n    \"\"\"\n    return delimiter.join(_pinyin_generator(u(s), format=format))"
  },
  {
    "id": "train-python-cosqa-train-9957",
    "code": "def __init__ ( self , scope , parent ) : CodeStatement . __init__ ( self , scope , parent ) self . body = CodeBlock ( scope , self , explicit = True ) self . catches = [ ] self . finally_body = CodeBlock ( scope , self , explicit = True )",
    "text": "python try block create a scope",
    "label": 1,
    "raw": "def __init__(self, scope, parent):\n        \"\"\"Constructor for try block structures.\n\n        Args:\n            scope (CodeEntity): The program scope where this object belongs.\n            parent (CodeEntity): This object's parent in the program tree.\n        \"\"\"\n        CodeStatement.__init__(self, scope, parent)\n        self.body = CodeBlock(scope, self, explicit=True)\n        self.catches = []\n        self.finally_body = CodeBlock(scope, self, explicit=True)"
  },
  {
    "id": "train-python-cosqa-train-14253",
    "code": "def endline_semicolon_check ( self , original , loc , tokens ) : return self . check_strict ( \"semicolon at end of line\" , original , loc , tokens )",
    "text": "python unexpectd character after line continuation character",
    "label": 1,
    "raw": "def endline_semicolon_check(self, original, loc, tokens):\n        \"\"\"Check for semicolons at the end of lines.\"\"\"\n        return self.check_strict(\"semicolon at end of line\", original, loc, tokens)"
  },
  {
    "id": "train-python-cosqa-train-11868",
    "code": "def set_sig_figs ( n = 4 ) : u . default_format = '.' + str ( n ) + 'g' pd . options . display . float_format = ( '{:,.' + str ( n ) + '}' ) . format",
    "text": "how to specify the number of digits in python floats",
    "label": 1,
    "raw": "def set_sig_figs(n=4):\n    \"\"\"Set the number of significant figures used to print Pint, Pandas, and\n    NumPy quantities.\n\n    Args:\n        n (int): Number of significant figures to display.\n    \"\"\"\n    u.default_format = '.' + str(n) + 'g'\n    pd.options.display.float_format = ('{:,.' + str(n) + '}').format"
  },
  {
    "id": "train-python-cosqa-train-11511",
    "code": "def read_numpy ( fh , byteorder , dtype , count , offsetsize ) : dtype = 'b' if dtype [ - 1 ] == 's' else byteorder + dtype [ - 1 ] return fh . read_array ( dtype , count )",
    "text": "python numpy read data from binary file",
    "label": 1,
    "raw": "def read_numpy(fh, byteorder, dtype, count, offsetsize):\n    \"\"\"Read tag data from file and return as numpy array.\"\"\"\n    dtype = 'b' if dtype[-1] == 's' else byteorder+dtype[-1]\n    return fh.read_array(dtype, count)"
  },
  {
    "id": "train-python-cosqa-train-10534",
    "code": "def is_nullable_list ( val , vtype ) : return ( isinstance ( val , list ) and any ( isinstance ( v , vtype ) for v in val ) and all ( ( isinstance ( v , vtype ) or v is None ) for v in val ) )",
    "text": "python check if value is null or a list",
    "label": 1,
    "raw": "def is_nullable_list(val, vtype):\n    \"\"\"Return True if list contains either values of type `vtype` or None.\"\"\"\n    return (isinstance(val, list) and\n            any(isinstance(v, vtype) for v in val) and\n            all((isinstance(v, vtype) or v is None) for v in val))"
  },
  {
    "id": "train-python-cosqa-train-10863",
    "code": "def __len__ ( self ) : length = 0 for typ , siz , _ in self . format : length += siz return length",
    "text": "python format compute length",
    "label": 1,
    "raw": "def __len__(self):\n        \"\"\" This will equal 124 for the V1 database. \"\"\"\n        length = 0\n        for typ, siz, _ in self.format:\n            length += siz\n        return length"
  },
  {
    "id": "train-python-cosqa-train-14200",
    "code": "def _manhattan_distance ( vec_a , vec_b ) : if len ( vec_a ) != len ( vec_b ) : raise ValueError ( 'len(vec_a) must equal len(vec_b)' ) return sum ( map ( lambda a , b : abs ( a - b ) , vec_a , vec_b ) )",
    "text": "implement manhattan distance for 8puzzle python",
    "label": 1,
    "raw": "def _manhattan_distance(vec_a, vec_b):\n    \"\"\"Return manhattan distance between two lists of numbers.\"\"\"\n    if len(vec_a) != len(vec_b):\n        raise ValueError('len(vec_a) must equal len(vec_b)')\n    return sum(map(lambda a, b: abs(a - b), vec_a, vec_b))"
  },
  {
    "id": "train-python-cosqa-train-12127",
    "code": "def str_traceback ( error , tb ) : if not isinstance ( tb , types . TracebackType ) : return tb return '' . join ( traceback . format_exception ( error . __class__ , error , tb ) )",
    "text": "python traceback to str",
    "label": 1,
    "raw": "def str_traceback(error, tb):\n    \"\"\"Returns a string representation of the traceback.\n    \"\"\"\n    if not isinstance(tb, types.TracebackType):\n        return tb\n\n    return ''.join(traceback.format_exception(error.__class__, error, tb))"
  },
  {
    "id": "train-python-cosqa-train-11530",
    "code": "def open_with_encoding ( filename , encoding , mode = 'r' ) : return io . open ( filename , mode = mode , encoding = encoding , newline = '' )",
    "text": "python open file with unknown encoding",
    "label": 1,
    "raw": "def open_with_encoding(filename, encoding, mode='r'):\n    \"\"\"Return opened file with a specific encoding.\"\"\"\n    return io.open(filename, mode=mode, encoding=encoding,\n                   newline='')"
  },
  {
    "id": "train-python-cosqa-train-11732",
    "code": "def out ( self , output , newline = True ) : click . echo ( output , nl = newline )",
    "text": "how to print outputs to python cmd window",
    "label": 1,
    "raw": "def out(self, output, newline=True):\n        \"\"\"Outputs a string to the console (stdout).\"\"\"\n        click.echo(output, nl=newline)"
  },
  {
    "id": "train-python-cosqa-train-12704",
    "code": "def loads ( string ) : f = StringIO . StringIO ( string ) marshaller = JavaObjectUnmarshaller ( f ) marshaller . add_transformer ( DefaultObjectTransformer ( ) ) return marshaller . readObject ( )",
    "text": "python consumer java string deserializer",
    "label": 1,
    "raw": "def loads(string):\n  \"\"\"\n  Deserializes Java objects and primitive data serialized by ObjectOutputStream\n  from a string.\n  \"\"\"\n  f = StringIO.StringIO(string)\n  marshaller = JavaObjectUnmarshaller(f)\n  marshaller.add_transformer(DefaultObjectTransformer())\n  return marshaller.readObject()"
  },
  {
    "id": "train-python-cosqa-train-10724",
    "code": "def split_multiline ( value ) : return [ element for element in ( line . strip ( ) for line in value . split ( '\\n' ) ) if element ]",
    "text": "python divide string into list of lines",
    "label": 1,
    "raw": "def split_multiline(value):\n    \"\"\"Split a multiline string into a list, excluding blank lines.\"\"\"\n    return [element for element in (line.strip() for line in value.split('\\n'))\n            if element]"
  },
  {
    "id": "train-python-cosqa-train-8035",
    "code": "def __get_float ( section , name ) : try : return float ( section [ name ] ) except ( ValueError , TypeError , KeyError ) : return float ( 0 )",
    "text": "passing float in json python",
    "label": 1,
    "raw": "def __get_float(section, name):\n    \"\"\"Get the forecasted float from json section.\"\"\"\n    try:\n        return float(section[name])\n    except (ValueError, TypeError, KeyError):\n        return float(0)"
  },
  {
    "id": "train-python-cosqa-train-12433",
    "code": "def table_width ( self ) : outer_widths = max_dimensions ( self . table_data , self . padding_left , self . padding_right ) [ 2 ] outer_border = 2 if self . outer_border else 0 inner_border = 1 if self . inner_column_border else 0 return table_width ( outer_widths , outer_border , inner_border )",
    "text": "set graphical table column width in ironpython",
    "label": 1,
    "raw": "def table_width(self):\n        \"\"\"Return the width of the table including padding and borders.\"\"\"\n        outer_widths = max_dimensions(self.table_data, self.padding_left, self.padding_right)[2]\n        outer_border = 2 if self.outer_border else 0\n        inner_border = 1 if self.inner_column_border else 0\n        return table_width(outer_widths, outer_border, inner_border)"
  },
  {
    "id": "train-python-cosqa-train-4049",
    "code": "def save_config_value ( request , response , key , value ) : request . session [ key ] = value response . set_cookie ( key , value , expires = one_year_from_now ( ) ) return response",
    "text": "store cookies python back end",
    "label": 1,
    "raw": "def save_config_value(request, response, key, value):\n    \"\"\"Sets value of key `key` to `value` in both session and cookies.\"\"\"\n    request.session[key] = value\n    response.set_cookie(key, value, expires=one_year_from_now())\n    return response"
  },
  {
    "id": "train-python-cosqa-train-2749",
    "code": "def index ( self , elem ) : return _coconut . len ( self . _iter ) - self . _iter . index ( elem ) - 1",
    "text": "get index of iterator python",
    "label": 1,
    "raw": "def index(self, elem):\n        \"\"\"Find the index of elem in the reversed iterator.\"\"\"\n        return _coconut.len(self._iter) - self._iter.index(elem) - 1"
  },
  {
    "id": "train-python-cosqa-train-13078",
    "code": "def fromDict ( cls , _dict ) : obj = cls ( ) obj . __dict__ . update ( _dict ) return obj",
    "text": "defining constructor of dict in python",
    "label": 1,
    "raw": "def fromDict(cls, _dict):\n        \"\"\" Builds instance from dictionary of properties. \"\"\"\n        obj = cls()\n        obj.__dict__.update(_dict)\n        return obj"
  },
  {
    "id": "train-python-cosqa-train-9844",
    "code": "def hamming ( s , t ) : if len ( s ) != len ( t ) : raise ValueError ( 'Hamming distance needs strings of equal length.' ) return sum ( s_ != t_ for s_ , t_ in zip ( s , t ) )",
    "text": "python string hamming distance fast",
    "label": 1,
    "raw": "def hamming(s, t):\n    \"\"\"\n    Calculate the Hamming distance between two strings. From Wikipedia article: Iterative with two matrix rows.\n\n    :param s: string 1\n    :type s: str\n    :param t: string 2\n    :type s: str\n    :return: Hamming distance\n    :rtype: float\n    \"\"\"\n    if len(s) != len(t):\n        raise ValueError('Hamming distance needs strings of equal length.')\n    return sum(s_ != t_ for s_, t_ in zip(s, t))"
  },
  {
    "id": "train-python-cosqa-train-10944",
    "code": "def __eq__ ( self , other ) : return isinstance ( other , self . __class__ ) and self . _freeze ( ) == other . _freeze ( )",
    "text": "define equality in python object",
    "label": 1,
    "raw": "def __eq__(self, other):\n        \"\"\"Determine if two objects are equal.\"\"\"\n        return isinstance(other, self.__class__) \\\n            and self._freeze() == other._freeze()"
  },
  {
    "id": "train-python-cosqa-train-7159",
    "code": "def std_datestr ( self , datestr ) : return date . strftime ( self . str2date ( datestr ) , self . std_dateformat )",
    "text": "how to change string to date formate python",
    "label": 1,
    "raw": "def std_datestr(self, datestr):\n        \"\"\"Reformat a date string to standard format.\n        \"\"\"\n        return date.strftime(\n                self.str2date(datestr), self.std_dateformat)"
  },
  {
    "id": "train-python-cosqa-train-1077",
    "code": "def line_count ( fn ) : with open ( fn ) as f : for i , l in enumerate ( f ) : pass return i + 1",
    "text": "how to get number of lines of a file python",
    "label": 1,
    "raw": "def line_count(fn):\n    \"\"\" Get line count of file\n\n    Args:\n        fn (str): Path to file\n\n    Return:\n          Number of lines in file (int)\n    \"\"\"\n\n    with open(fn) as f:\n        for i, l in enumerate(f):\n            pass\n    return i + 1"
  },
  {
    "id": "train-python-cosqa-train-2035",
    "code": "def _has_fileno ( stream ) : try : stream . fileno ( ) except ( AttributeError , OSError , IOError , io . UnsupportedOperation ) : return False return True",
    "text": "python check if stream is open",
    "label": 1,
    "raw": "def _has_fileno(stream):\n    \"\"\"Returns whether the stream object seems to have a working fileno()\n\n    Tells whether _redirect_stderr is likely to work.\n\n    Parameters\n    ----------\n    stream : IO stream object\n\n    Returns\n    -------\n    has_fileno : bool\n        True if stream.fileno() exists and doesn't raise OSError or\n        UnsupportedOperation\n    \"\"\"\n    try:\n        stream.fileno()\n    except (AttributeError, OSError, IOError, io.UnsupportedOperation):\n        return False\n    return True"
  },
  {
    "id": "train-python-cosqa-train-7555",
    "code": "def value ( self ) : if self . _prop . fget is None : raise AttributeError ( 'Unable to read attribute' ) return self . _prop . fget ( self . _obj )",
    "text": "python return property object",
    "label": 1,
    "raw": "def value(self):\n        \"\"\"Value of property.\"\"\"\n        if self._prop.fget is None:\n            raise AttributeError('Unable to read attribute')\n        return self._prop.fget(self._obj)"
  },
  {
    "id": "train-python-cosqa-train-10434",
    "code": "def lazy_reverse_binmap ( f , xs ) : return ( f ( y , x ) for x , y in zip ( xs , xs [ 1 : ] ) )",
    "text": "swap function for lists python",
    "label": 1,
    "raw": "def lazy_reverse_binmap(f, xs):\n    \"\"\"\n    Same as lazy_binmap, except the parameters are flipped for the binary function\n    \"\"\"\n    return (f(y, x) for x, y in zip(xs, xs[1:]))"
  },
  {
    "id": "train-python-cosqa-train-1973",
    "code": "def dict_to_numpy_array ( d ) : return fromarrays ( d . values ( ) , np . dtype ( [ ( str ( k ) , v . dtype ) for k , v in d . items ( ) ] ) )",
    "text": "python change numpy dtype to python type",
    "label": 1,
    "raw": "def dict_to_numpy_array(d):\n    \"\"\"\n    Convert a dict of 1d array to a numpy recarray\n    \"\"\"\n    return fromarrays(d.values(), np.dtype([(str(k), v.dtype) for k, v in d.items()]))"
  },
  {
    "id": "train-python-cosqa-train-8585",
    "code": "def _int64_feature ( value ) : if not isinstance ( value , list ) : value = [ value ] return tf . train . Feature ( int64_list = tf . train . Int64List ( value = value ) )",
    "text": "caffe python layer add new feature",
    "label": 1,
    "raw": "def _int64_feature(value):\n  \"\"\"Wrapper for inserting int64 features into Example proto.\"\"\"\n  if not isinstance(value, list):\n    value = [value]\n  return tf.train.Feature(int64_list=tf.train.Int64List(value=value))"
  },
  {
    "id": "train-python-cosqa-train-16044",
    "code": "def str2int ( num , radix = 10 , alphabet = BASE85 ) : return NumConv ( radix , alphabet ) . str2int ( num )",
    "text": "how to make a str an int python",
    "label": 1,
    "raw": "def str2int(num, radix=10, alphabet=BASE85):\n    \"\"\"helper function for quick base conversions from strings to integers\"\"\"\n    return NumConv(radix, alphabet).str2int(num)"
  },
  {
    "id": "train-python-cosqa-train-16583",
    "code": "def myreplace ( astr , thefind , thereplace ) : alist = astr . split ( thefind ) new_s = alist . split ( thereplace ) return new_s",
    "text": "replace * in string in python",
    "label": 1,
    "raw": "def myreplace(astr, thefind, thereplace):\n    \"\"\"in string astr replace all occurences of thefind with thereplace\"\"\"\n    alist = astr.split(thefind)\n    new_s = alist.split(thereplace)\n    return new_s"
  },
  {
    "id": "train-python-cosqa-train-12720",
    "code": "def _init_unique_sets ( self ) : ks = dict ( ) for t in self . _unique_checks : key = t [ 0 ] ks [ key ] = set ( ) # empty set return ks",
    "text": "python data structures no duplicates",
    "label": 1,
    "raw": "def _init_unique_sets(self):\n        \"\"\"Initialise sets used for uniqueness checking.\"\"\"\n\n        ks = dict()\n        for t in self._unique_checks:\n            key = t[0]\n            ks[key] = set() # empty set\n        return ks"
  },
  {
    "id": "train-python-cosqa-train-10802",
    "code": "def current_memory_usage ( ) : import psutil proc = psutil . Process ( os . getpid ( ) ) #meminfo = proc.get_memory_info() meminfo = proc . memory_info ( ) rss = meminfo [ 0 ] # Resident Set Size / Mem Usage vms = meminfo [ 1 ] # Virtual Memory Size / VM Size  # NOQA return rss",
    "text": "check memory size of computer python",
    "label": 1,
    "raw": "def current_memory_usage():\n    \"\"\"\n    Returns this programs current memory usage in bytes\n    \"\"\"\n    import psutil\n    proc = psutil.Process(os.getpid())\n    #meminfo = proc.get_memory_info()\n    meminfo = proc.memory_info()\n    rss = meminfo[0]  # Resident Set Size / Mem Usage\n    vms = meminfo[1]  # Virtual Memory Size / VM Size  # NOQA\n    return rss"
  },
  {
    "id": "train-python-cosqa-train-14893",
    "code": "def b ( s ) : return s if isinstance ( s , bytes ) else s . encode ( locale . getpreferredencoding ( ) )",
    "text": "python codecs decode encoding",
    "label": 1,
    "raw": "def b(s):\n\t\"\"\" Encodes Unicode strings to byte strings, if necessary. \"\"\"\n\n\treturn s if isinstance(s, bytes) else s.encode(locale.getpreferredencoding())"
  },
  {
    "id": "train-python-cosqa-train-10224",
    "code": "def unique ( transactions ) : seen = set ( ) # TODO: Handle comments return [ x for x in transactions if not ( x in seen or seen . add ( x ) ) ]",
    "text": "remove empty entry list python",
    "label": 1,
    "raw": "def unique(transactions):\n    \"\"\" Remove any duplicate entries. \"\"\"\n    seen = set()\n    # TODO: Handle comments\n    return [x for x in transactions if not (x in seen or seen.add(x))]"
  },
  {
    "id": "train-python-cosqa-dev-576",
    "code": "def _repr ( obj ) : vals = \", \" . join ( \"{}={!r}\" . format ( name , getattr ( obj , name ) ) for name in obj . _attribs ) if vals : t = \"{}(name={}, {})\" . format ( obj . __class__ . __name__ , obj . name , vals ) else : t = \"{}(name={})\" . format ( obj . __class__ . __name__ , obj . name ) return t",
    "text": "python show attributes of object",
    "label": 1,
    "raw": "def _repr(obj):\n    \"\"\"Show the received object as precise as possible.\"\"\"\n    vals = \", \".join(\"{}={!r}\".format(\n        name, getattr(obj, name)) for name in obj._attribs)\n    if vals:\n        t = \"{}(name={}, {})\".format(obj.__class__.__name__, obj.name, vals)\n    else:\n        t = \"{}(name={})\".format(obj.__class__.__name__, obj.name)\n    return t"
  },
  {
    "id": "train-python-cosqa-train-3565",
    "code": "def get_shape ( img ) : if hasattr ( img , 'shape' ) : shape = img . shape else : shape = img . get_data ( ) . shape return shape",
    "text": "identifying shapes in an image python",
    "label": 1,
    "raw": "def get_shape(img):\n    \"\"\"Return the shape of img.\n\n    Paramerers\n    -----------\n    img:\n\n    Returns\n    -------\n    shape: tuple\n    \"\"\"\n    if hasattr(img, 'shape'):\n        shape = img.shape\n    else:\n        shape = img.get_data().shape\n    return shape"
  },
  {
    "id": "train-python-cosqa-train-8762",
    "code": "def __init__ ( self , function ) : super ( filter , self ) . __init__ ( ) self . function = function",
    "text": "python filter object subscript",
    "label": 1,
    "raw": "def __init__(self, function):\n\t\t\"\"\"function: to be called with each stream element as its\n\t\tonly argument\n\t\t\"\"\"\n\t\tsuper(filter, self).__init__()\n\t\tself.function = function"
  }
]